---@meta

---@class AArmorItem : ASpawnedItem
---@field HeadAppearance UBaseAppearanceData
---@field ChestAppearance UBaseAppearanceData
---@field ArmsAppearance UBaseAppearanceData
---@field LegsAppearance UBaseAppearanceData
AArmorItem = {}



---@class AAttachmentPoint : AActor
---@field bIsInUse boolean
---@field Arrow UArrowComponent
AAttachmentPoint = {}

---@param Value boolean
function AAttachmentPoint:SetInUse(Value) end
---@return boolean
function AAttachmentPoint:GetInUse() end
---@return UArrowComponent
function AAttachmentPoint:GetArrow() end


---@class AAttackTriggerBuilding : ABuilding
AAttackTriggerBuilding = {}

---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function AAttackTriggerBuilding:OnHit(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end


---@class ABackPackRelocationVolume : AVolume
---@field BackPackDestination FVector
ABackPackRelocationVolume = {}



---@class ABird : AActor
---@field LandedTime FFloatRange
---@field TimeBetweenSpawns FFloatRange
---@field ActiveHours FFloatRange
---@field SpawnProgressValues TArray<float>
---@field FlySpeed float
---@field LandingDistance float
---@field TakeOffDistance float
---@field CurrentState EBirdState
---@field CurrentLandSpot ABirdLandSpot
---@field CurrentLandSpotGuid FGuid
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field Progress float
---@field TotalProgress float
---@field HiddenForTimelapse boolean
ABird = {}

---@param bActive boolean
function ABird:OnTimelapseChange(bActive) end
function ABird:OnRep_CurrentState() end
---@param OldMode EEditMode
---@param NewMode EEditMode
function ABird:OnEditModeChanged(OldMode, NewMode) end
function ABird:HandleSpawn() end
function ABird:HandleDespawn() end
---@return EBirdState
function ABird:GetState() end
---@return ABirdLandSpot
function ABird:GetCurrentLandSpot() end


---@class ABirdLandSpot : AActor
---@field ArrivingItemSpawns TArray<FBirdSplineItemSpawn>
---@field DepartingItemSpawns TArray<FBirdSplineItemSpawn>
---@field ObsidianIDComponent UObsidianIDComponent
---@field SpotType EBirdSpotType
---@field EnterSpline USplineComponent
---@field ExitSpline USplineComponent
ABirdLandSpot = {}

---@return EBirdSpotType
function ABirdLandSpot:GetSpotType() end
---@return USplineComponent
function ABirdLandSpot:GetExitSpline() end
---@return USplineComponent
function ABirdLandSpot:GetEnterSpline() end


---@class ABlendTrigger : AActor
---@field GroupName FName
ABlendTrigger = {}

function ABlendTrigger:UpdateLocalPlayerBlendState() end
---@param OverlappedComp UPrimitiveComponent
---@param Other AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ABlendTrigger:OnComponentOverlapBegin(OverlappedComp, Other, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function ABlendTrigger:OnComponentEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@return UPrimitiveComponent
function ABlendTrigger:GetOuterCylinder() end
---@return UPrimitiveComponent
function ABlendTrigger:GetOuterBox() end


---@class ABossManager : AActor
---@field OnBossActivated FBossManagerOnBossActivated
---@field OnBossDeactivated FBossManagerOnBossDeactivated
---@field OnBossSpawned FBossManagerOnBossSpawned
---@field OnBossDespawned FBossManagerOnBossDespawned
---@field OnBossComplete FBossManagerOnBossComplete
---@field Encounter AEncounter
---@field Volume AVolume
---@field KeyItem FDataTableRowHandle
---@field ItemSpawnPoint ATargetPoint
---@field BossMusicTrack UMusicTrackData
---@field InteractText FLocString
---@field BossEventActors TArray<FBossActorSpawn>
---@field BossPhaseEncounters TArray<FPhaseEncounter>
---@field bSpawnBossPhaseEncountersDirectly boolean
---@field bKillMobsEncounterOnBossClear boolean
---@field CachedDroppedItems TArray<FBossDroppedItem>
---@field bBossActive boolean
---@field MaxKillCount int32
---@field BossActor TWeakObjectPtr<ASurvivalCharacter>
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
ABossManager = {}

---@param PhaseIndex int32
function ABossManager:SpawnPhaseEncounter(PhaseIndex) end
---@param Class UClass
---@param Transform FTransform
function ABossManager:SpawnActor(Class, Transform) end
---@param OverlappedActor AActor
---@param OtherActor AActor
function ABossManager:OnVolumeEndOverlap(OverlappedActor, OtherActor) end
---@param OverlappedActor AActor
---@param OtherActor AActor
function ABossManager:OnVolumeBeginOverlap(OverlappedActor, OtherActor) end
function ABossManager:OnRep_BossActor() end
function ABossManager:OnRep_BossActive() end
---@param Controller APlayerController
function ABossManager:OnPhotoModePreEntered(Controller) end
function ABossManager:OnPhotoModeExited() end
---@param NewPhase int32
function ABossManager:OnPhaseChangeBP(NewPhase) end
---@param NewPhase int32
function ABossManager:OnPhaseChange(NewPhase) end
---@param ActorDamageSource AActor
function ABossManager:OnEncounterSpawnKilled(ActorDamageSource) end
---@param DamageSource AActor
function ABossManager:OnEncounterComplete(DamageSource) end
function ABossManager:OnDeactivated() end
function ABossManager:OnActivated() end
---@param PlayerCharacter ASurvivalPlayerCharacter
---@return boolean
function ABossManager:IsPlayerInside(PlayerCharacter) end
---@return boolean
function ABossManager:IsActive() end
---@return int32
function ABossManager:GetEncounterMobs() end
function ABossManager:DeactivateBossEncounter() end
---@return boolean
function ABossManager:AreAnyPlayersAlive() end
function ABossManager:ActivateBossEncounter() end


---@class ABoxVolumeBuilding : AVolumeBuilding
---@field GridDimensionsBase FVector
---@field GridMeshUnitSize float
---@field InteractionPanelLeft UStaticMeshComponent
---@field InteractionPanelRight UStaticMeshComponent
---@field InteractionPanelFront UStaticMeshComponent
---@field InteractionPanelBack UStaticMeshComponent
---@field InteractionPanelTop UStaticMeshComponent
---@field InteractionPanelBottom UStaticMeshComponent
ABoxVolumeBuilding = {}



---@class ABuilderPawn : ACharacter
---@field OnDisplayModeChanged FBuilderPawnOnDisplayModeChanged
---@field OnCollisionModeChanged FBuilderPawnOnCollisionModeChanged
---@field XWorldBounds FVector2D
---@field YWorldBounds FVector2D
---@field RepairAttackRowHandle FDataTableRowHandle
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianID UObsidianIDComponent
---@field CameraTraceComponent USceneComponent
---@field SpringArmComponent USpringArmComponent
---@field HaulingComponent UHaulingComponent
---@field SpeedIncreaseRate float
---@field MaxSpeedMultiplier float
---@field MinSpeedMultiplier float
---@field RepairInterval float
---@field RotationInput FRotator
---@field BaseSpeedMultiplier float
---@field OwningController ASurvivalPlayerController
---@field OwningPlayerState ASurvivalPlayerState
---@field WaterVolumes TArray<AFluidVolume>
---@field LightEnabled boolean
---@field bCollisions boolean
---@field RepairAttack UAttack
---@field RepairTick FActorCustomTickFunction
---@field SkipRepairFrame boolean
---@field RepairSoundFX TSoftObjectPtr<USoundBase>
---@field RepairSoundFX2 TSoftObjectPtr<USoundBase>
ABuilderPawn = {}

function ABuilderPawn:ToggleLight() end
function ABuilderPawn:ServerStartRepair() end
---@param bEnabled boolean
function ABuilderPawn:ServerSetLightState(bEnabled) end
---@param DisplayMode ECameraDisplayMode
function ABuilderPawn:ServerSetDisplayMode(DisplayMode) end
---@param bEnabled boolean
function ABuilderPawn:ServerSetCollisionEnabled(bEnabled) end
function ABuilderPawn:ServerEndRepair() end
---@param AttackState EWaveAttackState
function ABuilderPawn:OnWaveAttackStateChanged(AttackState) end
function ABuilderPawn:OnRep_LightEnabled() end
function ABuilderPawn:OnRep_Collisions() end
---@param OldMode EEditMode
---@param NewMode EEditMode
function ABuilderPawn:OnPreEditModeChanged(OldMode, NewMode) end
function ABuilderPawn:OnGameModeSettingsChanged() end
---@param OldMode EEditMode
---@param NewMode EEditMode
function ABuilderPawn:OnEditModeChanged(OldMode, NewMode) end
---@param CollisionEnabled boolean
function ABuilderPawn:OnCollisionChangedEvent(CollisionEnabled) end
function ABuilderPawn:MulticastPlayRepairFX() end
---@return boolean
function ABuilderPawn:IsUnderTheWorld() end
function ABuilderPawn:InputToggleCameraModePressed() end
---@param bEnabled boolean
function ABuilderPawn:InputLightTogglePressed(bEnabled) end
---@param DisplayMode ECameraDisplayMode
function ABuilderPawn:HandleCameraDisplayModeChanged(DisplayMode) end
---@return USpringArmComponent
function ABuilderPawn:GetSpringArm() end
---@return float
function ABuilderPawn:GetSpeedMultiplier() end
---@return ASurvivalPlayerState
function ABuilderPawn:GetOwningPlayerState() end
---@return ASurvivalPlayerController
function ABuilderPawn:GetOwningController() end
---@return FTransform
function ABuilderPawn:GetCameraTraceTransform() end
---@return boolean
function ABuilderPawn:AllowBuildingRotation() end


---@class ABuilding : AActor
---@field DisableBuilderPawnPrimaryInteraction boolean
---@field NumTriggerOutputs int32
---@field NumTriggerInputs int32
---@field TriggerID int32
---@field TriggerOutputEvents TArray<FDataTableRowHandle>
---@field TriggerBehaviors TArray<FDataTableRowHandle>
---@field BehaviorsRequiringInstigators TArray<FDataTableRowHandle>
---@field OverrideTriggerCollisionRadius boolean
---@field TriggerCollisionRadius float
---@field TriggerTransformOffset FVector
---@field BuildingData FDataTableRowHandle
---@field Shape UBuildingShape
---@field LiteData UBuildingLiteData
---@field PreplacedType EPreplacedType
---@field PlacementRotation FRotator
---@field OnBuildingRelocated FBuildingOnBuildingRelocated
---@field MaterialToIngredientMappings TArray<FMaterialToIngredientMapping>
---@field bAutoPlacementLocations boolean
---@field RequiredPointsOfContact uint8
---@field ManualPlacementLocations TArray<FVector>
---@field PlacementSocketLocations TArray<FVector>
---@field PlacementSocketCenterOffset FVector
---@field GeneralPenetrationAllowance TArray<FAllowableBuildingPenetration>
---@field EnvironmentPenetrationAllowance TArray<FAllowableBuildingPenetration>
---@field OverrideValidSurfaces TArray<EPhysicalSurface>
---@field IsRelocateable EPlaceableCondition
---@field bCanCancel boolean
---@field CanDemolish EPlaceableCondition
---@field bForceMinorActorType boolean
---@field bOptimizeInstancedCollision boolean
---@field bNeverCullCollision boolean
---@field WaveRegion AWaveSpawnRegionVolume
---@field DisabledBuildingGlobalAudioCues uint32
---@field bIsPowerSource boolean
---@field bIsPowerReceiver boolean
---@field bIsPowerSwitch boolean
---@field bIsSwitchActive boolean
---@field PowerValue float
---@field NetworkPower float
---@field BaseIndex int32
---@field bAllowUseInEditMode boolean
---@field TriggerLightable boolean
---@field TriggerLockable boolean
---@field TriggerOpenable boolean
---@field TriggerCustomizable boolean
---@field TriggerInventory boolean
---@field TriggerEquipment boolean
---@field TriggerShowable boolean
---@field TriggerShown boolean
---@field ReplicatedData FBuildingReplicatedData
---@field BuildingState EBuildingState
---@field RegisteredGridLocation FBuildingGridLocation
---@field RegisteredBuildingPowerId FBuildingPowerId
---@field OnBuildingStateChangedDelegate FBuildingOnBuildingStateChangedDelegate
---@field OnPendingBuildingMovedDelegate FBuildingOnPendingBuildingMovedDelegate
---@field OnLitWithFireStateChangedDelegate FBuildingOnLitWithFireStateChangedDelegate
---@field RecipeItems TArray<FDataTableRowHandle>
---@field MeshList TArray<UMeshComponent>
---@field StaticMeshComponent UStaticMeshComponent
---@field HUDMarkerVariant uint8
---@field HUDMarkerColorVariant int32
---@field BuiltHUDMakerType EHUDMarkerType
---@field UseInteractionType EInteractionType
---@field FireType EBuildingFireType
---@field ShowDistanceOnHudMarker boolean
---@field IsLitWithFire boolean
---@field bProvidesSupport boolean
---@field bIsFoundation boolean
---@field bBaseBuilding boolean
---@field bThreatBuilding boolean
---@field bCanBeInstanced boolean
---@field bCanBeProxied boolean
---@field bCanAutoComplete boolean
---@field bAlwaysAutoComplete boolean
---@field bWiggleOnDamage boolean
---@field bDropToInventory boolean
---@field bDropIngredientsWhenDestroyed boolean
---@field bSightStimulus boolean
---@field bAlwaysSightStimulus boolean
---@field IsValidWaveAnchor boolean
---@field AnchoredSurface EBuildingGridSurfaceType
---@field SourceCreatureName FString
---@field DropIngredientsPercentage float
---@field DestroyedByCreatureDropIngredientsPercentage float
---@field BuildingTags FGameplayTagContainer
---@field StructureWeightClass FGameplayTag
---@field StructureSturdinessClass FGameplayTag
---@field WeightMultiplier float
---@field NavAreaClass TSubclassOf<UNavArea>
---@field HealthComponent UHealthComponent
---@field TeamComponent UTeamComponent
---@field BuildingRootComponent UAttachmentNotifyComponent
---@field ProceduralAnimationComponent UProceduralAnimationComponent
---@field NavModifierComponent UNavModifierComponent
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field BuildingPowerOCLComponent UOCLComponent
---@field PerceptionSourceComponent UAIPerceptionStimuliSourceComponent
---@field FacingHelperComponent UStaticMeshComponent
---@field MaterialSwapComponent UMaterialSwapComponent
---@field CustomProperties UCustomPropertyComponent
---@field DissolveMaterials TArray<UMaterialInstanceDynamic>
---@field AttachedToGridBuilding FBuildingGridBuildingId
---@field GameModeManagerComponent USurvivalModeManagerComponent
---@field bPlacedDuringPreviewMode boolean
---@field bIgnorePlaygroundBuildingInvulnerable boolean
---@field bPreventUseIfPlacedInEditMode boolean
---@field bIsDestroyingForEditModeChange boolean
ABuilding = {}

---@return boolean
function ABuilding:UsesShortEaves() end
---@return boolean
function ABuilding:UsesCrenellation() end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
function ABuilding:Use(Channel, InstigatedBy) end
function ABuilding:UpdateCollisionStateChange() end
function ABuilding:UpdateAllMaterials() end
function ABuilding:UnsetPlacedThisFrame() end
function ABuilding:UnlightFire() end
---@param Grid UBuildingGridComponent
---@param Slot FBuildingGridKey
---@return FBuildingGridKey
function ABuilding:TransformSlot(Grid, Slot) end
---@param DeltaTime float
function ABuilding:TickRuntimeDebugDraw(DeltaTime) end
---@param DeltaTime float
function ABuilding:TickPreviewDebugDraw(DeltaTime) end
---@param DeltaTime float
function ABuilding:TickCancelled(DeltaTime) end
---@return boolean
function ABuilding:ShouldShowHUDMarkerDistance() end
function ABuilding:SetUnderConstruction() end
---@param InInstigator AActor
---@param NewState EBuildingState
function ABuilding:SetStencilOnBuildingStateChanged(InInstigator, NewState) end
---@param Variant int32
function ABuilding:SetHUDMarkerVariant(Variant) end
---@param Variant int32
function ABuilding:SetHUDMarkerColorVariant(Variant) end
---@param InCustomName FString
function ABuilding:SetCustomName(InCustomName) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function ABuilding:SelfComponentEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ABuilding:SelfComponentBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
function ABuilding:RegisterBuildingChangedCallbacks() end
---@param Key FBuildingGridKey
function ABuilding:RegisterBuildingChangedCallback(Key) end
---@param Axis FBuildingGridAxis
function ABuilding:RegisterAxisChangedCallback(Axis) end
function ABuilding:PostRestoredFromInstance() end
function ABuilding:PostRegisteredToGrid() end
---@param AttackState EWaveAttackState
function ABuilding:OnWaveAttackStateChanged(AttackState) end
function ABuilding:OnRep_TriggerShown() end
function ABuilding:OnRep_TriggerID() end
function ABuilding:OnRep_ReplicatedData() end
function ABuilding:OnRep_NetworkPower() end
function ABuilding:OnRep_Items() end
function ABuilding:OnRep_IsLitWithFireChanged() end
function ABuilding:OnRep_HUDMarkerInfo() end
---@param OldState EBuildingState
function ABuilding:OnRep_BuildingStateChanged(OldState) end
---@param CurrentMode EEditMode
---@param NewMode EEditMode
function ABuilding:OnPreEditModeChanged(CurrentMode, NewMode) end
---@param bIsOpen boolean
---@param InInstigator AActor
function ABuilding:OnPowerSwitchOpenCloseStateChanged(bIsOpen, InInstigator) end
function ABuilding:OnPlayerPossessed() end
function ABuilding:OnPlayerEquipmentChanged() end
---@param Power float
function ABuilding:OnNetworkPowerChangedEvent(Power) end
---@param NetworkId int32
---@param Power float
function ABuilding:OnNetworkPowerChanged(NetworkId, Power) end
function ABuilding:OnGameModeChanged() end
---@param CurrentFragilityLevel int32
function ABuilding:OnFragilityLevelChanged(CurrentFragilityLevel) end
---@param OldMode EEditMode
---@param NewMode EEditMode
function ABuilding:OnEditModeChanged(OldMode, NewMode) end
---@param bActive boolean
function ABuilding:OnDefensePointActiveChanged(bActive) end
function ABuilding:OnCustomizedDataSet() end
---@param Player APlayerController
---@param bIsInBuildMode boolean
function ABuilding:OnBuildModeChanged(Player, bIsInBuildMode) end
---@param Sender UHealthComponent
---@param bIsFragile boolean
function ABuilding:OnBuildingIsFragileChanged(Sender, bIsFragile) end
---@param SourceHealthComponent UHealthComponent
---@param NewHealth float
---@param OldHealth float
function ABuilding:OnBuildingHealthChanged(SourceHealthComponent, NewHealth, OldHealth) end
---@param DamageInfo FDamageInfo
function ABuilding:OnBuildingDestroyed(DamageInfo) end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function ABuilding:OnBuildingDamaged(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@param NewLocation FBuildingGridLocation
function ABuilding:NotifyPendingBuildingMoved(NewLocation) end
---@param Location FBuildingGridLocation
function ABuilding:NotifyBuildingChanged(Location) end
function ABuilding:MulticastNoOp() end
function ABuilding:MulticastHandleDestroyed() end
function ABuilding:MulticastHandleDemolish() end
function ABuilding:MulticastHandleDeconstruction() end
function ABuilding:MulticastHandleDamaged() end
function ABuilding:MulticastHandleBuildingPlacement() end
---@param InstigatedBy AActor
function ABuilding:MulticastHandleBuildingCompletedSFX(InstigatedBy) end
---@param AttachParent USceneComponent
---@param RelativeTransform FTransform
function ABuilding:MulticastBuildingMoved(AttachParent, RelativeTransform) end
---@param InstigatedBy AActor
function ABuilding:LightFire(InstigatedBy) end
---@param NewState EBuildingState
---@param InstigatedBy AActor
function ABuilding:K2_HandleBuildingStateChanged(NewState, InstigatedBy) end
function ABuilding:K2_DrawDebugCells() end
---@return boolean
function ABuilding:IsUnderConstruction() end
---@return boolean
function ABuilding:IsReplacementBuilding() end
---@return boolean
function ABuilding:IsPlaced() end
---@return boolean
function ABuilding:IsOverloaded() end
---@param Type EBuildingGlobalAudioCueDisableFlags
---@return boolean
function ABuilding:IsGlobalAudioCueDisabled(Type) end
---@return boolean
function ABuilding:IsDestroyed() end
---@return boolean
function ABuilding:IsBuilt() end
---@return boolean
function ABuilding:IsBeingReplaced() end
---@return boolean
function ABuilding:IsBeingPlacedLocal() end
---@return boolean
function ABuilding:IsBeingPlaced() end
---@param Grid UBuildingGridComponent
---@param Slot FBuildingGridKey
---@return FBuildingGridKey
function ABuilding:InverseTransformSlot(Grid, Slot) end
---@param InTag FGameplayTag
---@return boolean
function ABuilding:HasTag(InTag) end
---@return boolean
function ABuilding:HasParentGrid() end
---@return boolean
function ABuilding:HasAttachedBuildings() end
---@param InTags FGameplayTagContainer
---@return boolean
function ABuilding:HasAnyTag(InTags) end
function ABuilding:HandleFinishCollapseDestroy() end
---@param PropertyName FName
---@param FloatValue float
---@param IntValue int32
---@param BoolValue boolean
---@param PropertiesWidget UCustomPropertiesWindowWidget
function ABuilding:HandleCustomPropertyValueChanged(PropertyName, FloatValue, IntValue, BoolValue, PropertiesWidget) end
function ABuilding:HandleBuildingMoved() end
---@param Component UAttachmentNotifyComponent
function ABuilding:HandleAttachParentChanged(Component) end
---@param ZoopCoord FIntVector
---@param ZoopMinCoord FIntVector
---@param ZoopSize FIntVector
---@return TSoftClassPtr<ABuilding>
function ABuilding:GetZoopClass(ZoopCoord, ZoopMinCoord, ZoopSize) end
---@return float
function ABuilding:GetWeight() end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return FText
function ABuilding:GetUseText(Channel, InstigatedBy) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return EInteractionType
function ABuilding:GetUseInteractionType(Channel, InstigatedBy) end
---@return boolean
function ABuilding:GetUseFacingHelper() end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return EInteractAnimType
function ABuilding:GetUseAnimType(Channel, InstigatedBy) end
---@return float
function ABuilding:GetTotalBurnTimeHours() end
---@return UTeamComponent
function ABuilding:GetTeamComponent() end
---@param At FBuildingGridLocation
---@return TArray<FBuildingGridKey>
function ABuilding:GetSupportedByCells(At) end
---@return float
function ABuilding:GetSturdiness() end
---@param AngleZ float
---@return TArray<FBuildingGridKey>
function ABuilding:GetSoftCells(AngleZ) end
---@return ABuilding
function ABuilding:GetReplacementBuilding() end
---@return TArray<FRecipeRequirements>
function ABuilding:GetRemainingRequirements() end
---@param Ingredient FDataTableRowHandle
---@return int32
function ABuilding:GetRecipeIngredientCountRequired(Ingredient) end
---@param Ingredient FDataTableRowHandle
---@return int32
function ABuilding:GetRecipeIngredientCountRemaining(Ingredient) end
---@param Ingredient FDataTableRowHandle
---@return int32
function ABuilding:GetRecipeIngredientCountAdded(Ingredient) end
---@return boolean
function ABuilding:GetProvidesSupport() end
---@return UBuildingGridComponent
function ABuilding:GetParentGrid() end
---@return TArray<FIntVector>
function ABuilding:GetOverrideSnaps() end
---@return UObsidianIDComponent
function ABuilding:GetObsidianIDComponent() end
---@return FString
function ABuilding:GetNameWildcard() end
---@return FString
function ABuilding:GetName() end
---@return boolean
function ABuilding:GetIsTriggerLocked() end
---@return boolean
function ABuilding:GetIsTriggerEnabled() end
---@return boolean
function ABuilding:GetIsTriggerActive() end
---@param InstigatedBy AActor
---@return boolean
function ABuilding:GetIsRelocateable(InstigatedBy) end
---@return boolean
function ABuilding:GetIsFoundation() end
---@return boolean
function ABuilding:GetIsAnchoredCompleteTransitive() end
---@return boolean
function ABuilding:GetIsAnchor() end
---@return int32
function ABuilding:GetHUDMarkerVariant() end
---@return EHUDMarkerType
function ABuilding:GetHUDMarkerType() end
---@return EHUDMarkerType
function ABuilding:GetHUDMarkerFadeVariant() end
---@return FString
function ABuilding:GetHUDMarkerDisplayName() end
---@return int32
function ABuilding:GetHUDMarkerColorVariant() end
---@return UHealthComponent
function ABuilding:GetHealthComponent() end
---@return UBuildingShape
function ABuilding:GetGridShape() end
---@return FTransform
function ABuilding:GetGridOriginTransform() end
---@return FVector
function ABuilding:GetGridOriginOffset() end
---@return FBuildingGridLocation
function ABuilding:GetGridLocation() end
---@return FBuildingGridKey
function ABuilding:GetGridKey() end
---@return FBuildingGridBuildingId
function ABuilding:GetGridBuildingId() end
---@return FVector
function ABuilding:GetGeometricOriginOffset() end
---@param At FBuildingGridLocation
---@param InActualWorldRotation float
---@return TArray<FBuildingGridKey>
function ABuilding:GetFlatFootprintAt(At, InActualWorldRotation) end
---@return TArray<FBuildingGridKey>
function ABuilding:GetFlatFootprint() end
---@return FString
function ABuilding:GetCustomName() end
---@param At FBuildingGridLocation
---@param InActualWorldRotation float
---@return TArray<FBuildingGridKey>
function ABuilding:GetComboFootprintAt(At, InActualWorldRotation) end
---@return TArray<FBuildingGridKey>
function ABuilding:GetComboFootprint() end
---@return int32
function ABuilding:GetCollapseCount() end
---@param AngleZ float
---@param Flags EGetCellFlags
---@return TArray<FBuildingGridKey>
function ABuilding:GetCells(AngleZ, Flags) end
---@param At FBuildingGridLocation
---@param InActualWorldRotation float
---@return TArray<FBuildingGridKey>
function ABuilding:GetCeilingFootprintAt(At, InActualWorldRotation) end
---@return TArray<FBuildingGridKey>
function ABuilding:GetCeilingFootprint() end
---@return FRotator
function ABuilding:GetBuildingFacing() end
---@param At FBuildingGridLocation
---@param InActualWorldRotation float
---@return TArray<FBuildingGridKey>
function ABuilding:GetBaseFootprintAt(At, InActualWorldRotation) end
---@return TArray<FBuildingGridKey>
function ABuilding:GetBaseFootprint() end
---@return UBuildingGridComponent
function ABuilding:GetAttachedGrid() end
---@return TArray<FBuildingGridKey>
function ABuilding:GetAdjacentCells() end
function ABuilding:EventOnBuildingRelocated() end
---@param ItemData FDataTableRowHandle
---@param AtTransform FTransform
---@param ThisActor UBaseLODActor
---@param InstigatedBy UBaseLODActor
function ABuilding:DropNewItem(ItemData, AtTransform, ThisActor, InstigatedBy) end
---@param Item UItem
---@param AtTransform FTransform
---@param ThisActor UBaseLODActor
---@param InstigatedBy UBaseLODActor
function ABuilding:DropItem(Item, AtTransform, ThisActor, InstigatedBy) end
---@return boolean
function ABuilding:DoesCompletionCauseOverload() end
function ABuilding:DeactivateParticles() end
function ABuilding:DeactivateLightsAndParticles() end
function ABuilding:DeactivateLights() end
---@param Location FBuildingGridLocation
function ABuilding:CheckVariantSwap(Location) end
---@param InputObject UObject
---@return boolean
function ABuilding:CheckTriggerInputCompatibility(InputObject) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return EInteractionState
function ABuilding:CanUse(Channel, InstigatedBy) end
---@return boolean
function ABuilding:CanModifyAnyCustomizedProperties() end
---@param InstigatedBy AActor
function ABuilding:CancelBuild(InstigatedBy) end
---@return boolean
function ABuilding:CanAddIngredients() end
---@param Requirement FRecipeRequirements
---@return int32
function ABuilding:CalculateRequiredItemCount(Requirement) end
---@param Target UMeshComponent
---@param ElementIndex int32
---@param SourceMaterial UMaterialInterface
---@param OptionalName FName
---@return UMaterialInstanceDynamic
function ABuilding:BuildingCreateDynamicMaterialInstance(Target, ElementIndex, SourceMaterial, OptionalName) end
---@param InstigatedBy UBaseLODActor
function ABuilding:BlueprintDropItems(InstigatedBy) end
function ABuilding:ActivateParticles() end
function ABuilding:ActivateLightsAndParticles() end
function ABuilding:ActivateLights() end


---@class ABuildingGridReplicationProxy : AActor
---@field ISMs TArray<UInstancedStaticMeshComponent>
---@field InstancedGridBuildings FInstancedGridBuildingData
---@field InstancedFreeBuildings FInstancedFreeBuildingData
---@field OwningGrid UBuildingGridComponent
---@field ISMKey FBuildingGridISMKey
---@field WorldGridToNetCullDistanceRatio float
ABuildingGridReplicationProxy = {}

function ABuildingGridReplicationProxy:OnRep_OwningGrid() end
function ABuildingGridReplicationProxy:OnRep_ISMKey() end
function ABuildingGridReplicationProxy:OnRep_InstancedGridBuildings() end
function ABuildingGridReplicationProxy:OnRep_InstancedFreeBuildings() end
---@param CurrentMode EEditMode
---@param NewMode EEditMode
function ABuildingGridReplicationProxy:OnPreEditModeChange(CurrentMode, NewMode) end


---@class ABuildingPowerCable : AActor
---@field Start FVector
---@field End FVector
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
ABuildingPowerCable = {}

function ABuildingPowerCable:OnRep_StartEnd() end
---@param DestinationNetwork int32
---@param RemovedNetwork int32
function ABuildingPowerCable:OnPoweredNetworksCoalesced(DestinationNetwork, RemovedNetwork) end
---@param InNodeA int32
---@param InNodeB int32
function ABuildingPowerCable:OnPoweredBuildingConnectionRemoved(InNodeA, InNodeB) end
---@param NodeId int32
function ABuildingPowerCable:OnNodeRemoved(NodeId) end
---@param NodeId int32
---@param NewNetworkId int32
function ABuildingPowerCable:OnNodeChangedNetwork(NodeId, NewNetworkId) end
---@param ID FBuildingPowerId
function ABuildingPowerCable:OnBuildingMoved(ID) end


---@class ABuoyantProp : AActor
---@field bPhysicsAsleep boolean
---@field LiteData UActorLiteData
---@field PropMesh UStaticMeshComponent
ABuoyantProp = {}



---@class ABurgleQuestChipOptionActor : ABurgleQuestOptionActor
---@field ChipItem UItem
---@field bHasInitializedChip boolean
---@field ChipClass TSoftClassPtr<ASpawnedItem>
---@field PersistenceComponent UPersistenceComponent
---@field ConditionalToggleComponent UConditionalToggleComponent
ABurgleQuestChipOptionActor = {}

---@return boolean
function ABurgleQuestChipOptionActor:IsComplete() end
---@return FDataTableRowHandle
function ABurgleQuestChipOptionActor:GetChipItemType() end


---@class ABurgleQuestKillUniqueOptionActor : ABurgleQuestOptionActor
---@field OnOptionCompleted FBurgleQuestKillUniqueOptionActorOnOptionCompleted
ABurgleQuestKillUniqueOptionActor = {}

---@return boolean
function ABurgleQuestKillUniqueOptionActor:IsComplete() end
---@param InInstigator AActor
function ABurgleQuestKillUniqueOptionActor:EncounterCompletedCallback(InInstigator) end


---@class ABurgleQuestOptionActor : AActor
---@field RewardTier int32
---@field bAllowRepeat boolean
---@field ProgressRange FFloatRange
---@field QuestTag FGameplayTag
---@field IdComponent UObsidianIDComponent
---@field ActiveQuest TWeakObjectPtr<UBurgleQuestInstance>
ABurgleQuestOptionActor = {}

---@param Quest UBurgleQuestInstance
function ABurgleQuestOptionActor:ReleaseByQuest(Quest) end
function ABurgleQuestOptionActor:OnStartQuest() end
function ABurgleQuestOptionActor:OnEndQuest() end
function ABurgleQuestOptionActor:NotifyStartQuest() end
---@param bCompleted boolean
function ABurgleQuestOptionActor:NotifyEndQuest(bCompleted) end
---@return boolean
function ABurgleQuestOptionActor:IsAvailable() end
---@return UObsidianIDComponent
function ABurgleQuestOptionActor:GetObsidianID() end
---@return FGuid
function ABurgleQuestOptionActor:GetGuid() end
---@param Quest UBurgleQuestInstance
function ABurgleQuestOptionActor:ClaimByQuest(Quest) end


---@class ABurrowSurvivalCharacter : ASurvivalCreature
---@field SightEnableDelay float
---@field BurrowSurfaceEffects TMap<EPhysicalSurface, UParticleSystem>
---@field BurrowComponent UBurrowComponent
ABurrowSurvivalCharacter = {}

---@param PSC UParticleSystemComponent
function ABurrowSurvivalCharacter:SetBurrowParticleComponent(PSC) end
---@param AudioComponent UAudioComponent
function ABurrowSurvivalCharacter:SetBurrowAudioComponent(AudioComponent) end
---@param BurrowState EBurrowState
function ABurrowSurvivalCharacter:HandleBurrowStateChanged(BurrowState) end


---@class ACameraMonitorTerminal : ASwitch
ACameraMonitorTerminal = {}

function ACameraMonitorTerminal:OnLocalPlayerOverlappingOnBeginPlay() end


---@class AChairBuilding : ABuilding
---@field SittingCharacters TArray<FSittingCharacter>
---@field bUseCooldown boolean
---@field InteractText FLocString
---@field SittingSlots TArray<FSittingSlot>
---@field StatusEffects TArray<FDataTableRowHandle>
AChairBuilding = {}

---@param Character ASurvivalPlayerCharacter
---@param Transform FTransform
function AChairBuilding:SetupSittingCharacterTransform(Character, Transform) end
function AChairBuilding:ResetChairCooldown() end
---@param PreviousSittingCharacters TArray<FSittingCharacter>
function AChairBuilding:OnRep_SittingCharacters(PreviousSittingCharacters) end
function AChairBuilding:OnPhotoModeExited() end
---@param SlotIndex int32
function AChairBuilding:OnCharacterStand(SlotIndex) end
---@param Character ACharacter
---@param bSitting boolean
function AChairBuilding:OnCharacterSittingChanged(Character, bSitting) end
---@param SlotIndex int32
function AChairBuilding:OnCharacterSit(SlotIndex) end
---@param NewHealthState EHealthState
function AChairBuilding:OnCharacterHealthStateChanged(NewHealthState) end
---@param DestroyedActor AActor
function AChairBuilding:OnCharacterDestroyed(DestroyedActor) end
---@return boolean
function AChairBuilding:IsFull() end
---@param Character ASurvivalPlayerCharacter
---@return int32
function AChairBuilding:GetSlotIndexForPlayer(Character) end
---@param SlotIndex int32
---@return FTransform
function AChairBuilding:GetSitTargetTransform(SlotIndex) end
---@param SlotIndex int32
---@return FName
function AChairBuilding:GetSitAttachSocket(SlotIndex) end
---@param Character ASurvivalPlayerCharacter
---@return UPrimitiveComponent
function AChairBuilding:GetSeatVolumeForPlayer(Character) end
---@return UPrimitiveComponent
function AChairBuilding:GetSeatVolume() end
---@param Character ASurvivalPlayerCharacter
---@param SlotIndex int32
function AChairBuilding:DetachSittingCharacter(Character, SlotIndex) end
---@param Character ASurvivalPlayerCharacter
---@param SlotIndex int32
function AChairBuilding:AttachSittingCharacter(Character, SlotIndex) end


---@class ACollectible : AActor
---@field OnCollectableCollected FCollectibleOnCollectableCollected
---@field DisplayName FLocString
---@field LODFullActorMaxDistance float
---@field LiteData UCollectibleLiteData
---@field ObsidianIDComponent UObsidianIDComponent
ACollectible = {}



---@class AColorCollectible : ACollectible
---@field UnlockedTheme TSubclassOf<UGlobalColorTheme>
AColorCollectible = {}



---@class ACombinedLadder : AActor
---@field SplinePoints TArray<FSplinePoint>
---@field SplineComponent UClimbableSplineComponent
ACombinedLadder = {}

function ACombinedLadder:OnRep_SplinePoints() end


---@class ACozinessSamplerBuilding : AWidgetBuilding
---@field CozinessEvaluatorComponent UCozinessEvaluatorComponent
ACozinessSamplerBuilding = {}

---@param OldValue int32
---@param NewValue int32
function ACozinessSamplerBuilding:K2_HandleCozinessValueChanged(OldValue, NewValue) end
---@param OldLevel int32
---@param NewLevel int32
function ACozinessSamplerBuilding:K2_HandleCozinessLevelChanged(OldLevel, NewLevel) end
---@param Sender UCozinessEvaluatorComponent
---@param OldValue int32
function ACozinessSamplerBuilding:HandleCozinessValueChanged(Sender, OldValue) end
---@param Sender UCozinessEvaluatorComponent
---@param OldLevel int32
function ACozinessSamplerBuilding:HandleCozinessLevelChanged(Sender, OldLevel) end


---@class ACraftingBuilding : AWidgetBuilding
---@field CraftingBuildingTag FGameplayTag
ACraftingBuilding = {}

---@return FGameplayTag
function ACraftingBuilding:GetCraftingBuildingType() end


---@class ACreatureSpawnerBuilding : AWidgetBuilding
---@field OnEncounterSpawnKilled FCreatureSpawnerBuildingOnEncounterSpawnKilled
---@field OnEncounterSpawnDestroyed FCreatureSpawnerBuildingOnEncounterSpawnDestroyed
---@field OnEncounterComplete FCreatureSpawnerBuildingOnEncounterComplete
---@field IsTriggerableEncounter boolean
---@field SpawnListData TArray<FDataTableRowHandle_NetCrc>
---@field DefaultSpawnData FDataTableRowHandle
---@field SpawnList TArray<FCreatureSpawnerSpawnData>
---@field SpawnCount int32
---@field SpriteComponent UBillboardComponent
---@field SphereComponent UDrawSphereComponent
ACreatureSpawnerBuilding = {}

---@param SpawnData FDataTableRowHandle
function ACreatureSpawnerBuilding:UpdateVisuals(SpawnData) end
---@param bForceSpawn boolean
function ACreatureSpawnerBuilding:Spawn(bForceSpawn) end
---@param SpawnClassData FDataTableRowHandle_NetCrc
---@param Count int32
function ACreatureSpawnerBuilding:SetCreatureSpawnClassData(SpawnClassData, Count) end
---@param InSpawnClass TSoftClassPtr<AActor>
function ACreatureSpawnerBuilding:SetCreatureSpawnClass(InSpawnClass) end
---@param DamageInfo FDamageInfo
function ACreatureSpawnerBuilding:OnSpawnKilled(DamageInfo) end
---@param LODActor UBaseLODActor
function ACreatureSpawnerBuilding:OnSpawnDestroyed(LODActor) end
function ACreatureSpawnerBuilding:OnRep_SpawnListData() end
---@return boolean
function ACreatureSpawnerBuilding:IsComplete() end
---@param bImmediate boolean
function ACreatureSpawnerBuilding:Despawn(bImmediate) end


---@class ACustomWorldNote : AWidgetBuilding
---@field CustomTextTitle FString
---@field CustomTextTitleFiltered FString
---@field CustomTextBody FString
---@field CustomTextBodyFiltered FString
ACustomWorldNote = {}

---@param NewTitle FString
function ACustomWorldNote:LocalSetCustomTitle(NewTitle) end
---@param NewBody FString
function ACustomWorldNote:LocalSetCustomBody(NewBody) end
---@return FString
function ACustomWorldNote:GetCustomTitleText() end
---@return FString
function ACustomWorldNote:GetCustomBodyText() end


---@class ADamageSwitch : AActor
---@field OnSwitchStateChanged FDamageSwitchOnSwitchStateChanged
---@field OnSwitchStateRestored FDamageSwitchOnSwitchStateRestored
---@field CurrentState int32
---@field NumStates int32
---@field HitCooldown float
---@field HealthComponent UHealthComponent
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
ADamageSwitch = {}

---@param NewState int32
function ADamageSwitch:SetCurrentState(NewState) end
function ADamageSwitch:OnRep_CurrentState() end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function ADamageSwitch:OnDamaged(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@return int32
function ADamageSwitch:GetCurrentState() end


---@class ADeathTriggerBuilding : ABuilding
ADeathTriggerBuilding = {}

---@param PartyComponent UPartyComponent
---@param PlayerCharacter ASurvivalPlayerCharacter
function ADeathTriggerBuilding:OnPlayerDeath(PartyComponent, PlayerCharacter) end


---@class ADefensePointBuilding : ABuilding
---@field OnChargeValueChanged FDefensePointBuildingOnChargeValueChanged
---@field OnDefensePointComplete FDefensePointBuildingOnDefensePointComplete
---@field OnDefensePointStateChanged FDefensePointBuildingOnDefensePointStateChanged
---@field DefensePointComponent UDefensePointComponent
---@field bCullVisualUpdating boolean
---@field bCameraShaking boolean
ADefensePointBuilding = {}

---@param CurrentState EDefensePointState
function ADefensePointBuilding:NativeOnDefensePointStateChanged(CurrentState) end
---@param bSuccess boolean
function ADefensePointBuilding:NativeOnDefensePointComplete(bSuccess) end
---@param ChargeRatio float
function ADefensePointBuilding:NativeOnChargeValueChanged(ChargeRatio) end


---@class ADefensePointManager : AActor
---@field OnChargeValueChanged FDefensePointManagerOnChargeValueChanged
---@field OnDefensePointComplete FDefensePointManagerOnDefensePointComplete
---@field OnDefensePointStateChanged FDefensePointManagerOnDefensePointStateChanged
---@field DefensePointComponent UDefensePointComponent
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
ADefensePointManager = {}

---@param CurrentState EDefensePointState
function ADefensePointManager:NativeOnDefensePointStateChanged(CurrentState) end
---@param bSuccess boolean
function ADefensePointManager:NativeOnDefensePointComplete(bSuccess) end
---@param ChargeRatio float
function ADefensePointManager:NativeOnChargeValueChanged(ChargeRatio) end
---@return boolean
function ADefensePointManager:DefensePointDebugActive() end


---@class ADefensePointPingVolume : AVolume
---@field PingHeight float
---@field PingLifetime float
---@field PingCooldown float
---@field CanRetrigger boolean
---@field PingPreciseLocation boolean
---@field PreciseLocationToPing FVector
---@field OneTimeOnly boolean
---@field HUDMarkerType EHUDMarkerType
---@field HUDMarkerVariation int32
---@field PendingPings TArray<ASurvivalCharacter>
---@field PreviousPings TSet<ASurvivalCharacter>
---@field ActiveOverlaps TSet<ASurvivalCharacter>
ADefensePointPingVolume = {}

---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ADefensePointPingVolume:OnDefensePointCreatureOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function ADefensePointPingVolume:OnDefensePointCreatureEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end


---@class ADivingSpiderNest : AStaticMeshActor
ADivingSpiderNest = {}


---@class ADoor : AActor
---@field bUseNavModifierComponent boolean
---@field OnLockStateChangedDelegate FDoorOnLockStateChangedDelegate
---@field OnOpenStateChangedDelegate FDoorOnOpenStateChangedDelegate
---@field OCLComponent UOCLComponent
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field NavModifierComponent UNavModifierComponent
---@field TimelineComponent UTimelineComponent
---@field HealthComponent UHealthComponent
---@field TerminalSwitchListener UTerminalSwitchListener
ADoor = {}

---@param IsOpen boolean
function ADoor:OnUpdateVisualState(IsOpen) end
---@param Event int32
function ADoor:OnTimelineCoreEvent(Event) end
---@param IsOpen boolean
---@param ActorInstigator AActor
function ADoor:OnOpenStateChanged(IsOpen, ActorInstigator) end
---@param IsLocked boolean
function ADoor:OnLockStateChanged(IsLocked) end
---@param DamageInfo FDamageInfo
function ADoor:OnDeath(DamageInfo) end
---@param IsOpen boolean
function ADoor:NativeOnUpdateVisualState(IsOpen) end
---@param IsOpen boolean
---@param ActorInstigator AActor
function ADoor:NativeOnOpenStateChanged(IsOpen, ActorInstigator) end
---@param IsLocked boolean
function ADoor:NativeOnLockStateChanged(IsLocked) end


---@class ADummyCharacterActor : APlaceableActor
---@field DataRowHandle FDataTableRowHandle
---@field SkeletalMeshComponent USkeletalMeshComponent
ADummyCharacterActor = {}

function ADummyCharacterActor:OnRep_DataRowHandle() end


---@class ADuplicatorBuilding : AWidgetBuilding
---@field UpgradeText FLocString
---@field RequiresUpgradeText FLocString
---@field PlayerDepositAnim EInteractAnimType
---@field PlayerDepositProp TSoftClassPtr<AActor>
---@field InteractLocationSocket FName
---@field InteractLocationZOffset float
ADuplicatorBuilding = {}

function ADuplicatorBuilding:OnDuplicatorUpgrade() end
function ADuplicatorBuilding:OnDuplicateItem() end
function ADuplicatorBuilding:OnDeDuplicateItem() end
---@param InstigatedBy AActor
function ADuplicatorBuilding:MulticastHandleUpgradeDuplicationTier(InstigatedBy) end
function ADuplicatorBuilding:MulticastHandleDuplcateItem() end
---@return UPrimitiveComponent
function ADuplicatorBuilding:GetUseVolume() end


---@class AEncounter : AActor
---@field OnEncounterSpawnKilled FEncounterOnEncounterSpawnKilled
---@field OnEncounterSpawnDestroyed FEncounterOnEncounterSpawnDestroyed
---@field OnEncounterComplete FEncounterOnEncounterComplete
---@field SpawnList TArray<FSpawnData>
---@field GlobalVariableConditional FGlobalVariableReferenceConditional
---@field MinimumDifficulty EGameDifficulty
---@field MinimumPlayers int32
---@field StartActivated boolean
---@field SpawnRandomlyInRadius boolean
---@field bSpawnOnNavMesh boolean
---@field Radius float
---@field RespawnTime float
---@field PlayerSpawnDistance float
---@field PlayerDistanceCheckInterval float
---@field bResetSpawnLocationsOnLoad boolean
---@field bQuestCriticalEncounter boolean
---@field SpriteComponent UBillboardComponent
---@field SphereComponent UDrawSphereComponent
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
AEncounter = {}

---@param bForceSpawn boolean
function AEncounter:Spawn(bForceSpawn) end
---@param DamageInfo FDamageInfo
function AEncounter:OnSpawnKilled(DamageInfo) end
---@param LODActor UBaseLODActor
function AEncounter:OnSpawnDestroyed(LODActor) end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param ActionInstigator AActor
function AEncounter:OnGlobalVariableChanged(GlobalVariableID, VariableValue, ActionInstigator) end
---@return boolean
function AEncounter:IsComplete() end
---@param bImmediate boolean
function AEncounter:Despawn(bImmediate) end


---@class AEquipmentDisplayBuilding : AWidgetBuilding
---@field InventoryComponent UInventoryComponent
---@field EquipmentComponent UEquipmentComponent
---@field ValidEquipmentSlots TArray<EEquipmentSlot>
---@field bItemGenerator boolean
---@field NumRefreshFramesRemaining int32
AEquipmentDisplayBuilding = {}

function AEquipmentDisplayBuilding:RefreshPrimitiveComponents() end
---@param Item UItem
---@return boolean
function AEquipmentDisplayBuilding:IsValidItem(Item) end
---@param Slot EEquipmentSlot
---@return boolean
function AEquipmentDisplayBuilding:IsValidEquipmentSlot(Slot) end
---@return boolean
function AEquipmentDisplayBuilding:IsItemGenerator() end
---@return UMeshComponent
function AEquipmentDisplayBuilding:GetEquipmentMeshComponent() end
---@param Slot EEquipmentSlot
---@return USkeletalMeshComponent
function AEquipmentDisplayBuilding:GetArmorMeshComponent(Slot) end


---@class AFabricatorBuilding : ABuilding
---@field OnFabricationStateChanged FFabricatorBuildingOnFabricationStateChanged
---@field OnFabricationProgress FFabricatorBuildingOnFabricationProgress
---@field FabricationRecipe FDataTableRowHandle
---@field FabricationItems TArray<UItem>
---@field ProcessingTime float
---@field OperableHealthThreshold float
---@field FabricationState EFabricationState
AFabricatorBuilding = {}

---@param DeltaTime float
function AFabricatorBuilding:TickProcessing(DeltaTime) end
function AFabricatorBuilding:OnRep_FabricationState() end
function AFabricatorBuilding:OnRep_FabricationItems() end
---@param SourceHealthComponent UHealthComponent
---@param NewHealth float
---@param OldHealth float
function AFabricatorBuilding:OnHealthChanged(SourceHealthComponent, NewHealth, OldHealth) end
---@return TArray<FRecipeRequirements>
function AFabricatorBuilding:GetRemainingFabricationRequirements() end
---@return float
function AFabricatorBuilding:GetProcessingTimePercentage() end
---@return EFabricationState
function AFabricatorBuilding:GetFabricationState() end


---@class AFaucetBuilding : ABuilding
---@field FaucetSpawnerComponent UFaucetSpawnerComponent
---@field bAllowTakeAll boolean
AFaucetBuilding = {}



---@class AFluidVolume : AActor
---@field NativeWaterPlane UStaticMeshComponent
---@field NativePostProcessAnchor USceneComponent
---@field NativePostProcessBox UBoxComponent
---@field NativePostProcessUnderWater UPostProcessComponent
---@field NativeCollider UBoxComponent
---@field NativeColliderCamera UBoxComponent
---@field NativeTickBoundsPadding float
---@field NativeSetFootstepsInShallowWater boolean
---@field NativeActivationRange float
---@field NativeOpacityFadeDistance float
---@field bAllowRenderStateCulling boolean
---@field PebbleClass TSubclassOf<ASpawnedItem>
---@field NativeMaxRippleCount int32
---@field MaxRipplesPerActor int32
---@field LowPriorityRippleSpeedMultiplier float
---@field LowPriorityKillThresholdMultiplier float
---@field NativeNumRipples int32
---@field NativeFadeSpeed float
---@field NativeFadeSpeedInner float
---@field NativeRippleSpeed float
---@field NativeRippleSpeedInner float
---@field NativeRTGlobalData UMaterialParameterCollection
---@field NativeRippleAddMaterial UMaterialInterface
---@field NativeOutputRT UTextureRenderTarget2D
---@field RippleUVBoundary float
---@field NativeSplashVFX UParticleSystem
---@field NativeSplashSFX USoundBase
---@field NativeAllowTick boolean
---@field NativeRipples TArray<FNativeRippleEvent>
---@field RippleAddMID UMaterialInstanceDynamic
---@field RippleRandomTickMin float
---@field RippleRandomTickMax float
---@field RTManager ALandscapeRTManager
---@field NativeInitialOverlappingActors TSet<AActor>
---@field NativeActorsToConsider TSet<AActor>
---@field NativeActorsToRemove TSet<AActor>
---@field NativeOverlappingActors TSet<AActor>
---@field AssociatedTickActors TArray<AActor>
AFluidVolume = {}

---@param DeltaTime float
function AFluidVolume:TickMaintainActorList(DeltaTime) end
---@param DeltaTime float
function AFluidVolume:TickCreateRipples(DeltaTime) end
---@param Actor AActor
---@param IsOverlapEvent boolean
function AFluidVolume:SpawnSplashEffects(Actor, IsOverlapEvent) end
function AFluidVolume:SetupNativeReferences() end
---@param Enabled boolean
function AFluidVolume:SetTickEnabledOnAssociatedActors(Enabled) end
---@param Enabled boolean
function AFluidVolume:SetTickEnabled(Enabled) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function AFluidVolume:OnColliderOverlapEnd(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function AFluidVolume:OnColliderOverlapBegin(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function AFluidVolume:OnCameraColliderOverlapEnd(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function AFluidVolume:OnCameraColliderOverlapBegin(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param ActorToCheck AActor
---@return boolean
function AFluidVolume:NativeQualifyActor(ActorToCheck) end
function AFluidVolume:NativeModifyRipple() end
function AFluidVolume:NativeMaintainActorList() end
---@return boolean
function AFluidVolume:NativeIsLocalPlayerInTickRange() end
---@param RippleEvent FNativeRippleEvent
function AFluidVolume:NativeDrawAtLocation(RippleEvent) end
---@param bIsOverlapEvent boolean
function AFluidVolume:NativeCreateRippleEvents(bIsOverlapEvent) end
function AFluidVolume:NativeCreateOverlapRipple() end
---@param XYOnly boolean
---@return boolean
function AFluidVolume:IsCameraInVolume(XYOnly) end
---@param Actor AActor
---@return boolean
function AFluidVolume:IsActorNearWaterSurface(Actor) end
---@param IsOverlapping boolean
function AFluidVolume:HandleCameraOverlapChange(IsOverlapping) end
---@param DeltaTime float
---@param CurrentSize float
---@param Size float
function AFluidVolume:GetRippleStrengthInner(DeltaTime, CurrentSize, Size) end
---@param DeltaTime float
---@param CurrentSize float
---@param Size float
function AFluidVolume:GetRippleStrength(DeltaTime, CurrentSize, Size) end
---@param DeltaTime float
---@param CurrentSize float
---@param Size float
function AFluidVolume:GetRippleSizeInner(DeltaTime, CurrentSize, Size) end
---@param DeltaTime float
---@param CurrentSize float
---@param Size float
function AFluidVolume:GetRippleSize(DeltaTime, CurrentSize, Size) end
function AFluidVolume:GetInitialOverlaps() end


---@class AFlySwimSurvivalCharacter : ASurvivalCreature
---@field AcceptableDistanceToWaypoint float
---@field RotationInterpSlowDist float
---@field RollSpeed float
---@field RollStrength float
---@field MaxPitch float
---@field bWiggleEnabled boolean
---@field InMotionWiggleAmplitude float
---@field IdleWiggleAmplitude float
---@field PreferredElevation float
---@field bAllowStrafe boolean
---@field bAllowPathfinding boolean
---@field bPhysicsOnDeath boolean
---@field bIsInHoldInteraction boolean
---@field DerpFactor float
---@field TakeoffLaunchVelocity float
---@field CurrentRotation FRotator
---@field bPseudoLargePawn boolean
---@field bDoRecoil boolean
---@field CurrentNavigationPath UNavigationPathWithProgress
---@field SecondaryNavPoint AFlyingNavPoint
---@field WiggleOffset FVector
---@field bShowGoalLocation boolean
---@field BaseSeed int32
---@field bCanUseFlyingNavPoints boolean
AFlySwimSurvivalCharacter = {}

function AFlySwimSurvivalCharacter:OnRep_BaseSeed() end
---@param InTargetRotation FRotator
---@param DeltaTime float
function AFlySwimSurvivalCharacter:InterpolateRotationTo(InTargetRotation, DeltaTime) end


---@class AFlyingNavPoint : ATargetPoint
AFlyingNavPoint = {}


---@class AFlyingSurvivalCharacter : AFlySwimSurvivalCharacter
AFlyingSurvivalCharacter = {}

function AFlyingSurvivalCharacter:FallToFly() end


---@class AFoliageManager : AInfo
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
AFoliageManager = {}



---@class AFrankenlineButton : AFrankenlineControl
AFrankenlineButton = {}

---@param InstigatedBy AActor
function AFrankenlineButton:HandleButtonPressed(InstigatedBy) end


---@class AFrankenlineControl : AActor
---@field FrankenlineMaster AFrankenlineMaster
---@field InteractString FLocString
AFrankenlineControl = {}



---@class AFrankenlineDial : AWalkDial
---@field Axis EFrankenlineAxis
---@field SpeedMultiplier float
---@field FrankenlineMaster AFrankenlineMaster
AFrankenlineDial = {}



---@class AFrankenlineMaster : AActor
---@field ImageStreamingBuffer TArray<uint8>
---@field ObsidianIDComponent UObsidianIDComponent
---@field PersistenceComponent UPersistenceComponent
---@field RenderTarget UTextureRenderTarget2D
---@field BrushSize float
---@field WriteHeadSize float
---@field LineReplicationRate float
---@field WriteHeadColor FLinearColor
---@field BackgroundColor FLinearColor
---@field Colors TArray<FLinearColor>
---@field CurrentColorIndex uint8
---@field CursorPosition FVector2D
---@field RenderTargetDimensions FIntPoint
---@field TriggerBehaviors TArray<FDataTableRowHandle>
---@field TriggerID int32
AFrankenlineMaster = {}

function AFrankenlineMaster:ReplicateDrawLine() end
function AFrankenlineMaster:OnRep_TriggerID() end
---@param To FVector2D
---@param ColorIndex uint8
function AFrankenlineMaster:MulticastDrawLine(To, ColorIndex) end
function AFrankenlineMaster:MulticastCycleColor() end
function AFrankenlineMaster:MulticastClear() end
---@param Motion FVector2D
function AFrankenlineMaster:InputMotion(Motion) end
function AFrankenlineMaster:HandleRenderTargetCreated() end
function AFrankenlineMaster:HandleHitEdge() end
function AFrankenlineMaster:HandleCycleColor() end
function AFrankenlineMaster:HandleClearScreen() end
---@return FLinearColor
function AFrankenlineMaster:GetNextColor() end
---@return FLinearColor
function AFrankenlineMaster:GetCurrentColor() end
function AFrankenlineMaster:FinallyCycleColor() end
function AFrankenlineMaster:FinallyClear() end
---@param InCursorMesh UStaticMeshComponent
function AFrankenlineMaster:CacheCursorMesh(InCursorMesh) end


---@class AGameUI : AHUD
---@field OnGlobalColorChange FGameUIOnGlobalColorChange
---@field OnPlayerStateGuidChanged FGameUIOnPlayerStateGuidChanged
---@field OnShowSubtitlesChanged FGameUIOnShowSubtitlesChanged
---@field OnLanguageChanged FGameUIOnLanguageChanged
AGameUI = {}

---@param NewModelViewerCapture AModelViewerCapture
function AGameUI:SetModelViewerCapture(NewModelViewerCapture) end
---@param Message FString
---@param PlayerState ASurvivalPlayerState
function AGameUI:PostPlayerChatMessage(Message, PlayerState) end
---@param Message FString
---@param MessageTexture UTexture2D
function AGameUI:PostGenericMessage(Message, MessageTexture) end
---@param Message FChatBoxMessage
function AGameUI:PostChatMessage(Message) end
---@param bIsDayTime boolean
function AGameUI:OnDayNightChange(bIsDayTime) end
---@param InControllerIndex int32
---@param InNewUserId int32
---@param inOldUserId int32
function AGameUI:OnControllerPairingChanged(InControllerIndex, InNewUserId, inOldUserId) end
---@param NewPlayerCharacter ASurvivalPlayerCharacter
function AGameUI:NotifyPossessedPlayerChanged(NewPlayerCharacter) end
---@param NewPlayerState ASurvivalPlayerState
function AGameUI:NotifyPlayerStateRegistered(NewPlayerState) end
function AGameUI:NotifyGlobalColorChanged() end
---@return boolean
function AGameUI:GetShowSubtitles() end
---@return AModelViewerCapture
function AGameUI:GetModelViewerCapture() end
---@param WorldContextObject UObject
---@return UHUDWidget
function AGameUI:GetHUDWidget(WorldContextObject) end
---@return UHUDWidget
function AGameUI:GetHUD() end
---@param WorldContextObject UObject
---@return UGlobalHUDWidget
function AGameUI:GetGlobalHUDWidget(WorldContextObject) end
---@return UGlobalHUDWidget
function AGameUI:GetGlobalHUD() end


---@class AGameZoneVolume : AVolume
---@field ZoneData FDataTableRowHandle
AGameZoneVolume = {}



---@class AGardenBuilding : AWidgetBuilding
---@field OnGardenStateChanged FGardenBuildingOnGardenStateChanged
---@field OnGardenItemsChanged FGardenBuildingOnGardenItemsChanged
---@field CatalystTag FGameplayTag
---@field ModifierTag FGameplayTag
---@field CatalystSlots int32
---@field ModifierSlots int32
---@field GardenState EGardenState
---@field CatalystItems TArray<UItem>
---@field ModifierItems TArray<UItem>
---@field CurrentRecipe FDataTableRowHandle_NetCrc
---@field Duration float
---@field CompletionTime float
---@field RareSpawnList TArray<int32>
---@field MinScale float
---@field MaxScale float
---@field InProductionMeshes TArray<UStaticMeshComponent>
---@field ProductionCompleteSound USoundCue
AGardenBuilding = {}

---@param DeltaTime float
function AGardenBuilding:TickProduction(DeltaTime) end
---@param DeltaSeconds float
function AGardenBuilding:ReceiveProductionTick(DeltaSeconds) end
---@param LODActor UBaseLODActor
function AGardenBuilding:OnSpawnedActorDestroyed(LODActor) end
function AGardenBuilding:OnRep_RareSpawnList() end
function AGardenBuilding:OnRep_ProductionState() end
function AGardenBuilding:OnRep_ModifierItems() end
function AGardenBuilding:OnRep_CurrentRecipe() end
function AGardenBuilding:OnRep_CatalystItems() end
---@return float
function AGardenBuilding:GetTimeRemaining() end
---@return TArray<UItem>
function AGardenBuilding:GetModifierItems() end
---@param ModifierType EGardenModifierType
---@return float
function AGardenBuilding:GetGardenModifier(ModifierType) end
---@return EGardenState
function AGardenBuilding:GetCurrentState() end
---@return TArray<UItem>
function AGardenBuilding:GetCatalystItems() end
---@return FGameplayTagContainer
function AGardenBuilding:GetAllItemTags() end
---@return FDataTableRowHandle
function AGardenBuilding:FindRecipeForSelectedCatalyst() end
---@param Item UItem
---@return boolean
function AGardenBuilding:CanAddItem(Item) end
---@return float
function AGardenBuilding:CalculateRareSpawnChance() end
---@return float
function AGardenBuilding:CalculateProductionDuration() end
---@return boolean
function AGardenBuilding:AreModifiersFull() end
---@return boolean
function AGardenBuilding:AreCatalystsFull() end


---@class AHISMActor : AActor
---@field HISMC UInstancedStaticMeshComponent
---@field ClusterHISMs TArray<UInstancedStaticMeshComponent>
---@field Outliers TArray<UStaticMeshComponent>
---@field VertexPaintedAndNegativeScaleInstances TArray<UStaticMeshComponent>
---@field BatchRadius float
---@field CachedDrawDistance float
---@field IsNoLightBakeLevel boolean
AHISMActor = {}



---@class AHarvestNode : APlaceableActor
---@field DisplayName FLocString
---@field NodeData FDataTableRowHandle
---@field LODFullActorMaxDistance float
---@field bAllowFoliageRespawn boolean
---@field bIsCollectible boolean
---@field HealthComponent UHealthComponent
---@field TeamComponent UTeamComponent
---@field ProceduralAnimationComponent UProceduralAnimationComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field LootComponent ULootComponent
---@field LiteData UHarvestNodeLiteData
---@field HarvestNodeTags FGameplayTagContainer
---@field bUseOverrideGameHourLifetime boolean
---@field OverrideGameHourLifetime float
---@field SourceFoliage FFoliageKey
---@field TriggerID int32
---@field bShouldSave boolean
AHarvestNode = {}

---@param Source UObject
---@param Rotation FQuat
function AHarvestNode:SetAdditiveRotationQuat(Source, Rotation) end
---@param Source UObject
---@param Rotation FRotator
function AHarvestNode:SetAdditiveRotation(Source, Rotation) end
function AHarvestNode:OnRep_TriggerID() end
---@param DamageInfo FDamageInfo
function AHarvestNode:OnDeath(DamageInfo) end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function AHarvestNode:OnDamaged(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@param InTag FGameplayTag
---@return boolean
function AHarvestNode:HasTag(InTag) end
---@param InTags FGameplayTagContainer
---@return boolean
function AHarvestNode:HasAnyTag(InTags) end
---@return EPreplacedType
function AHarvestNode:GetPreplacedType() end
---@return FLocString
function AHarvestNode:GetDisplayNameLocString() end


---@class AHaulableItemCluster : AActor
---@field LODFullActorMaxDistance float
---@field InventoryComponent UInventoryComponent
---@field MeshComponent UInstancedStaticMeshComponent
---@field BoxComponent UBoxComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field LiteData UActorLiteData
AHaulableItemCluster = {}

---@param Sender UInventoryComponent
function AHaulableItemCluster:OnInventoryChanged(Sender) end


---@class AHazard : AActor
---@field OnCharacterEnter FHazardOnCharacterEnter
---@field OnCharacterExit FHazardOnCharacterExit
---@field OnHazardEnded FHazardOnHazardEnded
---@field OnHazardEnabled FHazardOnHazardEnabled
---@field OnHazardTargetTick FHazardOnHazardTargetTick
---@field SceneComponent USceneComponent
---@field CollisionComponent UShapeComponent
---@field TickInterval float
---@field Lifetime float
---@field DamageData FDamageData
---@field bTickForDamage boolean
---@field DamageStyle EInflictDamageStyle
---@field bHazardEnded boolean
---@field bHazardEnabled boolean
---@field FailsafeDestroyTime float
---@field bDestroyInWater boolean
---@field StatusEffectApplyType EHazardEffectApplyType
---@field StatusEffects TArray<FDataTableRowHandle>
---@field ScreenEffect UScreenEffectData
---@field ProjectileAttackData FDataTableRowHandle
---@field HazardTags FGameplayTagContainer
---@field ProjectileOwner AActor
---@field ProjectileAttack UAttack
---@field bAlwaysClearEffectsOnExit boolean
AHazard = {}

---@param NewOwner AActor
function AHazard:SetProjectileAttackOwner(NewOwner) end
function AHazard:OnRep_HazardEnding() end
function AHazard:OnRep_HazardEnabled() end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function AHazard:OnEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OldEditMode EEditMode
---@param NewEditMode EEditMode
function AHazard:OnEditModeChanged(OldEditMode, NewEditMode) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function AHazard:OnBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@return boolean
function AHazard:IsHazardExpired() end
function AHazard:HazardExpired() end
---@param InTag FGameplayTag
---@return boolean
function AHazard:HasTag(InTag) end
---@param InTags FGameplayTagContainer
---@return boolean
function AHazard:HasAnyTag(InTags) end
function AHazard:HandleHazardEnding() end
---@return UAttack
function AHazard:GetProjectileAttack() end
---@return boolean
function AHazard:GetHazardEnabled() end
---@param bEnabled boolean
function AHazard:EnableHazard(bEnabled) end
---@param TargetToTest ASurvivalCharacter
---@return boolean
function AHazard:CanApplyToTarget(TargetToTest) end


---@class AHazardBox : AHazard
AHazardBox = {}


---@class AHazardCapsule : AHazard
AHazardCapsule = {}


---@class AHazardSphere : AHazard
AHazardSphere = {}


---@class AHazardVolume : AHazard
---@field Volume AVolume
AHazardVolume = {}

---@param OverlappedActor AActor
---@param OtherActor AActor
function AHazardVolume:OnVolumeEndOverlap(OverlappedActor, OtherActor) end
---@param OverlappedActor AActor
---@param OtherActor AActor
function AHazardVolume:OnVolumeBeginOverlap(OverlappedActor, OtherActor) end


---@class AHazardVolumeBuilding : ABoxVolumeBuilding
AHazardVolumeBuilding = {}


---@class AHeatHazardVolume : AHazardVolume
---@field HazardStartTime float
---@field HazardEndTime float
---@field HotSurfaceTypes TArray<EPhysicalSurface>
---@field HeatEmitters TArray<FHeatEmitter>
AHeatHazardVolume = {}

---@return FDamageData
function AHeatHazardVolume:GetDamageData() end
---@param HazardComponent UHeatHazardComponent
---@return float
function AHeatHazardVolume:EvaluateHeatHazard(HazardComponent) end


---@class AHouseActor : AStaticMeshActor
---@field MaterialGroups TArray<FHouseMaterialSoftGroup>
AHouseActor = {}

function AHouseActor:OnUpdateHouseMaterials() end
---@param Level int32
function AHouseActor:OnNewGamePlusLevelChanged(Level) end
---@return int32
function AHouseActor:GetMaterialGroupIndex() end


---@class AIndirectSpotLight : ASpotLight
---@field NativeTODIntensityMultiplier float
AIndirectSpotLight = {}



---@class AInteriorTrigger : AActor
---@field Box1 UBoxComponent
---@field Box2 UBoxComponent
AInteriorTrigger = {}

---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function AInteriorTrigger:OnTriggerEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function AInteriorTrigger:OnTriggerBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end


---@class AIntroTriggerVolume : ATriggerVolume
AIntroTriggerVolume = {}

---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function AIntroTriggerVolume:OnComponentBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end


---@class AItemChoiceInteraction : AActor
---@field ItemOptions TArray<FItemChoiceOption>
---@field WidgetInteractionComponent UWidgetInteractComponent
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field HealthComponent UHealthComponent
---@field LootComponent ULootComponent
---@field ItemSelectDelayTime float
---@field ItemAlreadySelectedInteractText FLocString
---@field PropSocketName FName
---@field AudioData TSoftObjectPtr<UCharacterAudioData>
---@field LoadedAudioData UCharacterAudioData
---@field DeathDestroyEffect TSoftObjectPtr<UVisualEffect>
---@field PropTemplate TSubclassOf<AActor>
---@field TrackingInterpolationSpeed float
---@field TrackingMaxAngle FRotator
---@field TrackingMinAngle FRotator
---@field bItemSelected boolean
---@field bPlayerTracking boolean
AItemChoiceInteraction = {}

---@param InstigatedBy AActor
---@param ItemDataHandle FDataTableRowHandle
function AItemChoiceInteraction:OnItemSelected(InstigatedBy, ItemDataHandle) end
---@param InstigatedBy AActor
---@param ItemDataHandle FDataTableRowHandle
function AItemChoiceInteraction:MulticastNotifyItemSelected(InstigatedBy, ItemDataHandle) end
---@return boolean
function AItemChoiceInteraction:HasSelectedItem() end
---@param InstigatedBy AActor
---@param ItemDataHandle FDataTableRowHandle
function AItemChoiceInteraction:HandleItemSelectEffects(InstigatedBy, ItemDataHandle) end


---@class AItemDisplayBuilding : AWidgetBuilding
---@field InventoryComponent UInventoryComponent
AItemDisplayBuilding = {}

---@param Item UItem
function AItemDisplayBuilding:MulticastRemoveItem(Item) end
---@param Item UItem
function AItemDisplayBuilding:MulticastDisplayItem(Item) end
---@param Item UItem
---@return boolean
function AItemDisplayBuilding:IsValidItem(Item) end


---@class AItemProcessingBuilding : AWidgetBuilding
---@field OnItemProcessed FItemProcessingBuildingOnItemProcessed
---@field OnProcessingItemsChanged FItemProcessingBuildingOnProcessingItemsChanged
---@field ProcessingType FGameplayTag
---@field MaxSimultaneousItems int32
---@field MaxWorkingItems int32
---@field ProcessingItems TArray<FItemProcessingData>
---@field PreviousProcessingItems TArray<FItemProcessingData>
---@field CookingItemSpawnSockets TArray<FName>
---@field OutputItemSpawnSockets TArray<FName>
---@field SocketComponents TMap<FName, USceneComponent>
---@field UseText FLocString
---@field EmptyText FLocString
---@field FlavorText FLocString
---@field FlavorImage UTexture2D
---@field ProductionCompleteSound USoundCue
AItemProcessingBuilding = {}

---@return boolean
function AItemProcessingBuilding:WillQueueProcessingItems() end
---@param DeltaSeconds float
function AItemProcessingBuilding:TickVisuals(DeltaSeconds) end
---@param DeltaTime float
function AItemProcessingBuilding:TickProcessing(DeltaTime) end
---@param Item UItem
---@param InInstigator AActor
function AItemProcessingBuilding:RemoveItem(Item, InInstigator) end
function AItemProcessingBuilding:OnRep_ProcessingItemsChanged() end
---@param Item UItem
function AItemProcessingBuilding:NotifyWorldItemTake(Item) end
---@param NewProcessingType FGameplayTag
---@param CookingSlot int32
function AItemProcessingBuilding:NotifyProcessingStateChanged(NewProcessingType, CookingSlot) end
---@param NewProcessingType FGameplayTag
---@param CookingSlot int32
function AItemProcessingBuilding:MulticastNotifyProcessingStateChanged(NewProcessingType, CookingSlot) end
---@return boolean
function AItemProcessingBuilding:IsProcessingAnything() end
---@param Index int32
---@return boolean
function AItemProcessingBuilding:IsItemFinished(Index) end
---@return boolean
function AItemProcessingBuilding:IsFull() end
---@param Index int32
---@return FDataTableRowHandle
function AItemProcessingBuilding:GetResultItemType(Index) end
---@return FGameplayTag
function AItemProcessingBuilding:GetProcessingType() end
---@param Index int32
---@return EItemProcessingState
function AItemProcessingBuilding:GetProcessingState(Index) end
---@param Index int32
---@return FName
function AItemProcessingBuilding:GetProcessingSocketForItem(Index) end
---@return TArray<FItemProcessingData>
function AItemProcessingBuilding:GetProcessingItems() end
---@param Index int32
---@return UItem
function AItemProcessingBuilding:GetProcessingItem(Index) end
---@param Index int32
---@return FName
function AItemProcessingBuilding:GetOutputSocketForItem(Index) end
---@param Index int32
---@return float
function AItemProcessingBuilding:GetItemProgress(Index) end
---@return int32
function AItemProcessingBuilding:GetCurrentProcessingItemIndex() end
---@return int32
function AItemProcessingBuilding:GetCurrentItemCount() end
---@param SocketName FName
---@return USceneComponent
function AItemProcessingBuilding:GetComponentForSocket(SocketName) end
---@param Item UItem
---@return boolean
function AItemProcessingBuilding:CanProcessItem(Item) end
---@param Item UItem
---@return boolean
function AItemProcessingBuilding:CanAddItem(Item) end
---@param Item UItem
---@param InInstigator ASurvivalCharacter
---@param SlotToUse int32
function AItemProcessingBuilding:AddItemToProcess(Item, InInstigator, SlotToUse) end


---@class AItemSpawnManager : AActor
---@field ItemSpawnGroups TMap<UItemSpawnGroupData, FItemSpawnGroup>
---@field TrackedGroupSpawns TArray<UTrackedItemSpawnGroup>
---@field ReplicatedSpawnData FTrackedItemSpawnGroupRepDataArray
---@field ObsidianIDComponent UObsidianIDComponent
---@field PersistenceComponent UPersistenceComponent
---@field StartTime float
---@field LastSpawnGroupIndex int32
AItemSpawnManager = {}

function AItemSpawnManager:OnRep_ReplicatedSpawnData() end
---@param PreviousMode EEditMode
---@param CurrentMode EEditMode
function AItemSpawnManager:OnEditModeChanged(PreviousMode, CurrentMode) end
---@param InOwner AActor
---@param Group UItemSpawnGroupData
---@param SpawnGroup FItemSpawnGroup
---@param bEnabled boolean
---@return UTrackedItemSpawnGroup
function AItemSpawnManager:AddSpawnGroupHelper(InOwner, Group, SpawnGroup, bEnabled) end
---@param InOwner AActor
---@param Group UItemSpawnGroupData
---@param Provider TScriptInterface<ISpawnPointProviderInterface>
---@param bEnabled boolean
---@return UTrackedItemSpawnGroup
function AItemSpawnManager:AddSpawnGroup(InOwner, Group, Provider, bEnabled) end


---@class AItemSpawnPoint : AActor
---@field SceneRootComponent USceneComponent
---@field StaticMeshComponent UStaticMeshComponent
---@field BillboardComponent UBillboardComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field ItemSpawnGroupData TSubclassOf<UItemSpawnGroupData>
---@field ItemSpawnData TSubclassOf<UItemSpawnData>
---@field VersionAdded FGameVersion
AItemSpawnPoint = {}



---@class ALODableActor : AActor
---@field LODFullActorMaxDistance float
---@field bAutoRegisterWithLODActorManagerOnBeginPlay boolean
---@field LiteData ULODableActorLiteData
ALODableActor = {}



---@class ALabLightBase : AActor
ALabLightBase = {}


---@class ALabMachineA : ALabMachineBase
---@field MonitorA UStaticMeshComponent
---@field CabinetA UStaticMeshComponent
---@field ConsolePlate UStaticMeshComponent
---@field ConsoleButtons UStaticMeshComponent
---@field Panel UStaticMeshComponent
---@field PanelDoodads UStaticMeshComponent
---@field EmissiveStrip UStaticMeshComponent
---@field Table UStaticMeshComponent
---@field EmissiveStripColor FLinearColor
ALabMachineA = {}



---@class ALabMachineBase : AActor
---@field BaseCabinet UStaticMeshComponent
---@field Group1Cabinet UStaticMeshComponent
---@field Group1Trim UStaticMeshComponent
---@field Group1Doodads UStaticMeshComponent
---@field Group2Cabinet UStaticMeshComponent
---@field Group2Trim UStaticMeshComponent
---@field Group2Doodads UStaticMeshComponent
---@field Group3Cabinet UStaticMeshComponent
---@field Group3Trim UStaticMeshComponent
---@field Group3Doodads UStaticMeshComponent
---@field CabinetDoor UStaticMeshComponent
---@field LabMachineInfo FLabMachineInfoBase
ALabMachineBase = {}

---@return FLabMachineBlueprintableInfo
function ALabMachineBase:GetInfo() end


---@class ALabMachineFullBase : AActor
ALabMachineFullBase = {}

---@param NewActor ALabMachineBase
function ALabMachineFullBase:SetupMeshesOnReplacementActor(NewActor) end
---@param InInfo FLabMachineBlueprintableInfo
function ALabMachineFullBase:SetLabMachineInfo(InInfo) end
---@return FLabMachineBlueprintableInfo
function ALabMachineFullBase:GetLabMachineInfo() end
---@return UStaticMeshComponent
function ALabMachineFullBase:GetEmissiveStrip() end


---@class ALabMonitorBase : AActor
ALabMonitorBase = {}


---@class ALadderBuilding : ABuilding
---@field CombinedSpline UClimbableSplineComponent
---@field InteractRangeCap float
ALadderBuilding = {}

function ALadderBuilding:OnRep_CombinedSpline() end


---@class ALandscapeRTManager : AActor
---@field NativeActorsUsingRT TSet<AActor>
---@field RippleRenderTarget UTextureRenderTarget2D
---@field RippleMPC UMaterialParameterCollection
ALandscapeRTManager = {}

---@return boolean
function ALandscapeRTManager:HasAnyActors() end


---@class ALootBag : APlaceableActor
---@field BuildingData FDataTableRowHandle
---@field LiteData ULootBagLiteData
---@field OwnerPlayerGuid FGuid
---@field OwnerName FString
---@field OverrideName FText
---@field LootBagType ELootBagType
---@field bOnlyAllowPreviousOwnerToLoot boolean
---@field bAutoLootOnInteract boolean
---@field bDestroyWhenEmpty boolean
---@field DisplayName FLocString
---@field InventoryComponent UInventoryComponent
---@field LootComponent ULootComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field WidgetClass TSoftClassPtr<UInteractionWidget>
---@field bUseBuoyancy boolean
---@field bInUse boolean
ALootBag = {}

---@param DeltaTime float
function ALootBag:TickBuoyancy(DeltaTime) end
function ALootBag:ResyncReplicationTransform() end
---@param Actor AActor
function ALootBag:OnInteractingActorDestroyed(Actor) end


---@class AMIXRTerminal : AActor
---@field MIXRTerminalMesh UStaticMeshComponent
---@field Widget UWidgetComponent
---@field MIXRCompletionCount int32
---@field MIXRCompletionProgressConditional FGlobalVariableReferenceConditional
---@field TextureParameterName FName
AMIXRTerminal = {}

function AMIXRTerminal:OnRep_MIXRCompletionCount() end
---@param Count int32
function AMIXRTerminal:OnMIXRCompletionCountChanged(Count) end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param GlobalInstigator AActor
function AMIXRTerminal:OnGlobalVariableChanged(GlobalVariableID, VariableValue, GlobalInstigator) end


---@class AMaineFreeCamPhotoPawn : AFreeCamPhotoPawn
AMaineFreeCamPhotoPawn = {}

---@param Width int32
---@param Height int32
---@param Colors TArray<FColor>
function AMaineFreeCamPhotoPawn:OnPlaygroundsThumbnailTaken(Width, Height, Colors) end


---@class AMaineGameModeBase : AGameModeBase
AMaineGameModeBase = {}


---@class AMaineSpringArmPhotoPawn : ASpringArmPhotoPawn
AMaineSpringArmPhotoPawn = {}

---@param Width int32
---@param Height int32
---@param Colors TArray<FColor>
function AMaineSpringArmPhotoPawn:OnPlaygroundsThumbnailTaken(Width, Height, Colors) end
---@return FSpringArmTraceCustomParams
function AMaineSpringArmPhotoPawn:OnCustomizeTraceQuery() end


---@class AMaineTriggerBase : AActor
---@field OnTriggered FMaineTriggerBaseOnTriggered
---@field MaxTriggerCount int32
---@field bPlayersOnly boolean
---@field TriggerType ETriggerType
---@field GlobalVariableConditionals TArray<FGlobalVariableReferenceConditional>
---@field CollisionComponent UShapeComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field PersistenceComponent UPersistenceComponent
AMaineTriggerBase = {}

function AMaineTriggerBase:ResetTriggerCount() end
---@param OtherActor AActor
function AMaineTriggerBase:ReceiveTrigger(OtherActor) end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param ActorInstigator AActor
function AMaineTriggerBase:OnGlobalVariableChangedEvent(GlobalVariableID, VariableValue, ActorInstigator) end
---@return int32
function AMaineTriggerBase:GetTriggerCount() end


---@class AMaineTriggerBox : AMaineTriggerBase
AMaineTriggerBox = {}


---@class AMaineTriggerSphere : AMaineTriggerBase
AMaineTriggerSphere = {}


---@class AMapStation : AActor
---@field DownloadInteractString FLocString
---@field PuzzlePieceRegion FDataTableRowHandle
---@field bEnabled boolean
---@field CurrentRTIndex int32
---@field RenderTargetCycleTime float
---@field LastRenderTargetChangeTime float
---@field RenderTargets TArray<TSubclassOf<UManagedRenderTargetObject>>
---@field SecurityCameraMaterial UMaterialInterface
---@field SecurityCameraMID UMaterialInstanceDynamic
---@field OnMapStationCameraChanged FMapStationOnMapStationCameraChanged
AMapStation = {}

---@param bInDrawEnabled boolean
function AMapStation:SetCameraDrawEnabled(bInDrawEnabled) end
---@param Pawn APawn
function AMapStation:OnNewPawnPossessed(Pawn) end
---@param InstigatedBy AActor
function AMapStation:OnMapDownloaded(InstigatedBy) end


---@class AMarkerBuilding : AWidgetBuilding
---@field CustomName FString
---@field CustomNameFiltered FString
AMarkerBuilding = {}

---@param MarkerVariant int32
---@param MarkerColor int32
function AMarkerBuilding:UpdateHUDMarkerVisuals(MarkerVariant, MarkerColor) end


---@class AMenuGameMode : AMaineGameModeBase
AMenuGameMode = {}


---@class AModelViewerCapture : AActor
---@field bAutoRotate boolean
---@field bAllowRotationY boolean
---@field StartingRotationX float
---@field StartingRotationY float
AModelViewerCapture = {}

---@param Mesh UStaticMesh
---@param Materials TArray<UMaterialInterface>
---@param Scale float
---@param Offset FVector
function AModelViewerCapture:ViewStaticMesh(Mesh, Materials, Scale, Offset) end
---@param Mesh USkeletalMesh
---@param Materials TArray<UMaterialInterface>
---@param Scale float
---@param Offset FVector
function AModelViewerCapture:ViewSkeletalMesh(Mesh, Materials, Scale, Offset) end
---@param BlueprintClass TSubclassOf<AActor>
---@param Scale float
---@param Offset FVector
function AModelViewerCapture:ViewBlueprint(BlueprintClass, Scale, Offset) end
---@param Mesh USkeletalMesh
---@param Materials TArray<UMaterialInterface>
---@param Scale float
---@param Offset FVector
---@param Slot EEquipmentSlot
---@param bUsePet boolean
function AModelViewerCapture:ViewArmorMesh(Mesh, Materials, Scale, Offset, Slot, bUsePet) end
---@param Texture UTexture
function AModelViewerCapture:View2DTexture(Texture) end
---@param bShow boolean
function AModelViewerCapture:SetShowSkyLight(bShow) end
---@param bShow boolean
function AModelViewerCapture:SetShowOverheadSpot(bShow) end
---@param RenderTarget UTextureRenderTarget2D
---@param Width int32
---@param Height int32
function AModelViewerCapture:SetRenderTargetDesiredSize(RenderTarget, Width, Height) end
---@param DataRow FDataTableRowHandle
function AModelViewerCapture:SetInspectionUnknownRowHandleType(DataRow) end
---@param Mesh UStaticMesh
---@param OverrideMaterials TArray<UMaterialInterface>
---@param RotationX float
---@param RotationY float
---@param Offset FVector
function AModelViewerCapture:SetInspectionStaticMesh(Mesh, OverrideMaterials, RotationX, RotationY, Offset) end
---@param ItemDataHandle FDataTableRowHandle
function AModelViewerCapture:SetInspectionItemData(ItemDataHandle) end
---@param DataRow FDataTableRowHandle
function AModelViewerCapture:SetInspectionHarvestNodeData(DataRow) end
---@param DataRow FDataTableRowHandle
function AModelViewerCapture:SetInspectionBuildingData(DataRow) end
---@param TargetActor AActor
function AModelViewerCapture:RemoveActorFromCulling(TargetActor) end
function AModelViewerCapture:ReleaseRenderTextureTargets() end
---@param CallingObjectClass UObject
function AModelViewerCapture:ReleaseModelViewerCapture(CallingObjectClass) end
---@param bInAutoRotate boolean
---@param bInAllowRotationY boolean
---@param InStartingRotationX float
---@param InStartingRotationY float
function AModelViewerCapture:InitializeRotation(bInAutoRotate, bInAllowRotationY, InStartingRotationX, InStartingRotationY) end
function AModelViewerCapture:CreateRenderTextureTargets() end
function AModelViewerCapture:Cleanup() end
---@param CallingObjectClass UObject
function AModelViewerCapture:AcquireModelViewerCapture(CallingObjectClass) end


---@class ANewGameVisualsActor : AActor
---@field NewGameVisuals UNewGameVisualsComponent
ANewGameVisualsActor = {}



---@class ANonPlayerInteraction : AActor
---@field OnImmediateRepeat FNonPlayerInteractionOnImmediateRepeat
---@field SceneRootComponent USceneComponent
---@field WaypointComponent UBillboardComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field PersistenceComponent UPersistenceComponent
---@field ShowTalkIconConditionalToggle UConditionalToggleComponent
---@field BarkConditionalToggle UConditionalToggleComponent
---@field bUnlimitedRange boolean
---@field EligibleRange float
---@field CharacterTags FGameplayTagContainer
---@field AttractConversation FConversationReference
---@field AttractStartNode int32
---@field AttractRepeatConversation FConversationReference
---@field AttractRepeatStartNode int32
---@field AttractRepeatInterval float
---@field InteractConversation FConversationReference
---@field InteractStartNode int32
---@field bDisableInteractBeforeAttract boolean
ANonPlayerInteraction = {}

function ANonPlayerInteraction:TriggerImmediateRepeat() end
---@param Interactor AActor
---@param Character AActor
function ANonPlayerInteraction:PlayInteractConversation(Interactor, Character) end
---@param Character AActor
function ANonPlayerInteraction:PlayAttractRepeatConversation(Character) end
---@param Character AActor
function ANonPlayerInteraction:PlayAttractConversation(Character) end
---@param Interactor AActor
---@param Character AActor
---@return boolean
function ANonPlayerInteraction:IsInteractConversationEnabled(Interactor, Character) end
---@param ConversationId FGuid
---@param DisplayStyle EConversationNodeDisplayStyle
function ANonPlayerInteraction:HandleConversationComplete(ConversationId, DisplayStyle) end
---@param Character ASurvivalCharacter
---@return boolean
function ANonPlayerInteraction:CharacterCanInteract(Character) end


---@class ANonStructuralReplicationProxy : ABuildingGridReplicationProxy
ANonStructuralReplicationProxy = {}


---@class ANotificationBuilding : AWidgetBuilding
---@field CustomMessage FString
---@field CustomMessageFiltered FString
ANotificationBuilding = {}

---@param NewMessage FString
function ANotificationBuilding:SetNotificationMessage(NewMessage) end
function ANotificationBuilding:MulticastPostNotiicationMessage() end
---@return FString
function ANotificationBuilding:GetNotificationMessage() end


---@class AParticleAttachmentBlockingVolume : AVolume
---@field Tag FName
---@field InnerBlockingVolume USphereComponent
---@field OuterBlockingVolume USphereComponent
---@field KillVolume UBoxComponent
---@field Type EParticleBlockingVolumeType
AParticleAttachmentBlockingVolume = {}



---@class AParticleAttachmentVolume : AActor
---@field NiagaraParticleSystem UNiagaraComponent
---@field MaterialParameterCollection UMaterialParameterCollection
---@field ParticleSystemActiveMPCName FName
---@field EmitterLocationMPCName FName
---@field ExtinctionVolumeLerpMPCName FName
---@field SurfaceDistanceLerpMPCName FName
---@field ForwardOffsetMPCName FName
---@field EnabledPhysMatMPCName FName
---@field OffsetFromActorForward float
---@field DistanceToSurfaceLerp float
---@field LerpWhenInside boolean
---@field UseXYDistance boolean
---@field AlignParticleSystemWithPlayer boolean
---@field LimitToSurfaceMaterial boolean
---@field EnabledPhysMatSurfaceTypes TArray<EPhysicalSurface>
---@field ParticleVolume UBoxComponent
---@field BlockersTag FName
---@field Blockers TArray<AActor>
AParticleAttachmentVolume = {}

function AParticleAttachmentVolume:OnBeginPlay() end
---@return boolean
function AParticleAttachmentVolume:IsVolumeReachableByPhotoMode() end
---@return boolean
function AParticleAttachmentVolume:IsNiagaraActivationAllowed() end
---@return boolean
function AParticleAttachmentVolume:IsLocalPlayerInVolume() end


---@class APetHomeBuilding : AWidgetBuilding
---@field OnStoredPetChanged FPetHomeBuildingOnStoredPetChanged
---@field StoredPet TWeakObjectPtr<UCreatureLODActor>
---@field StoredPetFull ASurvivalCreature
APetHomeBuilding = {}

function APetHomeBuilding:OnRep_StoredPetFull() end
---@param LODActor UBaseLODActor
function APetHomeBuilding:HandleStoredPetLODActorConvertedToProxyActor(LODActor) end
---@param LODActor UBaseLODActor
function APetHomeBuilding:HandleStoredPetLODActorConvertedToFullActor(LODActor) end
---@return UTamedCreatureData
function APetHomeBuilding:GetStoredTameData() end
---@return ASurvivalCreature
function APetHomeBuilding:GetStoredPetFull() end
---@return UCreatureLODActor
function APetHomeBuilding:GetStoredPet() end


---@class APheromoneBroadcasterBuilding : AWidgetBuilding
---@field InfluenceRange float
---@field PheromoneCapacity float
---@field ConsumptionRate float
---@field PowerReservoir FPowerReservoir
APheromoneBroadcasterBuilding = {}

function APheromoneBroadcasterBuilding:TurnOff() end
---@param DeltaTime float
function APheromoneBroadcasterBuilding:TickConsume(DeltaTime) end
---@param bState boolean
function APheromoneBroadcasterBuilding:SetGatheringEnabled(bState) end
---@param bState boolean
function APheromoneBroadcasterBuilding:SetBuildingEnabled(bState) end
---@param Item UItem
---@return boolean
function APheromoneBroadcasterBuilding:IsAcceptablePowerItem(Item) end
---@param Sender UBuildingManagerComponent
---@param Building ABuilding
function APheromoneBroadcasterBuilding:HandleBuildingUnderConstruction(Sender, Building) end
---@param Sender UBuildingManagerComponent
---@param Building ABuilding
function APheromoneBroadcasterBuilding:HandleBuildingNotUnderConstruction(Sender, Building) end
---@return boolean
function APheromoneBroadcasterBuilding:GetGatheringEnabled() end
---@return boolean
function APheromoneBroadcasterBuilding:GetBuildingEnabled() end
---@return boolean
function APheromoneBroadcasterBuilding:CanStart() end


---@class APivotCamera : AActor
---@field TargetLocation FVector
---@field OscillationRangeDegrees float
---@field OscillationSpeed float
---@field Camera UCameraComponent
---@field SpringArm USpringArmComponent
APivotCamera = {}

---@return FTransform
function APivotCamera:GetCameraViewTransform() end


---@class APlaceableActor : AActor
---@field MinNewGamePlus int32
---@field MaxNewGamePlus int32
---@field PlacementRotation FRotator
---@field PreplacedType EPreplacedType
APlaceableActor = {}



---@class APlaceableStaticMeshActor : AStaticMeshActor
---@field MeshData FDataTableRowHandle
---@field PlacementRotation FRotator
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field bIsInPlacement boolean
---@field CustomProperties UCustomPropertyComponent
APlaceableStaticMeshActor = {}

function APlaceableStaticMeshActor:OnRep_MeshData() end
function APlaceableStaticMeshActor:OnRep_IsInPlacement() end


---@class APlacementRotationHandles : AActor
APlacementRotationHandles = {}

---@param Axis FVector
function APlacementRotationHandles:SetDistanceAxis(Axis) end
---@param Sender UBuildingPlacementComponent
---@param Axis EPlacementAxis
function APlacementRotationHandles:SetActiveAxis(Sender, Axis) end


---@class APlayerStartFallback : ANavigationObjectBase
APlayerStartFallback = {}


---@class APowerGeneratorBuilding : ABuilding
---@field PowerReservoir FPowerReservoir
---@field MaxPowerCapacity int32
---@field PowerType FGameplayTag
---@field HoursPerTick int32
---@field ItemChargeText FLocString
---@field UseText FLocString
APowerGeneratorBuilding = {}

---@param DeltaTime float
function APowerGeneratorBuilding:TickUpdatePower(DeltaTime) end


---@class APowerStorageBuilding : ABuilding
---@field OnPowerStoredChangedDelegate FPowerStorageBuildingOnPowerStoredChangedDelegate
---@field PowerReservoir FPowerReservoir
---@field bInfinite boolean
---@field PowerCapacity float
---@field PowerType FGameplayTag
---@field ItemDepostAnimType EInteractAnimType
---@field ItemChargeAnimType EInteractAnimType
---@field ManualInteractAnimType EInteractAnimType
---@field ManualActionString FLocString
---@field DepositActionString FLocString
---@field WithdrawActionString FLocString
APowerStorageBuilding = {}

function APowerStorageBuilding:OnWithdrawSucceeded() end
function APowerStorageBuilding:OnWithdrawFailed() end
---@param OldValue FPowerReservoir
function APowerStorageBuilding:OnRep_PowerReservoir(OldValue) end
function APowerStorageBuilding:OnMixError() end
function APowerStorageBuilding:OnErrorWithdrawFromEmpty() end
function APowerStorageBuilding:OnErrorDepositToFull() end
function APowerStorageBuilding:OnErrorDepositFromEmpty() end
function APowerStorageBuilding:OnDepositSucceeded() end
---@return boolean
function APowerStorageBuilding:IsPowerFull() end
---@return boolean
function APowerStorageBuilding:IsPowerEmpty() end
---@param InstigatedBy AActor
function APowerStorageBuilding:InteractManualDrink(InstigatedBy) end
---@return FPowerReservoir
function APowerStorageBuilding:GetPowerReservoir() end
---@return float
function APowerStorageBuilding:GetCurrentPower() end
---@param PreviousPowerType FGameplayTag
---@return boolean
function APowerStorageBuilding:ConsumeUnit(PreviousPowerType) end
---@param PowerType FGameplayTag
---@param Charges int32
---@return boolean
function APowerStorageBuilding:AddCharges(PowerType, Charges) end


---@class APressurePlateBuilding : ABuilding
---@field PressurePlateCollision UBoxComponent
---@field ActivatedSoundCue USoundCue
---@field DeactivatedSoundCue USoundCue
---@field CurrentOverlaps TArray<AActor>
---@field BaseRequiredMassKg float
---@field PreviousMass float
---@field PhotoModeActive boolean
APressurePlateBuilding = {}

function APressurePlateBuilding:OnPressurePlateDeactivated() end
function APressurePlateBuilding:OnPressurePlateActivated() end
---@param PlayerController APlayerController
function APressurePlateBuilding:OnPhotoModePreEntered(PlayerController) end
function APressurePlateBuilding:OnPhotoModeExited() end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function APressurePlateBuilding:OnCollisionComponentEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function APressurePlateBuilding:OnCollisionComponentBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end


---@class AProductionBuilding : ACraftingBuilding
---@field OnProductionItemsChanged FProductionBuildingOnProductionItemsChanged
---@field MaxIngredients int32
---@field bCanProduceNonRecipeItems boolean
---@field DefaultItemResult FDataTableRowHandle
---@field DefaultModItemResults TArray<FRecipeMod>
---@field RecipeModTag FGameplayTag
---@field bRequiresModItem boolean
---@field ProductionTime float
---@field MaxProductionItems int32
---@field MaxSimulateousItems int32
---@field FlavorText FLocString
---@field IngredientFlavorText FLocString
---@field ModifierFlavorText FLocString
---@field QueueText FLocString
---@field FlavorImage UTexture2D
---@field ProductionCompleteSound USoundCue
---@field ProductionItems TArray<FRecipeProductionItem>
---@field InventoryComponent UInventoryComponent
---@field MaterialBillboardComponent UMaterialBillboardComponent
---@field TriggerProductionRecipe FDataTableRowHandle_NetCrc
---@field TriggerProductionModRecipe FDataTableRowHandle_NetCrc
AProductionBuilding = {}

---@param DeltaSeconds float
function AProductionBuilding:TickVisuals(DeltaSeconds) end
---@param DeltaTime float
function AProductionBuilding:TickProduction(DeltaTime) end
---@param InRecipe FDataTableRowHandle
function AProductionBuilding:SetTriggerProductionRecipe(InRecipe) end
---@param InRecipe FDataTableRowHandle
function AProductionBuilding:SetTriggerProductionModRecipe(InRecipe) end
---@param DeltaSeconds float
function AProductionBuilding:ReceiveProcductionTick(DeltaSeconds) end
---@return boolean
function AProductionBuilding:ProductionCapacityIsFull() end
function AProductionBuilding:OnRep_ProductionItemsChanged() end
function AProductionBuilding:OnAnyItemsFinishedChanged() end
function AProductionBuilding:NotifyProductionItemStarted() end
function AProductionBuilding:MulticastNotifyProductionItemStarted() end
---@param Item UItem
---@return boolean
function AProductionBuilding:IsItemFinished(Item) end
---@return boolean
function AProductionBuilding:IsInstantProducer() end
---@return boolean
function AProductionBuilding:HasItemsInProduction() end
---@return boolean
function AProductionBuilding:HasAnyFinishedItem() end
---@return UItem
function AProductionBuilding:GetRecipeModItem() end
---@return TArray<UItem>
function AProductionBuilding:GetRecipeItems() end
---@return float
function AProductionBuilding:GetProductionTime() end
---@return TArray<FRecipeProductionItem>
function AProductionBuilding:GetProductionItems() end
---@param Item UItem
---@return float
function AProductionBuilding:GetItemProgress(Item) end
---@return FDataTableRowHandle
function AProductionBuilding:GetDefaultItemResult() end
---@return FDataTableRowHandle
function AProductionBuilding:FindBestRecipe() end
---@return boolean
function AProductionBuilding:CanDropProducitonItems() end
---@return boolean
function AProductionBuilding:CanCraft() end
---@param Item UItem
---@return boolean
function AProductionBuilding:CanAddItem(Item) end
---@return boolean
function AProductionBuilding:AreIngredientsFull() end


---@class AProjectile : AActor
---@field ProjectileMovementComponent UProjectileMovementComponent
---@field CollisionComponent USphereComponent
---@field ParticleTrailComponent UParticleSystemComponent
---@field bDestroyOnImpact boolean
---@field ItemRowHandle FDataTableRowHandle
---@field bHasAttackTimer boolean
---@field bIsProjectileHidden boolean
AProjectile = {}

---@param ImpactResult FHitResult
function AProjectile:OnStop(ImpactResult) end
function AProjectile:OnRep_IsProjectileHidden() end
---@param ParticleSystemComponent UParticleSystemComponent
function AProjectile:OnParticleSystemFinished(ParticleSystemComponent) end
---@param HitComp UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param NormalImpulse FVector
---@param Hit FHitResult
function AProjectile:OnHit(HitComp, OtherActor, OtherComp, NormalImpulse, Hit) end
---@param bForceDestroy boolean
function AProjectile:DestroyProjectile(bForceDestroy) end


---@class APropertyTriggerBuilding : ABuilding
---@field CustomPropertyDataRowHandle FDataTableRowHandle_NetCrc
---@field CapturedResetValues TArray<FCustomizedValue>
APropertyTriggerBuilding = {}

function APropertyTriggerBuilding:OnRep_CustomPropertyDataRowHandle() end


---@class AProxyCharacterStandInActor : AProxyStandInActor
---@field WiggleData FFlySwimCharacterWiggle
---@field EnabledForWaves boolean
AProxyCharacterStandInActor = {}

function AProxyCharacterStandInActor:OnRep_EnabledForWaves() end


---@class AProxyStandInActor : AActor
---@field LODOwner UBaseLODActor
---@field MeshComponent UStaticMeshComponent
AProxyStandInActor = {}



---@class ARecycleBuilding : AWidgetBuilding
---@field InventoryComponent UInventoryComponent
ARecycleBuilding = {}

---@param RestDuration float
function ARecycleBuilding:OnRest(RestDuration) end
---@return FTransform
function ARecycleBuilding:GetScienceSpawnTransform() end
---@return int32
function ARecycleBuilding:GetScienceReward() end


---@class ARemoteInteractionActor : AActor
---@field HoldToUse boolean
---@field InteractedByList TArray<FGuid>
---@field ItemsToGrantOnUse TArray<FDataTableRowHandle>
---@field OverrideInteractAnim UAnimMontage
ARemoteInteractionActor = {}

---@param InstigatedBy AActor
function ARemoteInteractionActor:Use(InstigatedBy) end
function ARemoteInteractionActor:OnRep_InteractedByList() end
---@param bIsRemoteInteracted boolean
function ARemoteInteractionActor:HandleRemoteInteractionState(bIsRemoteInteracted) end
---@param InstigatedBy AActor
---@return FText
function ARemoteInteractionActor:GetUseText(InstigatedBy) end
---@param InstigatedBy AActor
---@return EInteractionType
function ARemoteInteractionActor:GetUseInteractionType(InstigatedBy) end
---@param InstigatedBy AActor
---@return boolean
function ARemoteInteractionActor:CanUse(InstigatedBy) end


---@class AResourceAnalyzerBuilding : AWidgetBuilding
---@field OnChargesChanged FResourceAnalyzerBuildingOnChargesChanged
---@field PowerReservoir FPowerReservoir
---@field MaxPowerCapacity int32
---@field InitialCharges int32
---@field PowerType FGameplayTag
---@field HoursPerCharge int32
---@field LastUpdateTime float
---@field AnalyzeAnim UAnimMontage
---@field SkelMesh USkeletalMeshComponent
AResourceAnalyzerBuilding = {}

function AResourceAnalyzerBuilding:OnRep_PowerReservoir() end
---@param AnimMontage UAnimMontage
function AResourceAnalyzerBuilding:MulticastPlayAnimMontage(AnimMontage) end
---@return boolean
function AResourceAnalyzerBuilding:IsFullyCharged() end
---@return boolean
function AResourceAnalyzerBuilding:IsCharging() end
---@return boolean
function AResourceAnalyzerBuilding:HasCharges() end
---@return float
function AResourceAnalyzerBuilding:GetNextChargeTime() end
---@return int32
function AResourceAnalyzerBuilding:GetChargeCount() end
---@return int32
function AResourceAnalyzerBuilding:GetChargeCapacity() end


---@class AResourceScannerBuilding : AWidgetBuilding
AResourceScannerBuilding = {}

---@param Sender UWidgetInteractComponent
---@param InteractingActor AActor
function AResourceScannerBuilding:HandleSingleUseInteractingActorChanged(Sender, InteractingActor) end


---@class ARespawnableInstancedMeshGroup : AActor
---@field ItemSpawnGroupData TSubclassOf<UItemSpawnGroupData>
---@field PlacementType ERespawnableMeshPlacementType
---@field SocketTag FString
---@field InstancedMeshComponent UHierarchicalInstancedStaticMeshComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field PersistenceComponent UPersistenceComponent
---@field InstanceData TArray<FRespawnableInstancedMeshData>
---@field DespawnRandomDelay float
---@field TrackedGroup UTrackedItemSpawnGroup
ARespawnableInstancedMeshGroup = {}

---@param Sender AActor
---@param Damage float
---@param DamageEvent FDamageEvent
---@param DamageInfo FDamageInfo
function ARespawnableInstancedMeshGroup:OnFoliageDamaged(Sender, Damage, DamageEvent, DamageInfo) end
function ARespawnableInstancedMeshGroup:BuildInstances() end


---@class ARestingSpotBuilding : AWidgetBuilding
---@field RestStatusEffects TArray<FDataTableRowHandle>
ARestingSpotBuilding = {}



---@class AScanSwitch : APlaceableActor
---@field DisplayName FLocString
---@field InteractionText FLocString
---@field LockedText FLocString
---@field ScanTime float
---@field InteractLocationSocket FName
---@field InteractLocationZOffset float
---@field InteractUnderwater boolean
---@field InteractCancelDistance float
---@field InteractAnimType EInteractAnimType
---@field bAdjustCamera boolean
---@field PlaceableMeshData FDataTableRowHandle
---@field TriggerOutputEvents TArray<FDataTableRowHandle>
---@field TriggerID int32
---@field bScanned boolean
---@field CurrentUser TWeakObjectPtr<AActor>
---@field OCLComponent UOCLComponent
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field WidgetInteractComponent UWidgetInteractComponent
AScanSwitch = {}

---@param bInteractSuccess boolean
function AScanSwitch:OnStopScan(bInteractSuccess) end
function AScanSwitch:OnStartScan() end
function AScanSwitch:OnRep_TriggerID() end
function AScanSwitch:OnRep_CurrentUser() end
---@param bInteractSuccess boolean
function AScanSwitch:MulticastStopScan(bInteractSuccess) end
function AScanSwitch:MulticastStartScan() end
---@return UPrimitiveComponent
function AScanSwitch:GetUseVolume() end


---@class AScienceCollectable : APlaceableActor
---@field OnCollected FScienceCollectableOnCollected
---@field CachedCustomProperties UCustomPropertyComponent
---@field DisplayName FLocString
---@field ScienceAmount int32
---@field LODFullActorMaxDistance float
---@field LiteData UScienceCollectableLiteData
---@field SceneRootComponent USceneComponent
---@field SphereComponent USphereComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field PlaceableMeshData FDataTableRowHandle
---@field TriggerOutputEvents TArray<FDataTableRowHandle>
---@field TriggerBehaviors TArray<FDataTableRowHandle>
---@field TriggerID int32
---@field CustomProperties UCustomPropertyComponent
AScienceCollectable = {}

---@param Amount int32
function AScienceCollectable:SetScienceAmount(Amount) end
function AScienceCollectable:OnRep_TriggerID() end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function AScienceCollectable:OnOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param OldMode EEditMode
---@param NewMode EEditMode
function AScienceCollectable:OnEditModeChanged(OldMode, NewMode) end
---@return int32
function AScienceCollectable:GetScienceAmount() end


---@class ASecurityCamera : AActor
ASecurityCamera = {}


---@class ASecurityMonitor : AActor
---@field RenderTargetInfo TSubclassOf<UManagedRenderTargetObject>
ASecurityMonitor = {}



---@class ASignBuilding : AWidgetBuilding
---@field SignTag FGameplayTag
---@field SelectedSignDataHandle FDataTableRowHandle_NetCrc
---@field MeshName FName
---@field MaterialIndex int32
ASignBuilding = {}

function ASignBuilding:OnRep_CurrentSignDataHandle() end
---@return TArray<FDataTableRowHandle>
function ASignBuilding:GetValidSignData() end
---@return FDataTableRowHandle
function ASignBuilding:GetSelectedSignData() end


---@class ASimplePhysicsBase : APlaceableActor
---@field PlaceableActorRowHandle FDataTableRowHandle
---@field LODFullActorMaxDistance float
---@field LiteData USimplePhysicsBaseLiteData
---@field PreviousVelocity FVector
---@field ImpactTimer float
ASimplePhysicsBase = {}



---@class ASimpleSpeaker : AActor
---@field SpeakerInfo FSpeakerInfo
---@field CharacterName FLocString
ASimpleSpeaker = {}

---@return FSpeakerReference
function ASimpleSpeaker:GetSpeaker() end
---@return FLocString
function ASimpleSpeaker:GetCharacterName() end


---@class ASpawnAssociatedActor : AActor
---@field OnEnableChanged FSpawnAssociatedActorOnEnableChanged
---@field bIsEnabled boolean
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
ASpawnAssociatedActor = {}

function ASpawnAssociatedActor:OnRep_IsEnabled() end
---@param LODActor UBaseLODActor
function ASpawnAssociatedActor:OnRegisteredActorDestroyed(LODActor) end
---@return boolean
function ASpawnAssociatedActor:IsEnabled() end


---@class ASpawnedEffectActor : AActor
---@field StatusEffects TArray<FDataTableRowHandle>
ASpawnedEffectActor = {}

---@param OldMode EEditMode
---@param NewMode EEditMode
function ASpawnedEffectActor:OnEditModeChanged(OldMode, NewMode) end
---@param DamageInfo FDamageInfo
function ASpawnedEffectActor:OnDeath(DamageInfo) end


---@class ASpawnedItem : APlaceableActor
---@field LODFullActorMaxDistance float
---@field PlacedItemData FDataTableRowHandle
---@field ItemVariant FDataTableRowHandle
---@field OnSpawnedItemInteract FSpawnedItemOnSpawnedItemInteract
---@field OnSpawnedItemDestroyed FSpawnedItemOnSpawnedItemDestroyed
---@field OverrideGameHourLifetime float
---@field bUseOverrideGameHourLifetime boolean
---@field bLifetimeDespawnWhenProxiedOnly boolean
---@field LiteData USpawnedItemLiteData
---@field GoapRegionTag FGameplayTag
---@field OnWeaponTrailActive FSpawnedItemOnWeaponTrailActive
---@field ObsidianIDComponent UObsidianIDComponent
---@field Item UItem
---@field EquippedOwner ASurvivalCharacter
---@field AttackOwner AActor
---@field DroppedByActor TWeakObjectPtr<UBaseLODActor>
---@field bWasThrown boolean
---@field bIsThrown boolean
---@field bHasImpacted boolean
---@field bCanAiInteract boolean
---@field CanLODItem boolean
---@field bInteractOnTouch boolean
---@field bDisableCollisionOnSleep boolean
---@field bSleepPhysicsDuringWaves boolean
---@field bIgnorePawnCollision boolean
---@field EmbedOnHit ESpawnedItemEmbedType
---@field EmbedRotationOnHit FFloatRange
---@field MinimumEmbedNormal float
---@field bRotateOnEmbed boolean
---@field bThrowStraight boolean
---@field bIsTickingAttack boolean
---@field bThrowAttackCleared boolean
---@field bRootComponentAsleep boolean
---@field bIsAttached boolean
---@field PreviousVelocity FVector
---@field ZiplineMaxSpeedMultiplier float
---@field ImpactEffects USurfaceEffectData
---@field bOverrideImpactSettings boolean
---@field OverrideImpactEffectDelay float
---@field OverrideMinImpactThreshold float
---@field OverrideMaxImpactThreshold float
---@field OverrideMinImpactVolume float
---@field OverrideMaxImpactVolume float
---@field bUpdateTickRateWhenNotRendered boolean
---@field bProcessingItem boolean
---@field AttachedZipline AZiplineLine
---@field TriggerID int32
ASpawnedItem = {}

---@return boolean
function ASpawnedItem:WasThrown() end
---@param ValidationErrors TArray<FText>
---@return boolean
function ASpawnedItem:ValidateItemData(ValidationErrors) end
---@param DeltaTime float
function ASpawnedItem:TickZipline(DeltaTime) end
---@param DeltaTime float
function ASpawnedItem:TickThrow(DeltaTime) end
---@param DeltaTime float
function ASpawnedItem:TickPhysicsAndReplication(DeltaTime) end
---@param DeltaTime float
function ASpawnedItem:TickBuoyancy(DeltaTime) end
---@param DeltaTime float
function ASpawnedItem:TickAttached(DeltaTime) end
---@param Thrower APawn
---@param Impulse FVector
---@param AngularImpulse FVector
function ASpawnedItem:Throw(Thrower, Impulse, AngularImpulse) end
---@param Thrower AActor
function ASpawnedItem:StartThrownAttack(Thrower) end
---@param NewOwner ASurvivalCharacter
function ASpawnedItem:SetEquippedOwner(NewOwner) end
---@param MeshComponent UStaticMeshComponent
function ASpawnedItem:SetDynamicMeshAsync(MeshComponent) end
---@param InItem UItem
---@param Count int32
---@return int32
function ASpawnedItem:RemoveItem(InItem, Count) end
function ASpawnedItem:OnWeaponTrailDeactivate() end
function ASpawnedItem:OnWeaponTrailActivate() end
---@param Reason EWaveCompletionReason
function ASpawnedItem:OnWaveComplete(Reason) end
function ASpawnedItem:OnThrown() end
---@param SelectedAmmoType FName
function ASpawnedItem:OnSelectedAmmoChanged(SelectedAmmoType) end
function ASpawnedItem:OnRep_TriggerID() end
function ASpawnedItem:OnRep_RootComponentAsleep() end
function ASpawnedItem:OnRep_IsAttached() end
function ASpawnedItem:OnRep_AttachedZipline() end
---@param SleepingComponent UPrimitiveComponent
---@param BoneName FName
function ASpawnedItem:OnPhysicsWake(SleepingComponent, BoneName) end
---@param SleepingComponent UPrimitiveComponent
---@param BoneName FName
function ASpawnedItem:OnPhysicsSleep(SleepingComponent, BoneName) end
---@param Attack UAttack
function ASpawnedItem:OnLaunchAttack(Attack) end
---@param Character ASurvivalCharacter
---@param Slot EEquipmentSlot
function ASpawnedItem:OnItemUnequipped(Character, Slot) end
---@param Character ASurvivalCharacter
---@param Slot EEquipmentSlot
function ASpawnedItem:OnItemEquipped(Character, Slot) end
---@param DamageInfo FDamageInfo
function ASpawnedItem:OnHitWithAttack(DamageInfo) end
---@param Success boolean
function ASpawnedItem:OnDefenseComplete(Success) end
---@param AttackDataRowHandle FDataTableRowHandle
function ASpawnedItem:OnActivateAttackEffects(AttackDataRowHandle) end
---@param FromKey FFoliageKey
---@param bFromDamage boolean
function ASpawnedItem:NotifySwapped(FromKey, bFromDamage) end
function ASpawnedItem:NotifySpawned() end
---@param DeltaTime float
---@param Mesh UStaticMeshComponent
---@param SmokeParticles UParticleSystemComponent
---@param FuseMat UMaterialInstanceDynamic
---@param FuseAudio UAudioComponent
function ASpawnedItem:NativeTickBomb(DeltaTime, Mesh, SmokeParticles, FuseMat, FuseAudio) end
function ASpawnedItem:K2_Initialize() end
---@return boolean
function ASpawnedItem:IsThrownAttackTimerActive() end
---@return boolean
function ASpawnedItem:IsHaulingItem() end
---@param Material UPhysicalMaterial
---@return boolean
function ASpawnedItem:IsEmbeddableMaterial(Material) end
---@param Actor AActor
function ASpawnedItem:HandleTouch(Actor) end
function ASpawnedItem:HandleThrowAttackTimerExpired() end
---@param Volume APhysicsVolume
function ASpawnedItem:HandlePhysicsVolumeChanged(Volume) end
---@return boolean
function ASpawnedItem:GetThrowStraight() end
---@return EPreplacedType
function ASpawnedItem:GetPreplacedType() end
---@return USoundCue
function ASpawnedItem:GetPickupAudio() end
---@return TArray<UItem>
function ASpawnedItem:GetItems() end
---@return UItem
function ASpawnedItem:GetItem() end
---@return ASurvivalPlayerState
function ASpawnedItem:GetHUDMarkerRestrictedToPlayer() end
---@return ASurvivalCharacter
function ASpawnedItem:GetEquippedOwner() end
---@return USoundCue
function ASpawnedItem:GetEquipAudio() end
---@return ASurvivalCharacter
function ASpawnedItem:GetDroppedBySpawnedActor() end
---@return UBaseLODActor
function ASpawnedItem:GetDroppedBy() end
---@return float
function ASpawnedItem:GetDistanceFromThrownLocation() end
---@return USoundCue
function ASpawnedItem:GetConsumeAudio() end
---@return AActor
function ASpawnedItem:GetAttackOwner() end
function ASpawnedItem:DoDetach() end
function ASpawnedItem:DelayedDestroy() end
function ASpawnedItem:ClearThrownAttackTimer() end
---@param InstigatedBy AActor
---@return boolean
function ASpawnedItem:CanUse(InstigatedBy) end
---@param Actor AActor
---@return boolean
function ASpawnedItem:CanEquipTo(Actor) end
---@return boolean
function ASpawnedItem:CanEquip() end
---@param InItems TArray<UItem>
---@return boolean
function ASpawnedItem:CanAddItems(InItems) end
---@param ItemRowHandles TArray<FDataTableRowHandle>
---@return boolean
function ASpawnedItem:CanAddItemRowHandles(ItemRowHandles) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function ASpawnedItem:CanAddItemRowHandle(ItemRowHandle) end
---@param InItem UItem
---@return boolean
function ASpawnedItem:CanAddItem(InItem) end
---@param GameInstance USurvivalGameInstance
---@param InOwner UObject
---@return TArray<UGoapAction>
function ASpawnedItem:AllocateGOAPActions(GameInstance, InOwner) end
---@param InItem UItem
---@param bIsNewItem boolean
function ASpawnedItem:AddItem(InItem, bIsNewItem) end


---@class ASpawnedItemDroplet : ASpawnedItem
---@field UnfrozenReplacement TSubclassOf<ASpawnedItemDroplet>
---@field ServingVolume float
---@field DefaultRadius float
---@field BufferVolumeRatio float
---@field MaxServings int32
---@field EjectForce float
---@field InteractLinearDampening float
---@field SplashVFX UParticleSystem
---@field ScaleAnimCurve UCurveFloat
---@field WobbleStrengthCurve UCurveFloat
---@field OnDropletMergeIn FSpawnedItemDropletOnDropletMergeIn
---@field OnAbsorbActor FSpawnedItemDropletOnAbsorbActor
---@field PowerTag FGameplayTag
---@field DrinkInteractText FLocString
---@field ScoopInteractText FLocString
---@field MIDDroplet UMaterialInstanceDynamic
---@field NativeWobbleStrength float
---@field Servings int32
---@field ActorsContained TArray<TWeakObjectPtr<AActor>>
---@field OldActorsContained TArray<TWeakObjectPtr<AActor>>
ASpawnedItemDroplet = {}

---@param InstigatorController AController
---@return UBaseLODActor
function ASpawnedItemDroplet:Unfreeze(InstigatorController) end
---@param Servings int32
function ASpawnedItemDroplet:SetServings(Servings) end
function ASpawnedItemDroplet:PlayContactWobble() end
---@param Offset FVector
function ASpawnedItemDroplet:PlayContactEffects(Offset) end
function ASpawnedItemDroplet:OnRep_Servings() end
function ASpawnedItemDroplet:OnRep_ActorsContained() end
---@param InstigatorController AController
function ASpawnedItemDroplet:OnDropletUnfrozen(InstigatorController) end
---@return float
function ASpawnedItemDroplet:GetVolume() end
---@return int32
function ASpawnedItemDroplet:GetServings() end
---@return float
function ASpawnedItemDroplet:GetRadius() end
---@return float
function ASpawnedItemDroplet:GetOccupiedVolume() end
---@return int32
function ASpawnedItemDroplet:GetNumActorContained() end
---@return float
function ASpawnedItemDroplet:GetAvailableVolume() end
---@param Index int32
---@return AActor
function ASpawnedItemDroplet:GetActorContained(Index) end
function ASpawnedItemDroplet:EjectRandomActor() end
function ASpawnedItemDroplet:EjectAllActors() end
---@param Actor AActor
function ASpawnedItemDroplet:EjectActor(Actor) end
---@param Delta int32
function ASpawnedItemDroplet:AdjustServings(Delta) end


---@class ASphereVolumeBuilding : AVolumeBuilding
---@field GridDimensionsBase FVector
---@field GridMeshUnitSize float
---@field InteractionPlane UStaticMeshComponent
---@field SphereMesh UStaticMeshComponent
ASphereVolumeBuilding = {}



---@class AStatusEffectPickupBuilding : ABuilding
---@field HasBeenPickedup boolean
---@field SelectedStatusEffectData FDataTableRowHandle
---@field RespawnTime float
---@field ShouldRespawnWithTimer boolean
---@field IsSpawnActive boolean
---@field CollisionComponent UCapsuleComponent
AStatusEffectPickupBuilding = {}

function AStatusEffectPickupBuilding:SpawnDeactivate() end
function AStatusEffectPickupBuilding:SpawnActivate() end
function AStatusEffectPickupBuilding:ShowPickupVisuals() end
function AStatusEffectPickupBuilding:PickupRespawn() end
---@param Character ASurvivalPlayerCharacter
function AStatusEffectPickupBuilding:Pickup(Character) end
function AStatusEffectPickupBuilding:OnRep_HasBeenPickedup() end
---@param Sender UHealthComponent
function AStatusEffectPickupBuilding:OnPlayerRevived(Sender) end
---@param Character ASurvivalPlayerCharacter
function AStatusEffectPickupBuilding:OnPlayerPickup(Character) end
---@param OverlappedComp UPrimitiveComponent
---@param Other AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function AStatusEffectPickupBuilding:OnComponentOverlapBegin(OverlappedComp, Other, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function AStatusEffectPickupBuilding:OnComponentEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param Character ASurvivalPlayerCharacter
function AStatusEffectPickupBuilding:MulticastNotifyPickup(Character) end
function AStatusEffectPickupBuilding:HidePickupVisuals() end


---@class AStencilStandInActor : AActor
---@field StaticMeshComponent UStaticMeshComponent
AStencilStandInActor = {}



---@class AStorageBuilding : AWidgetBuilding
---@field OnHudMarkerChanged FStorageBuildingOnHudMarkerChanged
---@field CustomName FString
---@field CustomNameFiltered FString
---@field InventoryComponent UInventoryComponent
---@field OCLComponent UOCLComponent
---@field bIgnoreMassDeposit boolean
---@field bIgnoreProximityInventory boolean
---@field bItemGenerator boolean
---@field bGrantsItemsToOutputs boolean
---@field bItemReceiver boolean
AStorageBuilding = {}

---@param InventoryComponentOwner UInventoryComponent
---@param ItemHandle FDataTableRowHandle
---@param IsNewItem boolean
---@param Count int32
---@param TotalCount int32
function AStorageBuilding:SendInventoryItemAddedTrigger(InventoryComponentOwner, ItemHandle, IsNewItem, Count, TotalCount) end
function AStorageBuilding:OnRep_CustomName() end
---@return boolean
function AStorageBuilding:IsItemReceiver() end
---@return boolean
function AStorageBuilding:IsItemGenerator() end
---@return boolean
function AStorageBuilding:IgnoresProximityInventory() end
---@return boolean
function AStorageBuilding:IgnoresMassDeposit() end


---@class AStructuralReplicationProxy : ABuildingGridReplicationProxy
AStructuralReplicationProxy = {}


---@class ASurvivalAIController : AAIController
---@field ManualMoveResult EBTNodeResult::Type
---@field bIsInBurrowed boolean
---@field WanderDestinationQuery UEnvQuery
---@field FollowTargetPriorityDist float
---@field PetFidgetInterval FFloatRange
---@field TargettingComponent UAITargettingComponent
---@field DetectionComponent UAIDetectionComponent
---@field InterestComponent UInterestComponent
---@field TrackingComponent UTrackingComponent
---@field BehaviorTree UBehaviorTree
---@field bIsStationary boolean
---@field bLevelWhenIdle boolean
---@field TetherRange float
---@field TetherRangeTame float
---@field WanderRange float
---@field ActivePetWanderRange float
---@field InactivePetWanderRange float
---@field PreferredMinimumHeight float
---@field bFocusOnInterest boolean
---@field SearchRadius float
---@field ObjectTypes TArray<EObjectTypeQuery>
---@field TargetClass UClass
---@field ConeWanderRange FVector2D
---@field ExploreMinAltitude float
---@field ExploreMaxAltitude float
---@field DefaultBehaviorType EDefaultBehaviorType
---@field MoveToConfig TMap<EBehaviorType, FBehaviorMovementConfig>
---@field AICharacter ASurvivalCharacter
---@field AICreature ASurvivalCreature
---@field AISwimmingCharacter ASwimmingSurvivalCharacter
---@field CurrentMove FAIMoveRequest
---@field TokenCooldown float
---@field TokenRandomDeviation float
---@field UsesPerToken int32
---@field bIgnoreTargetTokenLimit boolean
---@field bClearThreatAfterAttack boolean
---@field FleeRange float
---@field bNeverFlee boolean
---@field bBurrowAfterFlee boolean
---@field bCanStrafeWhileInCombatIdle boolean
---@field CombatIdleTime float
---@field CombatIdleRandomDeviation float
---@field StrafeIdleTime float
---@field StrafeIdleRandomDeviation float
---@field bPutsPlayersInCombat boolean
---@field bIgnoreWander boolean
---@field DesiredCombatAction FAICombatAction
---@field ActorsToIgnore TArray<AActor>
---@field TraceType ETraceTypeQuery
---@field AttachmentTag FName
---@field TerrainTraceDistance float
---@field WanderBlockOffset float
---@field HorizontalWanderAngle FVector2D
---@field VerticalWanderAngle FVector2D
---@field DrawDebugLines boolean
---@field bWaitAfterWander boolean
---@field bDoNonPlayerInteractions boolean
---@field NextWantedAbility UAbility
---@field LastAbilitySelectedCombatAction UAbility
---@field WaveCreatureComponent UWaveCreatureComponent
ASurvivalAIController = {}

---@return boolean
function ASurvivalAIController:WarpToSearchOrigin() end
---@return boolean
function ASurvivalAIController:WarpToFollowTarget() end
function ASurvivalAIController:UpdateHomeLocation() end
---@param DeltaTime float
function ASurvivalAIController:TickFindNonPlayerInteractions(DeltaTime) end
---@return boolean
function ASurvivalAIController:ShouldWaitAfterWander() end
---@return boolean
function ASurvivalAIController:ShouldStrafeInCombat() end
---@return boolean
function ASurvivalAIController:ShouldBurrowAfterFlee() end
function ASurvivalAIController:SetWantsToRetreat() end
---@param Waypoint AWaypoint
function ASurvivalAIController:SetTargetWaypoint(Waypoint) end
---@param Target AActor
function ASurvivalAIController:SetTarget(Target) end
---@param NextWaypoint AWaypoint
function ASurvivalAIController:SetNextWaypoint(NextWaypoint) end
---@param Location FVector
function ASurvivalAIController:SetHomeLocation(Location) end
---@param Target AActor
function ASurvivalAIController:SetFollowTarget(Target) end
---@param bDisabled boolean
function ASurvivalAIController:SetDisabled(bDisabled) end
---@param Target AActor
---@param Attack UAttack
---@param AnimMontage UAnimMontage
function ASurvivalAIController:SetDesiredCombatAction(Target, Attack, AnimMontage) end
function ASurvivalAIController:ResetAttackAndToken() end
---@param AttackState EWaveAttackState
function ASurvivalAIController:OnWaveAttackStateChanged(AttackState) end
---@param Sender UHealthComponent
function ASurvivalAIController:OnRevived(Sender) end
---@param HealthState EHealthState
function ASurvivalAIController:OnHealthStateChanged(HealthState) end
---@param OldMode EEditMode
---@param NewMode EEditMode
function ASurvivalAIController:OnEditModeChanged(OldMode, NewMode) end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function ASurvivalAIController:OnDamaged(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@param CombatCharacter ASurvivalCharacter
---@param bInCombat boolean
function ASurvivalAIController:OnCombatChanged(CombatCharacter, bInCombat) end
---@param Attack UAttack
function ASurvivalAIController:OnAttack(Attack) end
---@param SelfActor AActor
---@param OtherActor AActor
---@param NormalImpulse FVector
---@param Hit FHitResult
function ASurvivalAIController:OnActorCollision(SelfActor, OtherActor, NormalImpulse, Hit) end
---@param AbilityData FDataTableRowHandle
---@return boolean
function ASurvivalAIController:IsScriptedBpConditionValid(AbilityData) end
---@return boolean
function ASurvivalAIController:IsInCombat() end
---@return boolean
function ASurvivalAIController:IsClimbing() end
---@return boolean
function ASurvivalAIController:HasPatrol() end
---@param MinPriority int32
---@return boolean
function ASurvivalAIController:HasAbilityUsableOfPriority(MinPriority) end
---@return boolean
function ASurvivalAIController:HasAbilityUsable() end
---@param Sender UInterestComponent
---@param Mode ECreatureActivityMode
function ASurvivalAIController:HandleActivityModeChanged(Sender, Mode) end
---@return FVector
function ASurvivalAIController:GetWaveDestination() end
---@param World UWorld
---@return float
function ASurvivalAIController:GetWanderRange(World) end
---@return boolean
function ASurvivalAIController:GetUsePathFollower() end
---@return float
function ASurvivalAIController:GetTetherRange() end
---@return FVector
function ASurvivalAIController:GetSearchOrigin() end
---@return float
function ASurvivalAIController:GetRandomStrafeIdleTime() end
---@return float
function ASurvivalAIController:GetRandomCombatIdleTime() end
---@return float
function ASurvivalAIController:GetPreferredMinimumHeight() end
---@param OutLocation FVector
---@return boolean
function ASurvivalAIController:GetPetMasterLocation(OutLocation) end
---@return FVector
function ASurvivalAIController:GetHomeLocation() end
---@param OutLocation FVector
---@return boolean
function ASurvivalAIController:GetGoalLocation(OutLocation) end
---@return AActor
function ASurvivalAIController:GetGoalActor() end
---@return AActor
function ASurvivalAIController:GetFollowTarget() end
---@return float
function ASurvivalAIController:GetFleeRange() end
---@return ANonPlayerInteraction
function ASurvivalAIController:GetDesiredNonPlayerInteraction() end
---@return EBehaviorType
function ASurvivalAIController:GetDesiredBehavior() end
---@return AActor
function ASurvivalAIController:GetDesiredAttackTarget() end
---@return UAttack
function ASurvivalAIController:GetDesiredAttack() end
---@return AWaypoint
function ASurvivalAIController:GetCurrentWaypoint() end
---@return FVector2D
function ASurvivalAIController:GetConeWanderRange() end
---@return FVector
function ASurvivalAIController:GetBlackboardTargetLocation() end
---@return AActor
function ASurvivalAIController:GetBlackboardTargetActor() end
---@param ResultType EBTNodeResult::Type
function ASurvivalAIController:FinishMoveManual(ResultType) end
---@return FVector
function ASurvivalAIController:FindClosestAttachPoint() end
function ASurvivalAIController:ClearRetreat() end


---@class ASurvivalCharacter : ACharacter
---@field WaveSpawnID int32
---@field OnWaveSpawnChanged FSurvivalCharacterOnWaveSpawnChanged
---@field CameraDisplayModeLocked boolean
---@field bIsAttacking boolean
---@field bClientWantsToAttack boolean
---@field OnAttackLaunch FSurvivalCharacterOnAttackLaunch
---@field OnAttackHit FSurvivalCharacterOnAttackHit
---@field OnAttackEnded FSurvivalCharacterOnAttackEnded
---@field OnDamageTarget FSurvivalCharacterOnDamageTarget
---@field OnKillTarget FSurvivalCharacterOnKillTarget
---@field OnReviveTarget FSurvivalCharacterOnReviveTarget
---@field OnDisplayModeChanged FSurvivalCharacterOnDisplayModeChanged
---@field OnCombatChanged FSurvivalCharacterOnCombatChanged
---@field OnPropActorAddedRemoved FSurvivalCharacterOnPropActorAddedRemoved
---@field OnPawnRespawned FSurvivalCharacterOnPawnRespawned
---@field OnControllerChanged FSurvivalCharacterOnControllerChanged
---@field ShouldActorLOD boolean
---@field MaxFullActorDistance float
---@field ProxyStandIn TSubclassOf<AProxyStandInActor>
---@field ShouldOrientToGround boolean
---@field GroundOrientLerpSpeed float
---@field CurrentAnimTarget AActor
---@field AllowSpawnInDither boolean
---@field SpawnInDitherFadeDuration float
---@field bAlwaysRevelant boolean
---@field bVitalStasisActor boolean
---@field CharacterData FDataTableRowHandle
---@field LiteData USurvivalCharacterLiteData
---@field SpeakerInfo FSpeakerInfo
---@field CharacterName FLocString
---@field bFemale boolean
---@field MountSocket FName
---@field MountedAnimation UAnimMontage
---@field JumpAnimation UAnimMontage
---@field DesiredJumpTarget FVector_NetQuantize
---@field DesiredJumpHeightMult float
---@field ThirdPersonFollowDistance float
---@field FirstPersonCamera UCameraComponent
---@field FirstPersonCameraLocation USceneComponent
---@field ThirdPersonSpringArm USpringArmComponent
---@field HealthComponent UHealthComponent
---@field BlockComponent UBlockComponent
---@field ReactionComponent UReactionComponent
---@field TeamComponent UTeamComponent
---@field StatusEffectComponent UStatusEffectComponent
---@field CharMovementComponent UMaineCharMovementComponent
---@field CharEquipmentComponent UEquipmentComponent
---@field ObsidianIDComp UObsidianIDComponent
---@field IncapacitatedInputComponent UInputComponent
---@field CutsceneInputComponent UInputComponent
---@field AttractionComponent UAttractionComponent
---@field ConversationComponent UConversationComponent
---@field BossComponent UBossComponent
---@field LootComponent ULootComponent
---@field PrimitiveComponents TArray<UPrimitiveComponent>
---@field AttackHandlerComponent UAttackHandlerComponent
---@field DefaultAttackComboData FAttackComboData
---@field SwimAttackComboData FAttackComboData
---@field AbilityDataList TArray<FDataTableRowHandle>
---@field DeathAttackData FDataTableRowHandle
---@field AttackInputBufferTime float
---@field DefaultAttackTier int32
---@field AlternateAttackFunction EAlternateAttackFunction
---@field PlayerDisplayMode ECameraDisplayMode
---@field OverrideDisplayModes TArray<FOverrideDisplayModeData>
---@field OverrideViewTarget AActor
---@field VoiceOverAudioComponent USceneComponent
---@field ExpectedCameraViewPoint ECameraDisplayMode
---@field NetworkConsensusRelevance ERelevanceType
---@field DefaultAttackCombo UAttackCombo
---@field SwimAttackCombo UAttackCombo
---@field Abilities TArray<UAbility>
---@field DeathAttack UAttack
---@field bTakeFallDamage boolean
---@field MinimumFallDamageVelocity float
---@field FallDamageRatio float
---@field bCannotBeInfused boolean
---@field bInfused boolean
---@field IncreasedInfusionChance float
---@field AttachedInfusedVFXActor AActor
---@field CurrentMount ASurvivalCharacter
---@field FollowTarget TWeakObjectPtr<AActor>
---@field MountedActor TWeakObjectPtr<AActor>
---@field LockedMontageTargetPitch float
---@field LockedMontageBlendSpeed float
---@field WatchCameraRig TSubclassOf<AActor>
---@field bInCombat boolean
---@field bReplicatedAutorun boolean
---@field bIsEnabledDuringWaveOrBoss boolean
---@field bCanDeleteInterestComponentForOptimizations boolean
---@field ReplicatedAttachedSpline FClimbableSplineKey
---@field ReplicatedDetachSplineReason EDetachSplineReason
---@field ReplicatedSplineProgress float
---@field ReplicatedPerchedObject FAttractionComponentKey
---@field ReplicatedAttachedZipline AZiplineLine
---@field ReplicatedZiplinePosition float
---@field bReplicatedZiplineDirectionDown boolean
---@field ReplicatedCurrentPlayingInteractAnim UAnimMontage
---@field ReplicatedMotionEater UCharacterMotionEaterComponent
---@field CurrentAttack UAttack
---@field EmoteAnims TMap<FGameplayTag, UAnimMontage>
---@field SoftEmoteAnims TMap<FGameplayTag, TSoftObjectPtr<UAnimMontage>>
---@field InteractAnims TMap<EInteractAnimType, UAnimMontage>
---@field EmergeAnims TArray<UAnimMontage>
---@field FlyingLandAnim UAnimMontage
---@field FlyingTakeoffAnim UAnimMontage
---@field AudioData TSoftObjectPtr<UCharacterAudioData>
---@field LocalizedAudioData TMap<ESpokenLanguageSetting, TSoftObjectPtr<UCharacterAudioData>>
---@field CachedAudioData UCharacterAudioData
---@field EnabledForWave boolean
---@field EnabledForWaveImmediate boolean
---@field EnabledForWaveChangeTime float
---@field CombatMusicTag FGameplayTag
---@field InteractableAnimType EInteractAnimType
---@field InteractableProp TSubclassOf<AActor>
---@field ActiveProps TArray<FCharacterPropEntry>
---@field AnimPropTemplate TSubclassOf<AActor>
---@field ActiveAnimMontages TMap<ECharacterAnimMontageType, UAnimMontage>
---@field GiveUpTime float
---@field PawnBlockingComponents TArray<UPrimitiveComponent>
---@field ItemBlockingComponents TArray<UPrimitiveComponent>
---@field AttackOverlapComponents TArray<UPrimitiveComponent>
---@field InfusedMaterials TArray<FOverrideMaterialSetting>
---@field DeathDestroyEffect TSoftObjectPtr<UVisualEffect>
---@field LoadedDeathDestroyEffect UVisualEffect
---@field PhotoModeHelperComponent UPhotoModeHelperComponent
ASurvivalCharacter = {}

---@return boolean
function ASurvivalCharacter:WarpToSearchOrigin() end
---@return boolean
function ASurvivalCharacter:WarpToFollowTarget() end
---@param InBlendTime float
function ASurvivalCharacter:UpdateCameraDisplayMode(InBlendTime) end
---@param bEnabled boolean
function ASurvivalCharacter:TogglePawnBlockers(bEnabled) end
function ASurvivalCharacter:ToggleCrouch() end
---@param Waypoint AWaypoint
function ASurvivalCharacter:SetTargetWaypoint(Waypoint) end
---@param ViewTarget AActor
---@param Transition FViewTargetTransitionParams
function ASurvivalCharacter:SetOverrideViewTarget(ViewTarget, Transition) end
---@param Handle FOverrideDisplayModeHandle
---@param DisplayMode ECameraDisplayMode
---@param InBlendTime float
function ASurvivalCharacter:SetOverrideCameraDisplayMode(Handle, DisplayMode, InBlendTime) end
---@param bNewIsAttacking boolean
function ASurvivalCharacter:SetIsAttacking(bNewIsAttacking) end
---@param bInCutscene boolean
function ASurvivalCharacter:SetInCutscene(bInCutscene) end
---@param NewAnimTarget AActor
function ASurvivalCharacter:SetCurrentAnimTarget(NewAnimTarget) end
---@param Locked boolean
function ASurvivalCharacter:SetCameraDisplayModeLocked(Locked) end
---@param DisplayMode ECameraDisplayMode
---@param InBlendTime float
function ASurvivalCharacter:SetCameraDisplayMode(DisplayMode, InBlendTime) end
---@param AnimationInteractComponent UAnimationInteractComponent
---@param InteractAnimType EInteractAnimType
function ASurvivalCharacter:ServerTriggerAnimationInteract(AnimationInteractComponent, InteractAnimType) end
function ASurvivalCharacter:ServerToggleSprint() end
---@param bLaunch boolean
function ASurvivalCharacter:ServerStopZiplining(bLaunch) end
---@param AnimMontage UAnimMontage
function ASurvivalCharacter:ServerStopAnimMontage(AnimMontage) end
---@param bAsToggle boolean
function ASurvivalCharacter:ServerStartSprint(bAsToggle) end
function ASurvivalCharacter:ServerStartGlide() end
function ASurvivalCharacter:ServerStartBlock() end
---@param AttackType EAttackType
function ASurvivalCharacter:ServerStartAttack(AttackType) end
---@param AbilityIndex int32
function ASurvivalCharacter:ServerStartAbility(AbilityIndex) end
---@param DisplayMode ECameraDisplayMode
function ASurvivalCharacter:ServerSetDisplayMode(DisplayMode) end
---@param bState boolean
function ASurvivalCharacter:ServerSetAutorun(bState) end
---@param EmoteTypeTag FGameplayTag
---@param bLockCharacter boolean
function ASurvivalCharacter:ServerPlayEmoteAnim(EmoteTypeTag, bLockCharacter) end
---@param EmoteDataRowHandle FDataTableRowHandle_NetCrc
function ASurvivalCharacter:ServerPlayEmote(EmoteDataRowHandle) end
---@param ChatterEvent FChatterEventReference
---@param Delay float
---@param Param1 int32
---@param Param2 int32
function ASurvivalCharacter:ServerPlayChatterWithDelay(ChatterEvent, Delay, Param1, Param2) end
---@param ChatterEvent FChatterEventReference
---@param Param1 int32
---@param Param2 int32
function ASurvivalCharacter:ServerPlayChatter(ChatterEvent, Param1, Param2) end
---@param AnimMontage UAnimMontage
---@param bLockCharacter boolean
---@param AnimMontageType ECharacterAnimMontageType
function ASurvivalCharacter:ServerPlayAnimMontage(AnimMontage, bLockCharacter, AnimMontageType) end
---@param bClearToggle boolean
function ASurvivalCharacter:ServerEndSprint(bClearToggle) end
function ASurvivalCharacter:ServerEndGlide() end
---@param bImmediate boolean
function ASurvivalCharacter:ServerEndEmote(bImmediate) end
---@param FromInput boolean
function ASurvivalCharacter:ServerEndBlock(FromInput) end
---@param bCancelInput boolean
---@param bOnlyEndBeforeHitFrame boolean
function ASurvivalCharacter:ServerEndAttack(bCancelInput, bOnlyEndBeforeHitFrame) end
function ASurvivalCharacter:ServerDismount() end
function ASurvivalCharacter:ServerAttemptRaycastPossess() end
---@param InFadeIn boolean
function ASurvivalCharacter:RequestFade(InFadeIn) end
---@param MessageTag FName
function ASurvivalCharacter:ReceiveMessage(MessageTag) end
---@param Variation EDestroyCharacterVariation
function ASurvivalCharacter:PlayDestroyVisuals(Variation) end
---@param bIsUnderwater boolean
function ASurvivalCharacter:OnUnderwaterChanged(bIsUnderwater) end
function ASurvivalCharacter:OnUIOpenChatPressed() end
function ASurvivalCharacter:OnStatusEffectChanged() end
function ASurvivalCharacter:OnRep_WaveSpawnID() end
function ASurvivalCharacter:OnRep_SplineProgress() end
function ASurvivalCharacter:OnRep_ReplicatedMotionEater() end
function ASurvivalCharacter:OnRep_ReplicatedCurrentPlayingInteractAnim() end
function ASurvivalCharacter:OnRep_NetworkRelevance() end
function ASurvivalCharacter:OnRep_IsAttacking() end
function ASurvivalCharacter:OnRep_Infused() end
function ASurvivalCharacter:OnRep_InCombat() end
function ASurvivalCharacter:OnRep_EnabledForWaveImmediate() end
function ASurvivalCharacter:OnRep_EnabledForWave() end
function ASurvivalCharacter:OnRep_CurrentMount() end
function ASurvivalCharacter:OnRep_bReplicatedAutorun() end
---@param RemovedPlayer APlayerState
function ASurvivalCharacter:OnPlayerRemoved(RemovedPlayer) end
function ASurvivalCharacter:OnOpenChatMenuPressed() end
---@param DamageInfo FDamageInfo
function ASurvivalCharacter:OnIncapacitate(DamageInfo) end
---@param Sender UReactionComponent
---@param ReactType EHitReactionType
function ASurvivalCharacter:OnHitReact(Sender, ReactType) end
---@param HealthState EHealthState
function ASurvivalCharacter:OnHealthStateChanged(HealthState) end
function ASurvivalCharacter:OnGameModeChanged() end
---@param DamageInfo FDamageInfo
function ASurvivalCharacter:OnDeath(DamageInfo) end
---@param bEnabled boolean
function ASurvivalCharacter:MulticastToggleCollisionAndVisibility(bEnabled) end
---@param InteractType EInteractAnimType
function ASurvivalCharacter:MulticastStopInteractAnimMontage(InteractType) end
function ASurvivalCharacter:MulticastStopCaptureReaction() end
---@param AttackRowHandle FDataTableRowHandle_NetCrc
function ASurvivalCharacter:MulticastStopAttackAnimMontage(AttackRowHandle) end
---@param AnimMontageType ECharacterAnimMontageType
function ASurvivalCharacter:MulticastStopAnimMontageType(AnimMontageType) end
---@param AnimMontage TSoftObjectPtr<UAnimMontage>
function ASurvivalCharacter:MulticastStopAnimMontageSoft(AnimMontage) end
---@param AnimMontage UAnimMontage
function ASurvivalCharacter:MulticastStopAnimMontage(AnimMontage) end
---@param AnimMontage UAnimMontage
---@param bLockCharacter boolean
function ASurvivalCharacter:MulticastStartCaptureReaction(AnimMontage, bLockCharacter) end
---@param SectionToSet FName_NetCrc
---@param NextSection FName_NetCrc
---@param bJumpIfNotInSection boolean
function ASurvivalCharacter:MulticastSetSleepAnimNextSectionCrc(SectionToSet, NextSection, bJumpIfNotInSection) end
---@param CollisionResponse ECollisionResponse
function ASurvivalCharacter:MulticastSetPawnCollision(CollisionResponse) end
---@param InteractType EInteractAnimType
---@param SectionToSet FName_NetCrc
---@param NextSection FName_NetCrc
---@param JumpIfNotInSection boolean
function ASurvivalCharacter:MulticastSetInteractAnimMontageNextSectionCrc(InteractType, SectionToSet, NextSection, JumpIfNotInSection) end
---@param AttackRowHandle FDataTableRowHandle_NetCrc
---@param SectionToSet FName_NetCrc
---@param NextSection FName_NetCrc
---@param JumpIfNotInSection boolean
function ASurvivalCharacter:MulticastSetAttackAnimMontageNextSectionCrc(AttackRowHandle, SectionToSet, NextSection, JumpIfNotInSection) end
---@param AnimMontageType ECharacterAnimMontageType
---@param SectionToSet FName_NetCrc
---@param NextSection FName_NetCrc
---@param JumpIfNotInSection boolean
function ASurvivalCharacter:MulticastSetAnimMontageNextSectionTypeCrc(AnimMontageType, SectionToSet, NextSection, JumpIfNotInSection) end
---@param AnimMontage UAnimMontage
---@param SectionToSet FName_NetCrc
---@param NextSection FName_NetCrc
---@param JumpIfNotInSection boolean
function ASurvivalCharacter:MulticastSetAnimMontageNextSectionCrc(AnimMontage, SectionToSet, NextSection, JumpIfNotInSection) end
---@param AnimMontage UAnimMontage
---@param SectionToSet FName
---@param NextSection FName
---@param JumpIfNotInSection boolean
function ASurvivalCharacter:MulticastSetAnimMontageNextSection(AnimMontage, SectionToSet, NextSection, JumpIfNotInSection) end
function ASurvivalCharacter:MulticastPlaySleepAnim() end
---@param ReactionType EHitReactionType
---@param MotionType EHitMotionType
---@param bLockCharacter boolean
function ASurvivalCharacter:MulticastPlayReactionAnim(ReactionType, MotionType, bLockCharacter) end
---@param InteractType EInteractAnimType
function ASurvivalCharacter:MulticastPlayPropInteractAnimCrc(InteractType) end
---@param AnimMontage UAnimMontage
---@param Prop TSoftClassPtr<AActor>
---@param AttachSocket FName_NetCrc
---@param bLockCharacter boolean
---@param AnimMontageType ECharacterAnimMontageType
function ASurvivalCharacter:MulticastPlayPropAnimSoftPropCrc(AnimMontage, Prop, AttachSocket, bLockCharacter, AnimMontageType) end
---@param AnimMontage UAnimMontage
---@param Prop TSoftClassPtr<AActor>
---@param AttachSocket FName
---@param bLockCharacter boolean
---@param AnimMontageType ECharacterAnimMontageType
function ASurvivalCharacter:MulticastPlayPropAnimSoftProp(AnimMontage, Prop, AttachSocket, bLockCharacter, AnimMontageType) end
---@param AnimMontage UAnimMontage
---@param Prop TSubclassOf<AActor>
---@param AttachSocket FName_NetCrc
---@param bLockCharacter boolean
---@param AnimMontageType ECharacterAnimMontageType
function ASurvivalCharacter:MulticastPlayPropAnimCrc(AnimMontage, Prop, AttachSocket, bLockCharacter, AnimMontageType) end
---@param AnimMontage UAnimMontage
---@param Prop TSubclassOf<AActor>
---@param AttachSocket FName
---@param bLockCharacter boolean
---@param AnimMontageType ECharacterAnimMontageType
function ASurvivalCharacter:MulticastPlayPropAnim(AnimMontage, Prop, AttachSocket, bLockCharacter, AnimMontageType) end
---@param InteractType EInteractAnimType
function ASurvivalCharacter:MulticastPlayNullPropInteractAnimCrc(InteractType) end
---@param InteractType EInteractAnimType
---@param bLockCharacter boolean
---@param Type ECharacterAnimMontageType
function ASurvivalCharacter:MulticastPlayInteractAnimMontage(InteractType, bLockCharacter, Type) end
---@param EmoteTag FGameplayTag_NetCrc
---@param bLockCharacter boolean
function ASurvivalCharacter:MulticastPlayEmoteSoft(EmoteTag, bLockCharacter) end
---@param Variation EDestroyCharacterVariation
function ASurvivalCharacter:MulticastPlayDestroyVisuals(Variation) end
---@param ItemType FDataTableRowHandle_NetCrc
---@param AtLocation FVector
function ASurvivalCharacter:MulticastPlayConsumedEffect(ItemType, AtLocation) end
---@param Anim EBaseCharacterAnim
function ASurvivalCharacter:MulticastPlayBaseAnimMontage(Anim) end
---@param AttackRowHandle FDataTableRowHandle_NetCrc
function ASurvivalCharacter:MulticastPlayAttackPropAnimMontage(AttackRowHandle) end
---@param AttackRowHandle FDataTableRowHandle_NetCrc
function ASurvivalCharacter:MulticastPlayAttackDeflectAnimMontageSoft(AttackRowHandle) end
---@param AttackRowHandle FDataTableRowHandle_NetCrc
function ASurvivalCharacter:MulticastPlayAttackAnimMontage(AttackRowHandle) end
---@param AnimMontage TSoftObjectPtr<UAnimMontage>
---@param bLockCharacter boolean
---@param AnimMontageType ECharacterAnimMontageType
---@param ForceSynchronous boolean
function ASurvivalCharacter:MulticastPlayAnimMontageSoft(AnimMontage, bLockCharacter, AnimMontageType, ForceSynchronous) end
---@param AnimMontage UAnimMontage
---@param SectionToSet FName_NetCrc
---@param NextSection FName_NetCrc
---@param bLockCharacter boolean
---@param AnimMontageType ECharacterAnimMontageType
function ASurvivalCharacter:MulticastPlayAnimMontageSectionCrc(AnimMontage, SectionToSet, NextSection, bLockCharacter, AnimMontageType) end
---@param AnimMontage UAnimMontage
---@param SectionToSet FName
---@param NextSection FName
---@param bLockCharacter boolean
---@param AnimMontageType ECharacterAnimMontageType
function ASurvivalCharacter:MulticastPlayAnimMontageSection(AnimMontage, SectionToSet, NextSection, bLockCharacter, AnimMontageType) end
---@param AnimMontage UAnimMontage
---@param bLockCharacter boolean
---@param AnimMontageType ECharacterAnimMontageType
function ASurvivalCharacter:MulticastPlayAnimMontage(AnimMontage, bLockCharacter, AnimMontageType) end
---@param AnimMontage UAnimMontage
---@param SectionToSet FName
---@param NextSection FName
function ASurvivalCharacter:MulticastJumpAnimMontageSection(AnimMontage, SectionToSet, NextSection) end
---@param OldController AController
function ASurvivalCharacter:MulticastHandleDetachFromControllerPendingDestroy(OldController) end
---@param bVisible boolean
---@param GliderItem UItem
function ASurvivalCharacter:MulticastGliderVisuals(bVisible, GliderItem) end
---@param Category ECharacterLockCategory
function ASurvivalCharacter:MulticastForceUnlock(Category) end
---@param SurfaceType EPhysicalSurface
---@param VelocityZ float
function ASurvivalCharacter:MulticastFallEffects(SurfaceType, VelocityZ) end
---@param bDestroy boolean
function ASurvivalCharacter:MulticastAttackDestroyCharacter(bDestroy) end
---@param bIgnoreInvisibility boolean
---@return boolean
function ASurvivalCharacter:IsTargetable(bIgnoreInvisibility) end
---@return boolean
function ASurvivalCharacter:IsLockedByAnimation() end
---@return boolean
function ASurvivalCharacter:IsInfused() end
---@return boolean
function ASurvivalCharacter:IsInCombat() end
---@return boolean
function ASurvivalCharacter:IsInBuildMode() end
---@return boolean
function ASurvivalCharacter:IsFemale() end
---@param RowName FName
---@return boolean
function ASurvivalCharacter:IsCharacterData(RowName) end
---@return boolean
function ASurvivalCharacter:IsCameraDisplayModeLocked() end
function ASurvivalCharacter:InputToggleCameraModePressed() end
---@param InTag FGameplayTag
---@return boolean
function ASurvivalCharacter:HasTag(InTag) end
---@param InTags FGameplayTagContainer
---@return boolean
function ASurvivalCharacter:HasAnyTag(InTags) end
---@param Sender UConditionalToggleComponent
---@param bState boolean
function ASurvivalCharacter:HandleNonPlayerInteractionShowTalkIconChanged(Sender, bState) end
---@param NewGamePlusLevel int32
function ASurvivalCharacter:HandleNewGamePlus(NewGamePlusLevel) end
---@param InOldPawn ASurvivalCharacter
---@param InNewPawn ASurvivalCharacter
function ASurvivalCharacter:HandleFollowTargetRespawned(InOldPawn, InNewPawn) end
---@param InstigatedBy AActor
function ASurvivalCharacter:HandleFinishPlacementMode(InstigatedBy) end
---@param DisplayMode ECameraDisplayMode
---@param BlendTime float
function ASurvivalCharacter:HandleCameraDisplayModeChanged(DisplayMode, BlendTime) end
---@param Sender ABuilding
function ASurvivalCharacter:HandleBaseBuildingRelocated(Sender) end
---@param Sender ANonPlayerInteraction
function ASurvivalCharacter:HandleAttractBarkImmediateRepeat(Sender) end
---@param Sender UConditionalToggleComponent
---@param bState boolean
function ASurvivalCharacter:HandleAttractBarkConditionalStateChanged(Sender, bState) end
---@return ASurvivalCharacter
function ASurvivalCharacter:GetViewCharacter() end
---@return FSpeakerReference
function ASurvivalCharacter:GetSpeaker() end
---@return FVector
function ASurvivalCharacter:GetMovementForwardVector() end
---@return FVector
function ASurvivalCharacter:GetLookWorldOrigin() end
---@return FQuat
function ASurvivalCharacter:GetLookQuat() end
---@return FVector
function ASurvivalCharacter:GetLookForwardVector() end
---@return UAnimMontage
function ASurvivalCharacter:GetJumpAnim() end
---@return boolean
function ASurvivalCharacter:GetIsFirstPerson() end
---@return FGuid
function ASurvivalCharacter:GetId() end
---@return float
function ASurvivalCharacter:GetGiveUpTimeRemaining() end
---@return float
function ASurvivalCharacter:GetGiveUpMaxTime() end
---@return AActor
function ASurvivalCharacter:GetFollowTarget() end
---@return UCameraComponent
function ASurvivalCharacter:GetFirstPersonCamera() end
---@param EmoteTypeTag FGameplayTag
---@return TSoftObjectPtr<UAnimMontage>
function ASurvivalCharacter:GetEmoteAnim(EmoteTypeTag) end
---@param EmergeVariation int32
---@return UAnimMontage
function ASurvivalCharacter:GetEmergeAnim(EmergeVariation) end
---@return ASurvivalCharacter
function ASurvivalCharacter:GetCurrentMount() end
---@return FVector
function ASurvivalCharacter:GetCurrentCameraLocation() end
---@return UCameraComponent
function ASurvivalCharacter:GetCurrentCamera() end
---@return UAttack
function ASurvivalCharacter:GetCurrentAttack() end
---@param Key FKey
---@return UControlOptions
function ASurvivalCharacter:GetControlOptions(Key) end
---@return FLocString
function ASurvivalCharacter:GetCharacterTypeName() end
---@param bFilter boolean
---@return FString
function ASurvivalCharacter:GetCharacterInstanceName(bFilter) end
---@return FDataTableRowHandle
function ASurvivalCharacter:GetCharacterDataRow() end
---@return FBoxSphereBounds
function ASurvivalCharacter:GetCapsuleBounds() end
---@return ECameraDisplayMode
function ASurvivalCharacter:GetCameraDisplayMode() end
---@return ANonPlayerInteraction
function ASurvivalCharacter:GetAttractNonPlayerInteraction() end
---@return ASurvivalPlayerState
function ASurvivalCharacter:GetAssociatedPlayerState() end
---@return AActor
function ASurvivalCharacter:GetAnimProp() end
---@return TArray<UAbility>
function ASurvivalCharacter:GetAbilities() end
---@param Level int32
function ASurvivalCharacter:ForceSetNewGamePlusLevel(Level) end
---@param bCancelInput boolean
---@param bImmediate boolean
function ASurvivalCharacter:EndAttack(bCancelInput, bImmediate) end
---@param DisableTime float
function ASurvivalCharacter:DisablePlayerLookAndTurnInput(DisableTime) end
function ASurvivalCharacter:ClientNotifyStartAttackFailure() end
function ASurvivalCharacter:ClientNotifyRangedAttackHit() end
---@param Handle FOverrideDisplayModeHandle
---@param InBlendTime float
function ASurvivalCharacter:ClearOverrideCameraDisplayMode(Handle, InBlendTime) end
function ASurvivalCharacter:ClearFadeRequest() end
---@return boolean
function ASurvivalCharacter:CanBeMounted() end
---@param NewLang ESpokenLanguageSetting
function ASurvivalCharacter:CacheAudioDataForActiveLanguage(NewLang) end
function ASurvivalCharacter:ApplyFallDamage() end


---@class ASurvivalCreature : ASurvivalCharacter
---@field TameData UTamedCreatureData
---@field TamingChance float
---@field BeingPetAnim UAnimMontage
---@field PlayerPettingAnim UAnimMontage
---@field PlayerPettingAnimDead UAnimMontage
---@field OptimalPettingDistance float
---@field DrownTimer float
---@field WaveWeightClass EWaveCreatureWeightClass
ASurvivalCreature = {}

---@param DeltaTime float
function ASurvivalCreature:TickDrown(DeltaTime) end
---@param Source UCharacterLODActor
function ASurvivalCreature:Tame(Source) end
---@param OldData UTamedCreatureData
function ASurvivalCreature:OnRep_TameData(OldData) end
---@param Item UItem
---@return boolean
function ASurvivalCreature:IsTamingFood(Item) end
---@return boolean
function ASurvivalCreature:IsTame() end
---@return boolean
function ASurvivalCreature:IsInactivePet() end
---@return boolean
function ASurvivalCreature:IsActivePet() end
---@param Sender UTamedCreatureData
---@param NewState ETamedState
function ASurvivalCreature:HandleTameStateChanged(Sender, NewState) end
---@param RestDuration float
function ASurvivalCreature:HandleGameRest(RestDuration) end
---@param Sender UPartyComponent
---@param Player ASurvivalPlayerCharacter
function ASurvivalCreature:HandleFixUpMaster(Sender, Player) end
---@return FVector
function ASurvivalCreature:GetPetMasterLocation() end
---@return ASurvivalPlayerCharacter
function ASurvivalCreature:GetPetMaster() end
---@return FVector
function ASurvivalCreature:GetPetHomeLocation() end
---@return float
function ASurvivalCreature:GetPetHappinessNormalized() end
---@return FString
function ASurvivalCreature:GetFoodsList() end
---@return TArray<FDataTableRowHandle>
function ASurvivalCreature:GetActivePetPassiveEffects() end


---@class ASurvivalGameMode : AMaineGameModeBase
---@field DefaultPlayerPawnList TMap<EPlayerCharacterIdentity, TSoftClassPtr<ASurvivalPlayerCharacter>>
---@field PlayerSpawnEQS UEnvQuery
ASurvivalGameMode = {}

function ASurvivalGameMode:RestartGame() end


---@class ASurvivalGameSession : AGameSession
ASurvivalGameSession = {}


---@class ASurvivalGameState : AGameStateBase
---@field OnPlayerStateAdded FSurvivalGameStateOnPlayerStateAdded
---@field OnPlayerStateRemoved FSurvivalGameStateOnPlayerStateRemoved
---@field LODActorManagerComponent ULODActorManagerComponent
---@field CalendarComponent UCalendarComponent
---@field PartyComponent UPartyComponent
---@field PartyBarrierComponent UPartyBarrierComponent
---@field BlendTriggerTickManager UBlendTriggerTickManager
---@field MapComponent UMapComponent
---@field HUDMarkerManagerComponent UHUDMarkerManagerComponent
---@field ItemManagerComponent UItemManagerComponent
---@field FoliageManagerComponent UFoliageManagerComponent
---@field QuestManagerComponent UQuestManagerComponent
---@field BreadcrumbManagerComponent UBreadcrumbManagerComponent
---@field AttractionManagerComponent UAttractionManagerComponent
---@field WaveManagerComponent UWaveManagerComponent
---@field CVarManagerComponent UCVarManagerComponent
---@field BindlessDelegateManager UBindlessDelegateManager
---@field MovieSkipComponent UMovieSkipComponent
---@field AsyncTraceShareComponent UAsyncTraceShareComponent
---@field BaseManagerComponent UBaseManagerComponent
---@field BuildingManagerComponent UBuildingManagerComponent
---@field PowerNetworkManagerComponent UPowerNetworkManagerComponent
---@field ConversationNavigatorComponent UConversationNavigatorComponent
---@field CutsceneComponent UCutsceneComponent
---@field InterestManagerComponent UInterestManagerComponent
---@field EncounterManagerComponent UEncounterManagerComponent
---@field LookTriggerManagerComponent ULookTriggerManagerComponent
---@field SurvivalModeManagerComponent USurvivalModeManagerComponent
---@field AuraManagerComponent UAuraManagerComponent
---@field BuildingPlacementManagerComponent UBuildingPlacementManager
---@field ZoneManagerComponent UZoneManagerComponent
---@field ColonyManagerComponent UColonyManagerComponent
---@field BurgleQuestManagerComponent UBurgleQuestManagerComponent
---@field PopulationMonitorComponent UPopulationMonitorComponent
---@field WorldTraceManagerComponent UWorldTraceManagerComponent
---@field WaterManagerComponent UWaterManagerComponent
---@field PropManagerComponent UPropManagerComponent
---@field VisualStateManagerComponent UVisualStateManagerComponent
---@field RenderTargetManagerComponent URenderTargetManagerComponent
---@field BuildingReplicationManager UBuildingReplicationManager
---@field TriggerManagerComponent UTriggerManagerComponent
---@field ResourceSurveyComponent UResourceSurveyComponent
---@field TotalPartyPlayerStatsComponent UPlayerStatsComponent
---@field BestiaryComponent UBestiaryComponent
---@field InterfaceManagerComponent UInterfaceManagerComponent
---@field EditModeManagerComponent UEditModeManagerComponent
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field DynamicMaterialCache UDynamicMaterialCache
---@field AmbienceManager UAmbienceManager
---@field OnDefensePointActiveChanged FSurvivalGameStateOnDefensePointActiveChanged
---@field OnDefensePointCompleted FSurvivalGameStateOnDefensePointCompleted
---@field OnLobbyGameStarted FSurvivalGameStateOnLobbyGameStarted
---@field PlaythroughGuid FGuid
---@field PlaythroughName FString
---@field CurrentLevelTag FGameplayTag
---@field UserMapCode FString
---@field SaveToLoadGameMode EGameMode
---@field bHasResetCreatureLocations boolean
---@field bHasRecoveredPlayerBackpacks boolean
---@field OnUserMapCodeChanged FSurvivalGameStateOnUserMapCodeChanged
---@field OnCollectiblesInitialized FSurvivalGameStateOnCollectiblesInitialized
---@field OnCollectibleStateChanged FSurvivalGameStateOnCollectibleStateChanged
---@field OnGameWonDelegate FSurvivalGameStateOnGameWonDelegate
---@field OnLocalUserGeneratedContentPrivilegeCachedDelegate FSurvivalGameStateOnLocalUserGeneratedContentPrivilegeCachedDelegate
---@field GlobalNumBuildingActors int32
---@field GlobalNumBuildingInstances int32
---@field GlobalNumLODActors int32
---@field GlobalNumSpawnedItemLODActors int32
---@field GlobalNumPlaceableStaticMeshActors int32
---@field ItemSpawnManagerTemplate TSubclassOf<AItemSpawnManager>
---@field WaveRegions TArray<AWaveSpawnRegionVolume>
---@field TimeOfDayManager ATimeOfDayLightingManager
---@field PostGameData UPostGameReportDataAsset
---@field LobbyPlayerCharacterIdentities TArray<EPlayerCharacterIdentity>
---@field bLobbyGameStarted boolean
---@field HostPlatform EGamePlatform
---@field bBigHeads boolean
---@field GlobalVariableScores TArray<float>
---@field JoinPlayerStateRecord APlayerState
---@field TrackedCollectibles TArray<FCollectibleData>
---@field GlobalMusicOverride UMusicSettings
---@field bPlaygroundBuildingsInvulnerable boolean
---@field bHasDoneInitialPlaygroundsSave boolean
ASurvivalGameState = {}

---@param GlobalVariableID FGuid
---@param Event FUnRegisterGlobalVariableChangedEventEvent
function ASurvivalGameState:UnRegisterGlobalVariableChangedEvent(GlobalVariableID, Event) end
function ASurvivalGameState:TriggerGameStartViaLobby() end
function ASurvivalGameState:SignalGameWon() end
---@param NewUserMapCode FString
function ASurvivalGameState:SetUserMapCode(NewUserMapCode) end
---@param MusicSettings UMusicSettings
function ASurvivalGameState:SetPreviewMusicOverride(MusicSettings) end
---@param bInvulnerable boolean
function ASurvivalGameState:SetPlaygroundBuildingsInvulnerable(bInvulnerable) end
---@param bHasPrivilege boolean
function ASurvivalGameState:SetLocalUserHaveUserGeneratedContentPrivilege(bHasPrivilege) end
---@param InCutscene boolean
function ASurvivalGameState:SetInCutscene(InCutscene) end
---@param MusicSettings UMusicSettings
function ASurvivalGameState:SetGlobalMusicOverride(MusicSettings) end
---@param LevelTag FGameplayTag
function ASurvivalGameState:SetCurrentLevelTag(LevelTag) end
---@param bState boolean
function ASurvivalGameState:ServerSetBigHeads(bState) end
function ASurvivalGameState:ServerBroadcastMemTrackingValues() end
---@param GlobalVariableID FGuid
---@param Event FRegisterGlobalVariableChangedEventEvent
function ASurvivalGameState:RegisterGlobalVariableChangedEvent(GlobalVariableID, Event) end
---@param Cue USoundCue
---@param Location FVector
function ASurvivalGameState:PlayAudioAtLocation(Cue, Location) end
function ASurvivalGameState:OnRep_UserMapCode() end
function ASurvivalGameState:OnRep_MemValues() end
function ASurvivalGameState:OnRep_LobbyPlayerCharacterIdentities() end
function ASurvivalGameState:OnRep_LobbyGameStarted() end
function ASurvivalGameState:OnRep_HostPlatform() end
---@param FailedToSpawnFactions TArray<FGameplayTag>
function ASurvivalGameState:MulticastWaveSpawnFailed(FailedToSpawnFactions) end
---@param ManualWave boolean
---@param InInstigator AActor
function ASurvivalGameState:MulticastWaveSpawned(ManualWave, InInstigator) end
---@param Composition TArray<FWaveCompositionData>
function ASurvivalGameState:MulticastWaveCompositionChanged(Composition) end
---@param Reason EWaveCompletionReason
function ASurvivalGameState:MulticastWaveComplete(Reason) end
---@param AttackState EWaveAttackState
function ASurvivalGameState:MulticastWaveAttackStateChanged(AttackState) end
---@param Effect UVisualEffect
---@param Location FVector
function ASurvivalGameState:MulticastPlayVFXLocation(Effect, Location) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param Location FVector_NetQuantize
function ASurvivalGameState:MulticastPlayItemConsumeAudioAtLocation(ItemRowHandle, Location) end
---@param Cue USoundCue
---@param Location FVector_NetQuantize
function ASurvivalGameState:MulticastPlayAudioAtLocation(Cue, Location) end
---@param PlayerState APlayerState
---@param Reason EPlayerDisconnectReason
function ASurvivalGameState:MulticastNotifyPlayerLeave(PlayerState, Reason) end
---@param PlayerState APlayerState
function ASurvivalGameState:MulticastNotifyPlayerJoin(PlayerState) end
---@param PlayerState APlayerState
---@param DeathInfo FDeathInfo
function ASurvivalGameState:MulticastNotifyPlayerDown(PlayerState, DeathInfo) end
---@param PetName FString
---@param DeathInfo FDeathInfo
function ASurvivalGameState:MulticastNotifyPetDown(PetName, DeathInfo) end
---@param ToPlayer ASurvivalPlayerCharacter
---@param PetName FString
function ASurvivalGameState:MulticastNotifyPetDeparted(ToPlayer, PetName) end
function ASurvivalGameState:MulticastNotifyEndOfEarlyAccessContent() end
---@param Data FCollectibleData
function ASurvivalGameState:MarkTrackedCollectiblesDirty(Data) end
---@return boolean
function ASurvivalGameState:IsDefensePointActive() end
---@return boolean
function ASurvivalGameState:IsBossActive() end
---@param Result ESaveGameResult
---@param SaveType ESaveGameType
function ASurvivalGameState:HandleSaveComplete(Result, SaveType) end
---@param LoadedVersion FGameVersion
---@param GamePackageType EGamePackageType
function ASurvivalGameState:HandlePatchSaveGameRepair(LoadedVersion, GamePackageType) end
function ASurvivalGameState:HandleNewGamePlusTriggerLogic() end
function ASurvivalGameState:HandleNewGamePlusPreTriggerLogic() end
function ASurvivalGameState:HandleEndEarlyAccessConent() end
function ASurvivalGameState:HandleBeginNewGamePlusTransition() end
---@return TArray<AWaveSpawnRegionVolume>
function ASurvivalGameState:GetWaveSpawnRegions() end
---@return TArray<FCollectibleData>
function ASurvivalGameState:GetTrackedCollectibles() end
---@return int32
function ASurvivalGameState:GetTotalMilkMolarCount() end
---@return ATimeOfDayLightingManager
function ASurvivalGameState:GetTimeOfDayManager() end
---@return UMusicSettings
function ASurvivalGameState:GetPreviewlMusicOverride() end
---@return boolean
function ASurvivalGameState:GetPlaygroundBuildingsInvulnerable() end
---@return AItemSpawnManager
function ASurvivalGameState:GetItemSpawnManager() end
---@return boolean
function ASurvivalGameState:GetInCutscene() end
---@return UHUDMarkerManagerComponent
function ASurvivalGameState:GetHUDMarkerManagerComponent() end
---@return UMusicSettings
function ASurvivalGameState:GetGlobalMusicOverride() end
---@return UFoliageManagerComponent
function ASurvivalGameState:GetFoliageManagerComponent() end
---@param CollectType ECollectibleType
---@param CollectState ECollectibleState
---@return int32
function ASurvivalGameState:GetCollectibleCount(CollectType, CollectState) end
---@return boolean
function ASurvivalGameState:GetBigHeadsState() end
---@return UAmbienceManager
function ASurvivalGameState:GetAmbienceManager() end
---@return UDefensePointComponent
function ASurvivalGameState:GetActiveDefensePoint() end
---@param PlayerCharacter ASurvivalPlayerCharacter
---@return ABossManager
function ASurvivalGameState:GetActiveBossForPlayer(PlayerCharacter) end
---@return boolean
function ASurvivalGameState:DoesLocalUserHaveUserGeneratedContentPrivilege() end
function ASurvivalGameState:ClearPreviewMusicOverride() end
function ASurvivalGameState:ClearGlobalMusicOverride() end
---@param PlayerState ASurvivalPlayerState
---@return FPostGameReport
function ASurvivalGameState:CalculatePostGameReport(PlayerState) end
function ASurvivalGameState:CacheCollectibles() end
function ASurvivalGameState:BigHeads() end


---@class ASurvivalPlayerCharacter : ASurvivalCharacter
---@field ShadowMeshVisibilityTick FActorCustomTickFunction
---@field OnGuidChanged FSurvivalPlayerCharacterOnGuidChanged
---@field OnSpyGlassStateChanged FSurvivalPlayerCharacterOnSpyGlassStateChanged
---@field OnScanTargetChanged FSurvivalPlayerCharacterOnScanTargetChanged
---@field SpyGlassModeInputRotationScale float
---@field SpyGlassModeStickInputRotationScale float
---@field IsInSpyGlassMode boolean
---@field bOverrideSpyGlassDOFRadius boolean
---@field bOverrideSpyGlassDOFAmount boolean
---@field SpyGlassDOFBlurRadius float
---@field SpyGlassDOFBlurAmount float
---@field SpyGlassFOV float
---@field BestiaryTargetScanRange float
---@field OnActivePetChanged FSurvivalPlayerCharacterOnActivePetChanged
---@field OnPetTamed FSurvivalPlayerCharacterOnPetTamed
---@field OnRest FSurvivalPlayerCharacterOnRest
---@field OnInteractableChanged FSurvivalPlayerCharacterOnInteractableChanged
---@field OnEnemyChanged FSurvivalPlayerCharacterOnEnemyChanged
---@field OnInteract FSurvivalPlayerCharacterOnInteract
---@field InteractableInRange TScriptInterface<IInteractableInterface>
---@field InteractableInRangeOnClient TScriptInterface<IInteractableInterface>
---@field TemporarilyDeinstancedInteractableInRange TScriptInterface<IInteractableInterface>
---@field TemporarilyDeinstancedInteractableBuildingKeyInRange FBuildingGridBuildingId
---@field InteractableFoliageKeyInRange FFoliageKey
---@field InteractableFoliageKeyInRangeOnClient FFoliageKey
---@field InteractableBuildingKeyInRange FBuildingGridBuildingId
---@field InteractableBuildingKeyInRangeOnClient FBuildingGridBuildingId
---@field LastServerTraceTimeForClient float
---@field bSkipServerTraceCooldown boolean
---@field OnAttackTargetChanged FSurvivalPlayerCharacterOnAttackTargetChanged
---@field AttackTargetInRange TScriptInterface<IInteractableInterface>
---@field OnPlayerColorChangedDelegate FSurvivalPlayerCharacterOnPlayerColorChangedDelegate
---@field OnChat FSurvivalPlayerCharacterOnChat
---@field OnUseItem FSurvivalPlayerCharacterOnUseItem
---@field OnAttackResolutionChanged FSurvivalPlayerCharacterOnAttackResolutionChanged
---@field OnPlayerBusyInMenuChanged FSurvivalPlayerCharacterOnPlayerBusyInMenuChanged
---@field OnBuildingCanceledByCombat FSurvivalPlayerCharacterOnBuildingCanceledByCombat
---@field OnBuildModeStateChanged FSurvivalPlayerCharacterOnBuildModeStateChanged
---@field SmoothingControlRotationToZero boolean
---@field InteractionInitialControlPitch float
---@field PhotoModeComponent UMainePhotoModeComponent
---@field FPCOverlayComponent UFPCOverlayComponent
---@field HeatHazardComponent UHeatHazardComponent
---@field SpyGlassMontage UAnimMontage
---@field isQuittingToMainMenu boolean
---@field bPlayerTakesDamageUnpossessed boolean
---@field bPlayerBusyInMenu boolean
---@field bPlayerInBuildMode boolean
---@field WidgetMan UWidgetManager
---@field DropItemMontage UAnimMontage
---@field PersistenceComponent UPersistenceComponent
---@field InventoryComponent UInventoryComponent
---@field EquipmentComponent UEquipmentComponent
---@field SurvivalComponent USurvivalComponent
---@field HaulingComponent UHaulingComponent
---@field StaminaComponent UStaminaComponent
---@field BuildingPlacementComponent UBuildingPlacementComponent
---@field TriggerConnectorComponent UTriggerConnectorComponent
---@field HeadArmorMeshComponent USkeletalMeshComponent
---@field ChestArmorMeshComponent USkeletalMeshComponent
---@field ArmsArmorMeshComponent USkeletalMeshComponent
---@field LegsArmorMeshComponent USkeletalMeshComponent
---@field HairMeshComponent USkeletalMeshComponent
---@field ThirdPersonShadowCharacterMeshComponent USkeletalMeshComponent
---@field ThirdPersonShadowBackpackMeshComponent USkeletalMeshComponent
---@field ThirdPersonShadowSCABMeshComponent USkeletalMeshComponent
---@field ThirdPersonShadowHeadMeshComponent USkeletalMeshComponent
---@field ThirdPersonShadowHairMeshComponent USkeletalMeshComponent
---@field ScreenEffectComponent UScreenEffectComponent
---@field CozinessEvaluatorComponent UCozinessEvaluatorComponent
---@field ProximityInventoryComponent UProximityInventoryComponent
---@field TransmissionReceiverComponent UTransmissionReceiverComponent
---@field CharacterIdentity EPlayerCharacterIdentity
---@field InteractTraceLength float
---@field ClientInteractTraceBuffer float
---@field bIsInteracting boolean
---@field bIsCancelling boolean
---@field bIsDropping boolean
---@field bIsInteractHoldAnim boolean
---@field bIsTriggerHolding boolean
---@field bIsEditModeHolding boolean
---@field bIsEditModeHoldPressedTriggered boolean
---@field InteractTimerMax float
---@field DropInteractTimerMax float
---@field CancelInteractTimerMax float
---@field CurrentInteractable AActor
---@field CurrentInteractionChannel EInteractionChannel
---@field ThirdPersonZeroDistance float
---@field ThirdPersonBufferDistance float
---@field BuildModeInteractionRangeMultiplier float
---@field RunFOVAdjustment float
---@field RunFOVAdjustmentSpeed float
---@field PlayerColor FColor
---@field PlayerGuid FGuid
---@field RequestingRest boolean
---@field Backpack TSubclassOf<ALootBag>
---@field bInterior boolean
---@field FireLightAnim UAnimMontage
---@field HairAppearance UBaseAppearanceData
---@field GasMaskSubMix USoundSubmix
---@field CombatTrackers TArray<FPlayerCombatTracker>
---@field CurrentPetFull ASurvivalCreature
---@field SpyGlassBlurMaterial UMaterialInterface
---@field TeleportFirstPersonMaterial TSoftObjectPtr<UMaterialInterface>
---@field TeleportFirstPersonMID UMaterialInstanceDynamic
---@field TeleportFirstPersonStartTime float
---@field TeleportAlphaCurve UCurveFloat
---@field TeleportAlphaEffectsCurve UCurveFloat
---@field TeleportGainColorCurve UCurveLinearColor
---@field LastValidPlayerState ASurvivalPlayerState
---@field CurrentBlendTrigger AActor
---@field WaveBlockingBlendTrigger AActor
---@field ThirdPersonShadowEquipment TMap<EEquipmentSlot, FThirdPersonShadowVisuals>
---@field TelemetryComponent UTelemetryComponent
---@field ShadowsDisabledForWave boolean
---@field CheatLoadouts TArray<FItemBatch>
---@field CheatStatusEffects TArray<FStatusEffectBatch>
ASurvivalPlayerCharacter = {}

---@param ItemRow FDataTableRowHandle
---@param bEquip boolean
---@return boolean
function ASurvivalPlayerCharacter:TryPickupItemRow(ItemRow, bEquip) end
---@param Item UItem
---@param bEquip boolean
---@return boolean
function ASurvivalPlayerCharacter:TryPickupItem(Item, bEquip) end
function ASurvivalPlayerCharacter:ToggleEditMode() end
---@return EAttackResolutionType
function ASurvivalPlayerCharacter:TestCurrentAttack() end
---@param Channel EInteractionChannel
---@return boolean
function ASurvivalPlayerCharacter:ShouldShowTargetInteractionInterface(Channel) end
---@param bEnabled boolean
function ASurvivalPlayerCharacter:SetSpyGlassOverlay(bEnabled) end
---@param NewState ESocialRadialState
function ASurvivalPlayerCharacter:SetSocialRadialState(NewState) end
---@param ChairBuilding AChairBuilding
function ASurvivalPlayerCharacter:SetSitting(ChairBuilding) end
---@param BlendTrigger AActor
---@param BlocksWaves boolean
function ASurvivalPlayerCharacter:SetBlendTrigger(BlendTrigger, BlocksWaves) end
function ASurvivalPlayerCharacter:ServerUndo() end
function ASurvivalPlayerCharacter:ServerThrowItem() end
function ASurvivalPlayerCharacter:ServerTeleportPartyNear() end
---@param WithBuilding APetHomeBuilding
function ASurvivalPlayerCharacter:ServerStoreOrSwapPet(WithBuilding) end
function ASurvivalPlayerCharacter:ServerStartThrow() end
function ASurvivalPlayerCharacter:ServerStandup() end
---@param Inventory UInventoryComponent
function ASurvivalPlayerCharacter:ServerSortInventory(Inventory) end
---@param PlayerIsInBuildMode boolean
function ASurvivalPlayerCharacter:ServerShowPlayerIsInBuildMode(PlayerIsInBuildMode) end
---@param PlayerBusyInMenu boolean
function ASurvivalPlayerCharacter:ServerShowPlayerIsBusyInMenu(PlayerBusyInMenu) end
---@param RestActor AActor
function ASurvivalPlayerCharacter:ServerSetRespawn(RestActor) end
---@param StorageBuilding AStorageBuilding
---@param bIgnore boolean
function ASurvivalPlayerCharacter:ServerSetIgnoreMassDeposit(StorageBuilding, bIgnore) end
---@param NewMode EEditMode
function ASurvivalPlayerCharacter:ServerSetEditMode(NewMode) end
---@param BlendTrigger AActor
---@param BlocksWaves boolean
function ASurvivalPlayerCharacter:ServerSetBlendTrigger(BlendTrigger, BlocksWaves) end
---@param AmmoItem UItem
function ASurvivalPlayerCharacter:ServerSelectAmmoType(AmmoItem) end
function ASurvivalPlayerCharacter:ServerRevive() end
---@param TechTreeRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerCharacter:ServerRequestTechTreeRecipePurchase(TechTreeRowHandle) end
---@param Tag FGameplayTag
---@param Weight int32
---@param Finalize boolean
---@param SpawnerInventory UInventoryComponent
function ASurvivalPlayerCharacter:ServerRequestSpawnWave(Tag, Weight, Finalize, SpawnerInventory) end
---@param aRestActor AActor
function ASurvivalPlayerCharacter:ServerRequestRest(aRestActor) end
---@param ProcessingBuilding AItemProcessingBuilding
---@param ItemToProcess UItem
function ASurvivalPlayerCharacter:ServerRequestProcessItem(ProcessingBuilding, ItemToProcess) end
---@param Building ABuilding
---@param IconVariant int32
---@param ColorVariant int32
function ASurvivalPlayerCharacter:ServerRequestHUDMarkerUpdate(Building, IconVariant, ColorVariant) end
---@param ProcessingBuilding AItemProcessingBuilding
---@param ItemToCancel UItem
function ASurvivalPlayerCharacter:ServerRequestCancelProcessItem(ProcessingBuilding, ItemToCancel) end
---@param Item UItem
function ASurvivalPlayerCharacter:ServerRepairItem(Item) end
---@param Creature ASurvivalCreature
---@param NewName FText
function ASurvivalPlayerCharacter:ServerRenamePet(Creature, NewName) end
function ASurvivalPlayerCharacter:ServerRemoveWaypoint() end
function ASurvivalPlayerCharacter:ServerRemoveResourceWaypoint() end
function ASurvivalPlayerCharacter:ServerRemoveCharacterFromSaveData() end
function ASurvivalPlayerCharacter:ServerReleaseThrow() end
function ASurvivalPlayerCharacter:ServerReleaseAttack() end
function ASurvivalPlayerCharacter:ServerRedo() end
---@param Actor AActor
---@param Foliage FFoliageKey
---@param Building FBuildingGridBuildingId
function ASurvivalPlayerCharacter:ServerReceiveClientInteractableInRange(Actor, Foliage, Building) end
function ASurvivalPlayerCharacter:ServerPowerSwitchPressed() end
---@param WorldLocation FVector
function ASurvivalPlayerCharacter:ServerPlaceResourceWaypoint(WorldLocation) end
function ASurvivalPlayerCharacter:ServerOpenPetInventory() end
function ASurvivalPlayerCharacter:ServerNotifyIntroTriggerReady() end
function ASurvivalPlayerCharacter:ServerKill() end
---@param StartWireInteractionType ETriggerObjectType
function ASurvivalPlayerCharacter:ServerInteractWirePlacement(StartWireInteractionType) end
---@param Target AActor
function ASurvivalPlayerCharacter:ServerInteractRemoveWire(Target) end
---@param MatchingFoliageKey FFoliageKey
function ASurvivalPlayerCharacter:ServerInteractRelocateFoliage(MatchingFoliageKey) end
---@param MatchingBuildingKey FBuildingGridBuildingId
function ASurvivalPlayerCharacter:ServerInteractRelocateBuilding(MatchingBuildingKey) end
---@param InteractableObject UObject
function ASurvivalPlayerCharacter:ServerInteractRelocateActor(InteractableObject) end
function ASurvivalPlayerCharacter:ServerInputPlaceMapMarkerPressed() end
function ASurvivalPlayerCharacter:ServerInputPeepPressed() end
---@param Item UItem
function ASurvivalPlayerCharacter:ServerHotDrop(Item) end
---@param HoldChannel EInteractionChannel
---@param InteractableObject UObject
---@param MatchingFoliageKey FFoliageKey
function ASurvivalPlayerCharacter:ServerHoldInteractSecondaryFoliage(HoldChannel, InteractableObject, MatchingFoliageKey) end
---@param HoldChannel EInteractionChannel
---@param InteractableObject UObject
---@param MatchingBuildingKey FBuildingGridBuildingId
function ASurvivalPlayerCharacter:ServerHoldInteractSecondaryBuilding(HoldChannel, InteractableObject, MatchingBuildingKey) end
---@param HoldChannel EInteractionChannel
---@param InteractableObject UObject
function ASurvivalPlayerCharacter:ServerHoldInteractSecondaryActor(HoldChannel, InteractableObject) end
function ASurvivalPlayerCharacter:ServerHoldAttack() end
function ASurvivalPlayerCharacter:ServerHandleInteractCancel() end
function ASurvivalPlayerCharacter:ServerHandleInteract() end
---@param InteractableObject UObject
---@param MatchingFoliageKey FFoliageKey
function ASurvivalPlayerCharacter:ServerHandleHoldInteractFoliage(InteractableObject, MatchingFoliageKey) end
---@param InteractableObject UObject
---@param MatchingBuildingKey FBuildingGridBuildingId
function ASurvivalPlayerCharacter:ServerHandleHoldInteractBuilding(InteractableObject, MatchingBuildingKey) end
---@param InteractableObject UObject
function ASurvivalPlayerCharacter:ServerHandleHoldInteractActor(InteractableObject) end
function ASurvivalPlayerCharacter:ServerHandleFireInteract() end
function ASurvivalPlayerCharacter:ServerHandleDropHoldCancel() end
---@param InteractableObject UObject
function ASurvivalPlayerCharacter:ServerHandleDrop(InteractableObject) end
function ASurvivalPlayerCharacter:ServerFullRestore() end
function ASurvivalPlayerCharacter:ServerExitSpyGlassMode() end
function ASurvivalPlayerCharacter:ServerExitSplineClimbing() end
function ASurvivalPlayerCharacter:ServerExitMotionEater() end
function ASurvivalPlayerCharacter:ServerEnterSpyGlassMode() end
---@param InteractableObject UObject
---@param MatchingFoliageKey FFoliageKey
---@param HoldChannel EInteractionChannel
---@param HoldInteractType EInteractHoldHandleType
function ASurvivalPlayerCharacter:ServerEndHoldInteractFoliage(InteractableObject, MatchingFoliageKey, HoldChannel, HoldInteractType) end
---@param InteractableObject UObject
---@param MatchingBuildingKey FBuildingGridBuildingId
---@param HoldChannel EInteractionChannel
---@param HoldInteractType EInteractHoldHandleType
function ASurvivalPlayerCharacter:ServerEndHoldInteractBuilding(InteractableObject, MatchingBuildingKey, HoldChannel, HoldInteractType) end
---@param InteractableObject UObject
---@param HoldChannel EInteractionChannel
---@param HoldInteractType EInteractHoldHandleType
function ASurvivalPlayerCharacter:ServerEndHoldInteractActor(InteractableObject, HoldChannel, HoldInteractType) end
function ASurvivalPlayerCharacter:ServerDepositSimilarItemsToNearbyStorage() end
---@param SpawnerInventory UInventoryComponent
function ASurvivalPlayerCharacter:ServerClearWaveSpawnerInventory(SpawnerInventory) end
function ASurvivalPlayerCharacter:ServerCheatWalk() end
---@param Actor AActor
function ASurvivalPlayerCharacter:ServerCheatTryKill(Actor) end
---@param Location FVector
function ASurvivalPlayerCharacter:ServerCheatTeleport(Location) end
---@param Index int32
function ASurvivalPlayerCharacter:ServerCheatSetPerkLoadout(Index) end
---@param Index int32
function ASurvivalPlayerCharacter:ServerCheatSetLoadout(Index) end
---@param Level int32
function ASurvivalPlayerCharacter:ServerCheatSetBonusEnhancementLevel(Level) end
function ASurvivalPlayerCharacter:ServerCheatGod() end
function ASurvivalPlayerCharacter:ServerCheatGhost() end
function ASurvivalPlayerCharacter:ServerCheatFullRestore() end
function ASurvivalPlayerCharacter:ServerCheatFly() end
---@param Speed float
function ASurvivalPlayerCharacter:ServerCheatFast(Speed) end
function ASurvivalPlayerCharacter:ServerCheatBuildAllBuildings() end
---@param InteractableObject UObject
---@param MatchingBuildingKey FBuildingGridBuildingId
function ASurvivalPlayerCharacter:ServerBeginHoldInteract(InteractableObject, MatchingBuildingKey) end
---@param Location FVector
function ASurvivalPlayerCharacter:ServerAddWaypoint(Location) end
---@param ItemType FDataTableRowHandle_NetCrc
---@param Count int32
---@param TryBuilderPawn boolean
function ASurvivalPlayerCharacter:ServerAddItems(ItemType, Count, TryBuilderPawn) end
---@return boolean
function ASurvivalPlayerCharacter:RequestedRest() end
---@param bShow boolean
function ASurvivalPlayerCharacter:PlayerDebug(bShow) end
---@param RowName FName
function ASurvivalPlayerCharacter:PlaceSpawnedItem(RowName) end
---@param RowName FName
function ASurvivalPlayerCharacter:PlaceHarvestNode(RowName) end
---@param RowName FName
function ASurvivalPlayerCharacter:PlaceCharacter(RowName) end
---@param RowName FName
function ASurvivalPlayerCharacter:PlaceBuilding(RowName) end
function ASurvivalPlayerCharacter:OnWidgetStackChanged() end
function ASurvivalPlayerCharacter:OnViewControlBlendCompleteEvent() end
---@param InPlacement boolean
function ASurvivalPlayerCharacter:OnTriggerConnectionModeChanged(InPlacement) end
---@param CurrentStamina float
function ASurvivalPlayerCharacter:OnStaminaDepleted(CurrentStamina) end
function ASurvivalPlayerCharacter:OnRep_PlayerInBuildMode() end
function ASurvivalPlayerCharacter:OnRep_PlayerGuid() end
function ASurvivalPlayerCharacter:OnRep_PlayerColor() end
function ASurvivalPlayerCharacter:OnRep_PlayerBusyInMenu() end
function ASurvivalPlayerCharacter:OnRep_Interior() end
function ASurvivalPlayerCharacter:OnRep_CurrentPetFull() end
---@param CurrentMode EEditMode
---@param NewMode EEditMode
function ASurvivalPlayerCharacter:OnPreEditModeChanged(CurrentMode, NewMode) end
function ASurvivalPlayerCharacter:OnIntroFadeInDebug() end
---@param IsGliding boolean
function ASurvivalPlayerCharacter:OnGliderMovementModeChanged(IsGliding) end
---@param OldMode EEditMode
---@param NewMode EEditMode
function ASurvivalPlayerCharacter:OnEditModeChanged(OldMode, NewMode) end
function ASurvivalPlayerCharacter:OnControllerDisconnected() end
---@param BarrierName FName
---@param ShouldExecuteBarrier boolean
function ASurvivalPlayerCharacter:OnAllPlayersArrivedAtBarrierIntroTrigger(BarrierName, ShouldExecuteBarrier) end
---@param Interactable UObject
---@param WarningText FText
function ASurvivalPlayerCharacter:NotifyInteractError(Interactable, WarningText) end
---@param BarrierName FName
---@param ShouldExecuteBarrier boolean
function ASurvivalPlayerCharacter:NativeOnAllPlayersArrivedAtBarrierIntroTrigger(BarrierName, ShouldExecuteBarrier) end
---@return boolean
function ASurvivalPlayerCharacter:NativeIsCheatCommandAllowed() end
---@param AnimMontage TSoftObjectPtr<UAnimMontage>
function ASurvivalPlayerCharacter:MulticastStopWeaponMontageSoft(AnimMontage) end
---@param AttackRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerCharacter:MulticastStopWeaponMontage(AttackRowHandle) end
function ASurvivalPlayerCharacter:MulticastShowCharacterAfterIntro() end
---@param AnimMontage TSoftObjectPtr<UAnimMontage>
---@param SectionToSet FName_NetCrc
---@param NextSection FName_NetCrc
---@param JumpIfNotInSection boolean
function ASurvivalPlayerCharacter:MulticastSetWeaponMontageNextSectionSoftCrc(AnimMontage, SectionToSet, NextSection, JumpIfNotInSection) end
---@param AnimMontage TSoftObjectPtr<UAnimMontage>
---@param SectionToSet FName
---@param NextSection FName
---@param JumpIfNotInSection boolean
function ASurvivalPlayerCharacter:MulticastSetWeaponMontageNextSectionSoft(AnimMontage, SectionToSet, NextSection, JumpIfNotInSection) end
---@param AttackRowHandle FDataTableRowHandle_NetCrc
---@param SectionToSet FName_NetCrc
---@param NextSection FName_NetCrc
---@param JumpIfNotInSection boolean
function ASurvivalPlayerCharacter:MulticastSetWeaponMontageNextSectionCrc(AttackRowHandle, SectionToSet, NextSection, JumpIfNotInSection) end
---@param AnimMontage TSoftObjectPtr<UAnimMontage>
function ASurvivalPlayerCharacter:MulticastPlayWeaponMontageSoft(AnimMontage) end
---@param AttackRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerCharacter:MulticastPlayWeaponMontage(AttackRowHandle) end
function ASurvivalPlayerCharacter:MulticastHideCharacterForIntro() end
---@param OriginalPawn APawn
function ASurvivalPlayerCharacter:MulticastFixupPoseableClone(OriginalPawn) end
function ASurvivalPlayerCharacter:KillMe() end
---@return boolean
function ASurvivalPlayerCharacter:IsThrowing() end
---@param Channel EInteractionChannel
---@return boolean
function ASurvivalPlayerCharacter:IsTargetInteractionEnabled(Channel) end
---@param Inventory UInventoryComponent
---@return boolean
function ASurvivalPlayerCharacter:IsRequestedInventory(Inventory) end
---@return boolean
function ASurvivalPlayerCharacter:IsPhotoModeClone() end
---@return boolean
function ASurvivalPlayerCharacter:IsInCinematicMode() end
---@return boolean
function ASurvivalPlayerCharacter:IsChargingThrow() end
---@return boolean
function ASurvivalPlayerCharacter:IsChargingAttack() end
function ASurvivalPlayerCharacter:InputUndo() end
function ASurvivalPlayerCharacter:InputToggleEditModeReleased() end
function ASurvivalPlayerCharacter:InputToggleEditModePressed() end
function ASurvivalPlayerCharacter:InputRedo() end
function ASurvivalPlayerCharacter:InputOpenSocialRadial() end
function ASurvivalPlayerCharacter:InputHotBarPrevious() end
function ASurvivalPlayerCharacter:InputHotBarNext() end
---@param bCheckVisible boolean
---@return boolean
function ASurvivalPlayerCharacter:HasWeapon(bCheckVisible) end
---@param bCheckVisible boolean
---@return boolean
function ASurvivalPlayerCharacter:HasOffhand(bCheckVisible) end
---@return boolean
function ASurvivalPlayerCharacter:HasLitFire() end
---@param bUsingGamepad boolean
function ASurvivalPlayerCharacter:HandleUsingGamepadChanged(bUsingGamepad) end
---@param NewValue EControlSprintMode
function ASurvivalPlayerCharacter:HandleSprintModeOptionChanged(NewValue) end
---@param PreviousState ESizzleState
---@param CurrentState ESizzleState
function ASurvivalPlayerCharacter:HandleSizzleStateChanged(PreviousState, CurrentState) end
---@param Sender UHealthComponent
function ASurvivalPlayerCharacter:HandleRevive(Sender) end
---@param Sender UEquipmentComponent
---@param Item UItem
function ASurvivalPlayerCharacter:HandleEquipmentVisualsChanged(Sender, Item) end
---@param CurrentItem UItem
---@param Slot EEquipmentSlot
function ASurvivalPlayerCharacter:HandleEquipmentChanged(CurrentItem, Slot) end
---@param LODActor UBaseLODActor
function ASurvivalPlayerCharacter:HandleCurrentPetLODActorConvertedToProxyActor(LODActor) end
---@param LODActor UBaseLODActor
function ASurvivalPlayerCharacter:HandleCurrentPetLODActorConvertedToFullActor(LODActor) end
---@param Sender UCozinessEvaluatorComponent
---@param OldLevel int32
function ASurvivalPlayerCharacter:HandleCozinessLevelChanged(Sender, OldLevel) end
---@return AActor
function ASurvivalPlayerCharacter:GetWaveBlockingBlendTrigger() end
---@return float
function ASurvivalPlayerCharacter:GetTriggerHoldInteractTimerMax() end
---@return float
function ASurvivalPlayerCharacter:GetTriggerHoldInteractTimer() end
---@param Channel EInteractionChannel
---@return FString
function ASurvivalPlayerCharacter:GetTargetInteractionText(Channel) end
---@return ESocialRadialState
function ASurvivalPlayerCharacter:GetSocialRadialState() end
---@return USkeletalMeshComponent
function ASurvivalPlayerCharacter:GetSCABMesh() end
---@return ABuilding
function ASurvivalPlayerCharacter:GetPendingBuilding() end
---@return boolean
function ASurvivalPlayerCharacter:GetIsTriggerHolding() end
---@return boolean
function ASurvivalPlayerCharacter:GetIsPlacingActor() end
---@return boolean
function ASurvivalPlayerCharacter:GetIsInteracting() end
---@return boolean
function ASurvivalPlayerCharacter:GetIsEditModeHoldPressedTriggered() end
---@return boolean
function ASurvivalPlayerCharacter:GetIsEditModeHolding() end
---@return boolean
function ASurvivalPlayerCharacter:GetIsDropping() end
---@return boolean
function ASurvivalPlayerCharacter:GetIsCancellingInteract() end
---@return float
function ASurvivalPlayerCharacter:GetInteractTimerMax() end
---@return float
function ASurvivalPlayerCharacter:GetInteractTimer() end
---@return USkeletalMeshComponent
function ASurvivalPlayerCharacter:GetHeadMesh() end
---@return float
function ASurvivalPlayerCharacter:GetEditModeHoldTimerMax() end
---@return float
function ASurvivalPlayerCharacter:GetEditModeHoldTimer() end
---@param Item UItem
---@param Offset FVector
---@return FTransform
function ASurvivalPlayerCharacter:GetDropItemTransform(Item, Offset) end
---@return FVector
function ASurvivalPlayerCharacter:GetDropItemDirection() end
---@return float
function ASurvivalPlayerCharacter:GetDropInteractTimerMax() end
---@return float
function ASurvivalPlayerCharacter:GetDropInteractTimer() end
---@return ASurvivalCreature
function ASurvivalPlayerCharacter:GetCurrentPetFull() end
---@return UCreatureLODActor
function ASurvivalPlayerCharacter:GetCurrentPet() end
---@return AActor
function ASurvivalPlayerCharacter:GetCurrentBlendTrigger() end
---@return EPlayerCharacterIdentity
function ASurvivalPlayerCharacter:GetCharacterIdentity() end
---@return float
function ASurvivalPlayerCharacter:GetCancelInteractTimerMax() end
---@return float
function ASurvivalPlayerCharacter:GetCancelInteractTimer() end
---@return USkeletalMeshComponent
function ASurvivalPlayerCharacter:GetBackPackMesh() end
---@return float
function ASurvivalPlayerCharacter:GetAimPitch() end
---@param Speed float
function ASurvivalPlayerCharacter:Fast(Speed) end
function ASurvivalPlayerCharacter:ExitSpyGlassMode() end
---@param bSuccess boolean
function ASurvivalPlayerCharacter:ExitPlacementMode(bSuccess) end
function ASurvivalPlayerCharacter:EnterSpyGlassMode() end
---@param BuildingData FDataTableRowHandle
---@param bAutoAddIngredients boolean
---@param bDeployable boolean
---@param bIsActorPlacement boolean
function ASurvivalPlayerCharacter:EnterPlacementMode(BuildingData, bAutoAddIngredients, bDeployable, bIsActorPlacement) end
---@param HoldInteractType EInteractHoldHandleType
function ASurvivalPlayerCharacter:EndHoldInteraction(HoldInteractType) end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function ASurvivalPlayerCharacter:DamagedServerOnlyCallback(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
function ASurvivalPlayerCharacter:ClientUpdateThirdPersonShadowEquipment() end
---@param Enemy ASurvivalCharacter
function ASurvivalPlayerCharacter:ClientSetEnemy(Enemy) end
---@param Player APlayerState
---@param BarrierName FName
---@param ShouldExecuteBarrier boolean
function ASurvivalPlayerCharacter:ClientOnPlayerArrivedAtBarrierIntroTrigger(Player, BarrierName, ShouldExecuteBarrier) end
function ASurvivalPlayerCharacter:ClientOnIntroTriggerOverlap() end
function ASurvivalPlayerCharacter:ClientNotifyStorageFull() end
---@param ScanTarget AActor
function ASurvivalPlayerCharacter:ClientNotifyScanTarget(ScanTarget) end
---@param EffectRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerCharacter:ClientNotifyPickupEffect(EffectRowHandle) end
---@param Pet ASurvivalCreature
function ASurvivalPlayerCharacter:ClientNotifyPetTamed(Pet) end
function ASurvivalPlayerCharacter:ClientNotifyNoSimilarItemsDepositedToNearbyStorage() end
function ASurvivalPlayerCharacter:ClientNotifyInventoryFull() end
function ASurvivalPlayerCharacter:ClientNotifyHaulingFull() end
function ASurvivalPlayerCharacter:ClientNotifyFailedToLootDrownedCreature() end
function ASurvivalPlayerCharacter:ClientNotifyDropStorageFull() end
function ASurvivalPlayerCharacter:ClientInitBaseShadowMeshes() end
function ASurvivalPlayerCharacter:ClientExitSpyGlassMode() end
function ASurvivalPlayerCharacter:ClientEnterSpyGlassMode() end
---@param HoldInteractType EInteractHoldHandleType
function ASurvivalPlayerCharacter:ClientEndHoldInteraction(HoldInteractType) end
function ASurvivalPlayerCharacter:ClientClearInteractableInRange() end
---@param Type FGameplayTag
---@param Level int32
function ASurvivalPlayerCharacter:ClientCheatSetBonusEnhancementLevel(Type, Level) end
---@param InteractableObject UObject
---@param InteractChannel EInteractionChannel
---@param bIsHold boolean
function ASurvivalPlayerCharacter:ClientBeginInteract(InteractableObject, InteractChannel, bIsHold) end
function ASurvivalPlayerCharacter:CheatTryKill() end
function ASurvivalPlayerCharacter:CheatBuildingDebugLog() end
---@return boolean
function ASurvivalPlayerCharacter:CanThrowItem() end
---@return boolean
function ASurvivalPlayerCharacter:CanLightFire() end
---@param Interactable UObject
---@param InteractableBuildingKey FBuildingGridBuildingId
---@param InteractionChannel EInteractionChannel
---@return boolean
function ASurvivalPlayerCharacter:CanInteractWith(Interactable, InteractableBuildingKey, InteractionChannel) end
---@return boolean
function ASurvivalPlayerCharacter:CanInteract() end
---@param Item UItem
---@return boolean
function ASurvivalPlayerCharacter:CanDropItem(Item) end
function ASurvivalPlayerCharacter:BroadcastBuildingCanceledByCombat() end
---@param InteractableActor UObject
---@param IsEnteringInteraction boolean
---@param BlendTime float
---@param BlendExp float
function ASurvivalPlayerCharacter:AdjustCameraForInteraction(InteractableActor, IsEnteringInteraction, BlendTime, BlendExp) end
---@param bShow boolean
function ASurvivalPlayerCharacter:AchievementDebug(bShow) end


---@class ASurvivalPlayerController : APlayerController
---@field OnBuildModeStateChanged FSurvivalPlayerControllerOnBuildModeStateChanged
---@field OnRespawn FSurvivalPlayerControllerOnRespawn
---@field OnIneffectiveAttack FSurvivalPlayerControllerOnIneffectiveAttack
---@field OnInteractionWarning FSurvivalPlayerControllerOnInteractionWarning
---@field OnItemUseCooldownBegin FSurvivalPlayerControllerOnItemUseCooldownBegin
---@field OnItemUseCooldownEnd FSurvivalPlayerControllerOnItemUseCooldownEnd
---@field PlayerSFXComponent UPlayerSFXComponent
---@field CustomizeInteractionComponent UCustomizeInteractionComponent
---@field LookStickBaseTurnRate float
---@field LookStickBasePitchRate float
---@field LookStickExponent float
---@field LookStickTurnRampDelay float
---@field LookStickTurnRampTime float
---@field LookStickTurnRampMultiplier float
---@field LookStickMinTurnRateScalar float
---@field LookStickMaxTurnRateScalar float
---@field LookStickInputYawCurve FRuntimeFloatCurve
---@field LookStickInputPitchCurve FRuntimeFloatCurve
---@field BuilderPawnClass TSubclassOf<ABuilderPawn>
---@field BuilderPawn ABuilderPawn
---@field InteractInputComponent UInputComponent
---@field BuildingPlacementInputComponent UInputComponent
---@field BuildModeInputComponent UInputComponent
---@field WirePlacementInputComponent UInputComponent
---@field EditModeHighPriorityInputComponent UInputComponent
---@field EditModeNormalPriorityInputComponent UInputComponent
---@field MotionEaterInputComponent UInputComponent
---@field SplineClimbingInputComponent UInputComponent
---@field PauseInputComponent UInputComponent
---@field SpyGlassInputComponent UInputComponent
---@field EmoteInputComponent UInputComponent
---@field SittingInputComponent UInputComponent
---@field ForcedLookStrength float
---@field AutoLevelSpeed float
---@field PreviousPawn TWeakObjectPtr<APawn>
---@field PhotoModeWidgetClass TSubclassOf<UWindowWidget>
---@field RequestedInventories TArray<AActor>
ASurvivalPlayerController = {}

---@param From UObject
---@param Item UItem
---@return boolean
function ASurvivalPlayerController:TryUseItem(From, Item) end
function ASurvivalPlayerController:ToggleSpectatorMode() end
function ASurvivalPlayerController:TogglePhotoPawnType() end
function ASurvivalPlayerController:TogglePhotoModeUI() end
function ASurvivalPlayerController:TogglePhotoModeSettings() end
function ASurvivalPlayerController:ToggleBuildMode() end
function ASurvivalPlayerController:ShowPhotoModeUI() end
---@param bIsInverted boolean
function ASurvivalPlayerController:SetYAxisInverted(bIsInverted) end
---@param bIsInverted boolean
function ASurvivalPlayerController:SetXAxisInverted(bIsInverted) end
---@param PhotoPawn APhotoPawn
---@param PhotoPawnInputComponent UInputComponent
function ASurvivalPlayerController:SetupPhotoPawnInputs(PhotoPawn, PhotoPawnInputComponent) end
---@param bIsEnabled boolean
function ASurvivalPlayerController:SetRumbleEnabled(bIsEnabled) end
---@param Value float
function ASurvivalPlayerController:SetRightStickOuterDeadZone(Value) end
---@param Value float
function ASurvivalPlayerController:SetRightStickInnerDeadZone(Value) end
---@param Value float
function ASurvivalPlayerController:SetMouseSensitivityY(Value) end
---@param Value float
function ASurvivalPlayerController:SetMouseSensitivityX(Value) end
---@param Value FVector2D
function ASurvivalPlayerController:SetMouseSensitivity(Value) end
---@param bIsEnabled boolean
function ASurvivalPlayerController:SetMotionControlsEnabled(bIsEnabled) end
---@param Value float
function ASurvivalPlayerController:SetLeftStickOuterDeadZone(Value) end
---@param Value float
function ASurvivalPlayerController:SetLeftStickInnerDeadZone(Value) end
---@param Value float
function ASurvivalPlayerController:SetGamepadSensitivityY(Value) end
---@param Value float
function ASurvivalPlayerController:SetGamepadSensitivityX(Value) end
---@param Value FVector2D
function ASurvivalPlayerController:SetGamepadSensitivity(Value) end
---@param InFOV float
function ASurvivalPlayerController:SetFOV(InFOV) end
---@param bIsInverted boolean
function ASurvivalPlayerController:SetControllerMoveYInverted(bIsInverted) end
---@param bIsInverted boolean
function ASurvivalPlayerController:SetControllerMoveXInverted(bIsInverted) end
---@param bIsInverted boolean
function ASurvivalPlayerController:SetControllerLookYInverted(bIsInverted) end
---@param bIsInverted boolean
function ASurvivalPlayerController:SetControllerLookXInverted(bIsInverted) end
---@param bIsEnabled boolean
function ASurvivalPlayerController:SetAdaptiveTriggersEnabled(bIsEnabled) end
---@param From UObject
---@param Item UItem
function ASurvivalPlayerController:ServerUseItem(From, Item) end
---@param ConnectionId int32
---@param NewGroupIndex uint8
function ASurvivalPlayerController:ServerUpdateConnectionGroupIndex(ConnectionId, NewGroupIndex) end
---@param ConnectionId int32
---@param Data TArray<FSelectedEventBehaviorData>
function ASurvivalPlayerController:ServerUpdateConnectionBehaviorData(ConnectionId, Data) end
---@param Building AEquipmentDisplayBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerUnequipDisplayBuilding(Building, Item) end
---@param Creature ASurvivalCreature
---@param Item UItem
function ASurvivalPlayerController:ServerUnequipCreature(Creature, Item) end
---@param Building AProductionBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerTryGetProductionItem(Building, Item) end
---@param Reason EBuildModeExitReason
function ASurvivalPlayerController:ServerTryExitBuildMode(Reason) end
function ASurvivalPlayerController:ServerTryEnterBuildMode() end
function ASurvivalPlayerController:ServerTriggerNewGamePlus() end
function ASurvivalPlayerController:ServerToggleBuildMode() end
---@param Building AEquipmentDisplayBuilding
function ASurvivalPlayerController:ServerSwapDisplayBuilding(Building) end
---@param Actor AActor
function ASurvivalPlayerController:ServerStopRequestInventory(Actor) end
---@param Actors TArray<AActor>
function ASurvivalPlayerController:ServerStopRequestInventories(Actors) end
---@param Actor AActor
function ASurvivalPlayerController:ServerStartRequestInventory(Actor) end
---@param Actors TArray<AActor>
function ASurvivalPlayerController:ServerStartRequestInventories(Actors) end
---@param bInMovie boolean
function ASurvivalPlayerController:ServerSetPlayerInMovie(bInMovie) end
---@param Building APheromoneBroadcasterBuilding
---@param bEnable boolean
function ASurvivalPlayerController:ServerSetPheromoneBroadcasterGatherEnabled(Building, bEnable) end
---@param Building APheromoneBroadcasterBuilding
---@param bEnable boolean
function ASurvivalPlayerController:ServerSetPheromoneBroadcasterBuildEnabled(Building, bEnable) end
---@param Handle FDataTableRowHandle_NetCrc
---@param Visible boolean
function ASurvivalPlayerController:ServerSetFoliageTypeVisibility(Handle, Visible) end
---@param NewMode EEditMode
function ASurvivalPlayerController:ServerSetEditMode(NewMode) end
---@param Building ANotificationBuilding
---@param NewMessage FString
function ASurvivalPlayerController:ServerSetCustomNotification(Building, NewMessage) end
---@param NoteBuilding ACustomWorldNote
---@param NewTitle FString
function ASurvivalPlayerController:ServerSetCustomNoteTitle(NoteBuilding, NewTitle) end
---@param NoteBuilding ACustomWorldNote
---@param NewBody FString
function ASurvivalPlayerController:ServerSetCustomNoteBody(NoteBuilding, NewBody) end
---@param Building ACreatureSpawnerBuilding
---@param CreatureRowHandle FDataTableRowHandle_NetCrc
---@param Count int32
function ASurvivalPlayerController:ServerSetCreatureAtCreatureSpawner(Building, CreatureRowHandle, Count) end
---@param TargetTriggerable AActor
---@param EventDataRow FDataTableRowHandle_NetCrc
---@param TriggerInstigator AActor
---@param bForce boolean
function ASurvivalPlayerController:ServerSendTriggerEvent(TargetTriggerable, EventDataRow, TriggerInstigator, bForce) end
---@param Turret ATurretBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerSelectTurretAmmo(Turret, Item) end
---@param SignBuilding ASignBuilding
---@param SignDataHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerController:ServerSelectSign(SignBuilding, SignDataHandle) end
---@param ResponseIndex int32
function ASurvivalPlayerController:ServerSelectPlayerDrivenConversationResponse(ResponseIndex) end
---@param ItemChoice AItemChoiceInteraction
---@param ItemDataHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerController:ServerSelectItemOption(ItemChoice, ItemDataHandle) end
---@param DesiredRespawnType EPlayerRespawnType
function ASurvivalPlayerController:ServerRespawn(DesiredRespawnType) end
function ASurvivalPlayerController:ServerRerollDailyBurgleQuests() end
---@param ItemStackTag FGameplayTag
function ASurvivalPlayerController:ServerRequestUnlockItemStackUpgradeTier(ItemStackTag) end
---@param TechTreeRowHandle FDataTableRowHandle_NetCrc
---@param PointsToSpend int32
function ASurvivalPlayerController:ServerRequestTechTreeRecipePointSpend(TechTreeRowHandle, PointsToSpend) end
---@param PlayerIdentity EPlayerCharacterIdentity
function ASurvivalPlayerController:ServerRequestSetPlayerIdentity(PlayerIdentity) end
---@param InPlayer ASurvivalPlayerState
function ASurvivalPlayerController:ServerRequestMovieSkipUpdate(InPlayer) end
---@param Interactable AActor
---@param WidgetClass TSoftClassPtr<UInteractionWidget>
function ASurvivalPlayerController:ServerRequestInteractionWidget(Interactable, WidgetClass) end
---@param ZiplineLine AZiplineLine
---@param NewName FString
function ASurvivalPlayerController:ServerRenameZipline(ZiplineLine, NewName) end
---@param Storage AStorageBuilding
---@param NewName FString
function ASurvivalPlayerController:ServerRenameStorage(Storage, NewName) end
---@param Building AMarkerBuilding
---@param NewName FString
function ASurvivalPlayerController:ServerRenameMarker(Building, NewName) end
---@param Building ABuilding
---@param NewName FString
function ASurvivalPlayerController:ServerRenameBuilding(Building, NewName) end
---@param Building AGardenBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerRemoveItemFromGarden(Building, Item) end
---@param Building AItemDisplayBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerRemoveItemDisplayBuilding(Building, Item) end
---@param From UObject
---@param Item UItem
---@param Count int32
function ASurvivalPlayerController:ServerRemoveItem(From, Item, Count) end
---@param QuestInstance UBurgleQuestInstance
function ASurvivalPlayerController:ServerRejectBurgleQuest(QuestInstance) end
function ASurvivalPlayerController:ServerRefillBurgleQuests() end
function ASurvivalPlayerController:ServerProgressPlayerDrivenConversation() end
---@param Building AItemDisplayBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerPlaceItemDisplayBuilding(Building, Item) end
function ASurvivalPlayerController:ServerNotifyPlayerLoadedIn() end
---@param WidgetClass TSoftClassPtr<UInteractionWidget>
function ASurvivalPlayerController:ServerNotifyClosedInteractionWidget(WidgetClass) end
function ASurvivalPlayerController:ServerGiveUp() end
---@param Building AEquipmentDisplayBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerEquipDisplayBuilding(Building, Item) end
---@param Creature ASurvivalCreature
---@param Item UItem
function ASurvivalPlayerController:ServerEquipCreature(Creature, Item) end
---@param Item UItem
function ASurvivalPlayerController:ServerEnhanceLegendaryItem(Item) end
---@param Item UItem
---@param BonusEnhancementType FGameplayTag
function ASurvivalPlayerController:ServerEnhanceItemBonus(Item, BonusEnhancementType) end
---@param Item UItem
function ASurvivalPlayerController:ServerEnhanceItem(Item) end
---@param Interactable AActor
function ASurvivalPlayerController:ServerEndWidgetInteraction(Interactable) end
function ASurvivalPlayerController:ServerEndPlayerDrivenConversation() end
---@param Building ADuplicatorBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerDuplicateItem(Building, Item) end
---@param Item UItem
function ASurvivalPlayerController:ServerDumpItem(Item) end
---@param From UObject
---@param Item UItem
---@param Count int32
function ASurvivalPlayerController:ServerDropItem(From, Item, Count) end
---@param Building APheromoneBroadcasterBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerDepositToPheromoneBroadcaster(Building, Item) end
---@param Building ADuplicatorBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerDeDuplicateItem(Building, Item) end
---@param Building AProductionBuilding
---@param RecipeRowHandle FDataTableRowHandle_NetCrc
---@param RecipeModRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerController:ServerCraftRecipeDataAtBuilding(Building, RecipeRowHandle, RecipeModRowHandle) end
---@param Building AProductionBuilding
---@param RecipeModRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerController:ServerCraftRecipeAtBuilding(Building, RecipeModRowHandle) end
---@param Building AGardenBuilding
function ASurvivalPlayerController:ServerCommitGardenItems(Building) end
---@param InPlayer APlayerState
function ASurvivalPlayerController:ServerCancelRequestSkipMovie(InPlayer) end
---@param Building AProductionBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerCancelProductionItem(Building, Item) end
---@param Building AGardenBuilding
function ASurvivalPlayerController:ServerCancelGardenProduction(Building) end
---@param InPlayer APlayerState
function ASurvivalPlayerController:ServerBeginRequestSkipMovie(InPlayer) end
---@param Building AGardenBuilding
---@param Item UItem
function ASurvivalPlayerController:ServerAddItemToGarden(Building, Item) end
---@param QuestInstance UBurgleQuestInstance
function ASurvivalPlayerController:ServerAcceptBurgleQuest(QuestInstance) end
---@param QuestInstance UBurgleQuestInstance
function ASurvivalPlayerController:ServerAbandonBurgleQuest(QuestInstance) end
function ASurvivalPlayerController:RestoreDefaultPhotoSettings() end
---@param DesiredRespawnType EPlayerRespawnType
function ASurvivalPlayerController:RespawnCharacter(DesiredRespawnType) end
---@param TechTreeRowHandle FDataTableRowHandle
---@param PointsToSpend int32
function ASurvivalPlayerController:RequestTechTreeRecipePointSpend(TechTreeRowHandle, PointsToSpend) end
---@param Value float
function ASurvivalPlayerController:PhotoCamSpeedAdjust(Value) end
function ASurvivalPlayerController:PhotoCamFlightSpeedUp() end
function ASurvivalPlayerController:PhotoCamFlightSpeedDown() end
---@param IntSetting int32
function ASurvivalPlayerController:OnVoiceChatActivationSettingChanged(IntSetting) end
function ASurvivalPlayerController:OnRep_BuilderPawn() end
---@param CurrentMode EEditMode
---@param NewMode EEditMode
function ASurvivalPlayerController:OnPreEditModeChanged(CurrentMode, NewMode) end
---@param PhotoModeEntryAllowedResult EPhotoModeEntryAllowedResult
function ASurvivalPlayerController:OnPhotoModeEntryUnallowed(PhotoModeEntryAllowedResult) end
---@param PhotoPawn APhotoPawn
function ASurvivalPlayerController:OnPhotoModeEntered(PhotoPawn) end
function ASurvivalPlayerController:OnKeyBindsReset() end
function ASurvivalPlayerController:OnExitPhotoMode() end
---@param OldMode EEditMode
---@param NewMode EEditMode
function ASurvivalPlayerController:OnEditModeChanged(OldMode, NewMode) end
---@param Value FInputAxisKeyMapping
function ASurvivalPlayerController:OnAxisMappingRemoved(Value) end
---@param Value FInputAxisKeyMapping
function ASurvivalPlayerController:OnAxisMappingAdded(Value) end
---@param Value FInputActionKeyMapping
function ASurvivalPlayerController:OnActionMappingRemoved(Value) end
---@param Value FInputActionKeyMapping
function ASurvivalPlayerController:OnActionMappingAdded(Value) end
---@param Reason FText
function ASurvivalPlayerController:NotifyWasKicked(Reason) end
---@param Interactable UObject
---@param WarningText FText
function ASurvivalPlayerController:NotifyInteractError(Interactable, WarningText) end
---@param Inventory UInventoryComponent
---@return boolean
function ASurvivalPlayerController:IsRequestedInventory(Inventory) end
---@return boolean
function ASurvivalPlayerController:IsPartyPendingRespawn() end
---@return boolean
function ASurvivalPlayerController:IsMounted() end
---@return boolean
function ASurvivalPlayerController:IsItemUseOnCooldown() end
---@return boolean
function ASurvivalPlayerController:IsInteractInputAvailable() end
---@return boolean
function ASurvivalPlayerController:IsInBuildMode() end
---@return boolean
function ASurvivalPlayerController:IsBuildModeAvailable() end
function ASurvivalPlayerController:HidePhotoModeUI() end
---@param TargetZipline AZiplineLine
function ASurvivalPlayerController:HandleRenameZiplineUI(TargetZipline) end
function ASurvivalPlayerController:HandlePhotoModeUnallowedInMP() end
---@return ASurvivalPlayerState
function ASurvivalPlayerController:GetSurvivalPlayerState() end
---@return boolean
function ASurvivalPlayerController:GetRumbleEnabled() end
---@return APawn
function ASurvivalPlayerController:GetPreviousPawn() end
---@return FVector2D
function ASurvivalPlayerController:GetMouseSensitivity() end
---@return boolean
function ASurvivalPlayerController:GetMotionControlsEnabled() end
---@return float
function ASurvivalPlayerController:GetItemUseCoooldownRemaining() end
---@return FVector2D
function ASurvivalPlayerController:GetGamepadSensitivity() end
---@return ABuilderPawn
function ASurvivalPlayerController:GetBuilderPawn() end
---@return boolean
function ASurvivalPlayerController:GetAdaptiveTriggersEnabled() end
---@param Target AActor
function ASurvivalPlayerController:EndForceLookAt(Target) end
function ASurvivalPlayerController:DestroyPhotoModeUI() end
---@param FailureReason ENewGamePlusFailureReason
function ASurvivalPlayerController:ClientTriggerNewGamePlusFailed(FailureReason) end
---@param ZiplineLine AZiplineLine
function ASurvivalPlayerController:ClientRenameZipline(ZiplineLine) end
function ASurvivalPlayerController:ClientOnRespawn() end
---@param Interactable UObject
---@param WarningText FText
function ASurvivalPlayerController:ClientNotifyInteractError(Interactable, WarningText) end
---@param Reason EBuildModeExitReason
function ASurvivalPlayerController:ClientNotifyBuildModeExit(Reason) end
---@param Target AActor
---@param CannotDamageReason ECannotDamageReason
---@param FailedDamageTypeFlags uint32
function ASurvivalPlayerController:ClientNotifyAttackError(Target, CannotDamageReason, FailedDamageTypeFlags) end
---@param Interactable AActor
---@param WidgetClass TSoftClassPtr<UInteractionWidget>
function ASurvivalPlayerController:ClientCreateInteractionWidget(Interactable, WidgetClass) end
---@param Target AActor
function ASurvivalPlayerController:BeginForceLookAt(Target) end
---@return boolean
function ASurvivalPlayerController:AllowIdentitySelection() end
---@param Multiplier float
function ASurvivalPlayerController:AdjustPhotoCamFlightSpeed(Multiplier) end


---@class ASurvivalPlayerState : APlayerState
---@field OnKeyItemAdded FSurvivalPlayerStateOnKeyItemAdded
---@field OnResearchRequest FSurvivalPlayerStateOnResearchRequest
---@field OnPlayerColorChangedDelegate FSurvivalPlayerStateOnPlayerColorChangedDelegate
---@field OnPlayerNameChangedDelegate FSurvivalPlayerStateOnPlayerNameChangedDelegate
---@field OnHotBarQuickSlotChanged FSurvivalPlayerStateOnHotBarQuickSlotChanged
---@field OnTutorialShownDelegate FSurvivalPlayerStateOnTutorialShownDelegate
---@field OnTutorialCompleteDelegate FSurvivalPlayerStateOnTutorialCompleteDelegate
---@field HotBarQuickSlots TArray<UHotBarQuickSlot>
---@field HotBarPageIndex int32
---@field CharacterSelection int32
---@field bUseCharactersRealName boolean
---@field OnStickiedQuestChanged FSurvivalPlayerStateOnStickiedQuestChanged
---@field OnPointOfInterestDiscovered FSurvivalPlayerStateOnPointOfInterestDiscovered
---@field OnHUDMarkerStateChanged FSurvivalPlayerStateOnHUDMarkerStateChanged
---@field OnResourceSurveyVisibleChanged FSurvivalPlayerStateOnResourceSurveyVisibleChanged
---@field OnShowMyMarkersChanged FSurvivalPlayerStateOnShowMyMarkersChanged
---@field OnRespawnPointChangedDelegate FSurvivalPlayerStateOnRespawnPointChangedDelegate
---@field OnEmoteUnlocked FSurvivalPlayerStateOnEmoteUnlocked
---@field OnNewMaxCozinessLevelAchieved FSurvivalPlayerStateOnNewMaxCozinessLevelAchieved
---@field OnItemDuplicated FSurvivalPlayerStateOnItemDuplicated
---@field AchievementsComponent UAchievementsComponent
---@field PlayerStatsComponent UPlayerStatsComponent
---@field CurrentUITheme TSubclassOf<UGlobalColorTheme>
---@field CurrentNightUITheme TSubclassOf<UGlobalColorTheme>
---@field bHasMultiplePlayerSaveDataForCurrentSave boolean
---@field ColorSelection int32
---@field PersonalKeyItems TArray<UItem>
---@field InspectedItems TArray<FDataTableRowHandle_NetCrc>
---@field InspectedCraftingRecipes TArray<FDataTableRowHandle_NetCrc>
---@field InspectedBuildingRecipes TArray<FDataTableRowHandle_NetCrc>
---@field ViewedTutorials TArray<FDataTableRowHandle_NetCrc>
---@field ClientQuests FQuestArray
---@field ActiveQuestStickiedStates TArray<FActiveQuestStickiedData>
---@field bBurgleQuestsStickied boolean
---@field DiscoveredPointsOfInterest TArray<UPointOfInterestDataAsset>
---@field RespawnPoint TWeakObjectPtr<AActor>
---@field RespawnPointLocation FVector
---@field DesiredCameraMode ECameraDisplayMode
---@field LastDeathNotification FDeathInfo
---@field PlayerGuid FGuid
---@field PerkComponent UPerkComponent
---@field PlayerUpgradeComponent UPlayerUpgradeComponent
---@field LastEquippedItemsBeforeDeath TArray<UItem>
---@field LastInventoryItemsBeforeDeath TArray<UItem>
---@field LastBuildingRadialVariants TArray<FDataTableRowHandle>
---@field ToggledHUDMarkers TArray<FGuid>
---@field bResourceSurveyVisible boolean
---@field bShowMyMarkers boolean
---@field bExtraWideInteraction boolean
---@field LastWaypointItemHandle FDataTableRowHandle
---@field UnlockedEmotes TArray<FDataTableRowHandle_NetCrc>
---@field MaxCozinessLevelAchieved int32
ASurvivalPlayerState = {}

---@param TutorialRowHandle FDataTableRowHandle
function ASurvivalPlayerState:ViewTutorial(TutorialRowHandle) end
function ASurvivalPlayerState:ToggleShowMyMarkers() end
function ASurvivalPlayerState:ToggleResourceSurveyVisible() end
---@param TutorialRowHandle FDataTableRowHandle
function ASurvivalPlayerState:SetTutorialComplete(TutorialRowHandle) end
---@param bState boolean
function ASurvivalPlayerState:SetShowMyMarkers(bState) end
---@param bNewVal boolean
function ASurvivalPlayerState:SetShowCompletedQuests(bNewVal) end
---@param bState boolean
function ASurvivalPlayerState:SetResourceSurveyVisible(bState) end
---@param Target APlayerState
---@param bState boolean
function ASurvivalPlayerState:SetPlayerTextMute(Target, bState) end
---@param Selection int32
function ASurvivalPlayerState:SetPlayerColorSelection(Selection) end
---@param ItemRowHandle FDataTableRowHandle
function ASurvivalPlayerState:SetItemInspected(ItemRowHandle) end
---@param bState boolean
function ASurvivalPlayerState:SetExtraWideInteraction(bState) end
---@param CraftingRecipeRowHandle FDataTableRowHandle
function ASurvivalPlayerState:SetCraftingRecipeInspected(CraftingRecipeRowHandle) end
---@param BuildingRecipeRowHandle FDataTableRowHandle
function ASurvivalPlayerState:SetBuildingRecipeInspected(BuildingRecipeRowHandle) end
---@param TutorialRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerState:ServerViewTutorial(TutorialRowHandle) end
---@param Item UItem
function ASurvivalPlayerState:ServerUseTechTreeKeyItem(Item) end
---@param Character ASurvivalCharacter
---@param Player ASurvivalPlayerState
---@param ClientRelevance ERelevanceType
function ASurvivalPlayerState:ServerUpdateRelevanceConsensus(Character, Player, ClientRelevance) end
---@param Character AProxyCharacterStandInActor
---@param Player ASurvivalPlayerState
---@param ClientRelevance ERelevanceType
function ASurvivalPlayerState:ServerUpdateProxyRelevanceConsensus(Character, Player, ClientRelevance) end
---@param Index int32
function ASurvivalPlayerState:ServerUnassignQuickSlotItem(Index) end
---@param HUDMarkerObject FGuid
---@param IsVisible boolean
function ASurvivalPlayerState:ServerToggleHUDMarker(HUDMarkerObject, IsVisible) end
---@param Index int32
function ASurvivalPlayerState:ServerSetUIThemeByIndex(Index) end
---@param Theme TSubclassOf<UGlobalColorTheme>
function ASurvivalPlayerState:ServerSetUITheme(Theme) end
---@param TutorialRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerState:ServerSetTutorialComplete(TutorialRowHandle) end
---@param Resource FDataTableRowHandle_NetCrc
function ASurvivalPlayerState:ServerSetSurveyedResource(Resource) end
---@param bIsVisible boolean
function ASurvivalPlayerState:ServerSetShowMyMarkers(bIsVisible) end
---@param bIsVisible boolean
function ASurvivalPlayerState:ServerSetResourceSurveyVisible(bIsVisible) end
---@param Index int32
---@param SlotType EHotBarQuickSlotType
---@param ItemKey FHotBarQuickSlotItemTypeKey
function ASurvivalPlayerState:ServerSetQuickSlotAssignment(Index, SlotType, ItemKey) end
---@param QuestRowHandle FDataTableRowHandle_NetCrc
---@param IsStickied boolean
function ASurvivalPlayerState:ServerSetQuestStickiedState(QuestRowHandle, IsStickied) end
---@param Index int32
function ASurvivalPlayerState:ServerSetNightUIThemeByIndex(Index) end
---@param Theme TSubclassOf<UGlobalColorTheme>
function ASurvivalPlayerState:ServerSetNightUITheme(Theme) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerState:ServerSetItemInspected(ItemRowHandle) end
---@param PageIndex int32
function ASurvivalPlayerState:ServerSetHotBarPage(PageIndex) end
---@param bState boolean
function ASurvivalPlayerState:ServerSetExtraWideInteraction(bState) end
---@param CameraMode ECameraDisplayMode
function ASurvivalPlayerState:ServerSetDesiredCameraMode(CameraMode) end
---@param CraftingRecipeRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerState:ServerSetCraftingRecipeInspected(CraftingRecipeRowHandle) end
---@param IsStickied boolean
function ASurvivalPlayerState:ServerSetBurgleQuestsStickied(IsStickied) end
---@param BuildingRecipeRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerState:ServerSetBuildingRecipeInspected(BuildingRecipeRowHandle) end
---@param Message FString
---@param bTextToSpeech boolean
function ASurvivalPlayerState:ServerSendChatMessage(Message, bTextToSpeech) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param ResourceAnalyzer AResourceAnalyzerBuilding
function ASurvivalPlayerState:ServerRequestResearch(ItemRowHandle, ResourceAnalyzer) end
---@param QuestRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerState:ServerRemoveQuestStickiedState(QuestRowHandle) end
---@param BarrierName FName
function ASurvivalPlayerState:ServerNotifyPlayerArrivedAtBarrier(BarrierName) end
function ASurvivalPlayerState:ServerGoToPreviousHotBarPage() end
function ASurvivalPlayerState:ServerGoToNextHotBarPage() end
---@param GameMode EGameMode
function ASurvivalPlayerState:ServerGameModeChanged(GameMode) end
function ASurvivalPlayerState:ServerEndViewResourceSurvey() end
function ASurvivalPlayerState:ServerBeginViewResourceSurvey() end
---@param Item UItem
function ASurvivalPlayerState:ServerAddKeyItem(Item) end
function ASurvivalPlayerState:OnRep_ToggledHUDMarkers() end
function ASurvivalPlayerState:OnRep_RespawnPoint() end
function ASurvivalPlayerState:OnRep_ResourceSurveyVisible() end
function ASurvivalPlayerState:OnRep_PlayerGuid() end
function ASurvivalPlayerState:OnRep_PlayerColorSelectionChanged() end
function ASurvivalPlayerState:OnRep_PersonalKeyItems() end
function ASurvivalPlayerState:OnRep_HotBarQuickSlots() end
function ASurvivalPlayerState:OnRep_DesiredCameraMode() end
function ASurvivalPlayerState:OnRep_CurrentUITheme() end
function ASurvivalPlayerState:OnRep_CurrentNightUITheme() end
function ASurvivalPlayerState:OnRep_ClientQuests() end
function ASurvivalPlayerState:OnRep_ActiveQuestStickiedStates() end
---@param Sender UInventoryComponent
function ASurvivalPlayerState:OnPlayerInventoryChanged(Sender) end
---@param MetaBuilding FDataTableRowHandle
function ASurvivalPlayerState:NavigateNextMetaBuildingVariant(MetaBuilding) end
---@param PlayerState ASurvivalPlayerState
---@param Message FString
---@param bTextToSpeech boolean
function ASurvivalPlayerState:MulticastSendChatMessage(PlayerState, Message, bTextToSpeech) end
---@param GameMode EGameMode
function ASurvivalPlayerState:MulticastGameModeChanged(GameMode) end
---@param Pawn APawn
function ASurvivalPlayerState:LocallyHandlePawnUnpossess(Pawn) end
---@param Pawn APawn
function ASurvivalPlayerState:LocallyHandlePawnPossess(Pawn) end
---@return boolean
function ASurvivalPlayerState:IsResourceSurveyVisible() end
---@param EmoteRowHandle FDataTableRowHandle
---@return boolean
function ASurvivalPlayerState:IsEmoteUnlocked(EmoteRowHandle) end
---@return boolean
function ASurvivalPlayerState:IsBurgleQuestsStickied() end
---@param QuestRowHandle FDataTableRowHandle
---@return boolean
function ASurvivalPlayerState:IsActiveQuestStickied(QuestRowHandle) end
---@param TutorialRowHandle FDataTableRowHandle
---@return boolean
function ASurvivalPlayerState:HasViewedTutorial(TutorialRowHandle) end
---@param ItemHandle FDataTableRowHandle
---@return boolean
function ASurvivalPlayerState:HasKeyItem(ItemHandle) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function ASurvivalPlayerState:HasInspectedItem(ItemRowHandle) end
---@param CraftingRecipeRowHandle FDataTableRowHandle
---@return boolean
function ASurvivalPlayerState:HasInspectedCraftingRecipe(CraftingRecipeRowHandle) end
---@param BuildingRecipeRowHandle FDataTableRowHandle
---@return boolean
function ASurvivalPlayerState:HasInspectedBuildingRecipe(BuildingRecipeRowHandle) end
---@param bSetting boolean
function ASurvivalPlayerState:HandleExtraWideInteractionChanged(bSetting) end
---@return TArray<FDataTableRowHandle_NetCrc>
function ASurvivalPlayerState:GetViewedTutorials() end
---@param KeyItemSubCategory FGameplayTag
---@return TArray<UItem>
function ASurvivalPlayerState:GetTechTreeKeyItems(KeyItemSubCategory) end
---@return boolean
function ASurvivalPlayerState:GetShowMyMarkers() end
---@return boolean
function ASurvivalPlayerState:GetShowCompletedQuests() end
---@return FVector
function ASurvivalPlayerState:GetRespawnPointLocation() end
---@return AActor
function ASurvivalPlayerState:GetRespawnPoint() end
---@param Target APlayerState
---@return boolean
function ASurvivalPlayerState:GetPlayerTextMute(Target) end
---@return FGuid
function ASurvivalPlayerState:GetPlayerGuid() end
---@return int32
function ASurvivalPlayerState:GetPlayerColorSelection() end
---@return FColor
function ASurvivalPlayerState:GetPlayerColor() end
---@return TArray<UItem>
function ASurvivalPlayerState:GetPersonalKeyItems() end
---@return int32
function ASurvivalPlayerState:GetMaxHotBarPages() end
---@param page int32
---@return FText
function ASurvivalPlayerState:GetLocalizedHotBarPageString(page) end
---@return FText
function ASurvivalPlayerState:GetLocalizedCurrentHotBarPageString() end
---@param PageIndex int32
---@return int32
function ASurvivalPlayerState:GetLastSlotIndexForHotBarPage(PageIndex) end
---@return int32
function ASurvivalPlayerState:GetLastSlotIndexForCurrentHotBarPage() end
---@return FDeathInfo
function ASurvivalPlayerState:GetLastDeathNotification() end
---@return int32
function ASurvivalPlayerState:GetHotBarSlotsPerPage() end
---@param SlotIndex int32
---@return int32
function ASurvivalPlayerState:GetHotBarPageFromSlotIndex(SlotIndex) end
---@param UISlotIndex int32
---@return int32
function ASurvivalPlayerState:GetHotBarIndexFromUISlotIndexAndCurrentPage(UISlotIndex) end
---@param PageIndex int32
---@param UISlotIndex int32
---@return int32
function ASurvivalPlayerState:GetHotBarIndexFromPageIndexAndUISlotIndex(PageIndex, UISlotIndex) end
---@param PageIndex int32
---@return int32
function ASurvivalPlayerState:GetFirstSlotIndexForHotBarPage(PageIndex) end
---@return int32
function ASurvivalPlayerState:GetFirstSlotIndexForCurrentHotBarPage() end
---@return boolean
function ASurvivalPlayerState:GetExtraWideInteraction() end
---@return TArray<FActiveQuestStickiedData>
function ASurvivalPlayerState:GetActiveQuestStickiedStates() end
---@param TutorialRowHandle FDataTableRowHandle
function ASurvivalPlayerState:ForceLocalTutorialShow(TutorialRowHandle) end
---@param TutorialRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerState:ClientViewTutorial(TutorialRowHandle) end
---@param TutorialRowHandle FDataTableRowHandle_NetCrc
function ASurvivalPlayerState:ClientSetTutorialComplete(TutorialRowHandle) end
---@param PageIndex int32
function ASurvivalPlayerState:ClientSetHotBarPage(PageIndex) end
---@param StartIndex int32
---@param Buffer TArray<uint8>
function ASurvivalPlayerState:ClientSendResourceSurveyBlock(StartIndex, Buffer) end
---@param ObsidianID FGuid
---@param Buffer TArray<uint8>
function ASurvivalPlayerState:ClientSendFrankenlineImageBlock(ObsidianID, Buffer) end
---@param Players TArray<APlayerState>
---@param PercentCompletion TArray<float>
---@param IsRequestingSkip TArray<boolean>
function ASurvivalPlayerState:ClientReceiveSkipProgressState(Players, PercentCompletion, IsRequestingSkip) end
---@param Message FString
function ASurvivalPlayerState:ClientPostUndoMessage(Message) end
---@param bEquipmentDamaged boolean
function ASurvivalPlayerState:ClientOnRestoreItems(bEquipmentDamaged) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param bSuccess boolean
function ASurvivalPlayerState:ClientOnRequestResearch(ItemRowHandle, bSuccess) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param IsNewItem boolean
function ASurvivalPlayerState:ClientOnKeyItemAdded(ItemRowHandle, IsNewItem) end
---@param EmoteRowHandle FDataTableRowHandle
function ASurvivalPlayerState:ClientOnEmoteUnlocked(EmoteRowHandle) end
function ASurvivalPlayerState:ClientOnDroppedItems() end
---@param Level int32
function ASurvivalPlayerState:ClientNotifyCozinessLevelAchieved(Level) end
function ASurvivalPlayerState:ClientGoToPreviousHotBarPage() end
function ASurvivalPlayerState:ClientGoToNextHotBarPage() end
---@param ObsidianID FGuid
function ASurvivalPlayerState:ClientEndStreamFrankenlineImage(ObsidianID) end
---@param ObsidianID FGuid
---@param BufferSize int64
function ASurvivalPlayerState:ClientBeginStreamFrankenlineImage(ObsidianID, BufferSize) end


---@class ASurvivalWorldSettings : AWorldSettings
---@field MusicSettings UMusicSettings
---@field ElevationResolution float
ASurvivalWorldSettings = {}

---@param WorldLocation FVector
---@return float
function ASurvivalWorldSettings:PerformSurfaceTrace(WorldLocation) end
---@param Location FVector
---@return float
function ASurvivalWorldSettings:GetSurfaceElevation(Location) end


---@class ASwimmingSurvivalCharacter : AFlySwimSurvivalCharacter
---@field ForwardArrow UArrowComponent
---@field UpArrow UArrowComponent
---@field DownArrow UArrowComponent
---@field LeftArrow UArrowComponent
---@field RightArrow UArrowComponent
---@field ArrowTraceComponents TArray<UArrowComponent>
---@field bCanUseSteeringBehavior boolean
---@field SurfaceBuffer float
---@field DefaultMovementSettings FSwimmingCharacterMovementSettings
---@field CharacterMovementSettings TMap<ESwimmingMovementType, FSwimmingCharacterMovementSettings>
---@field AvoidanceLength_Forward float
---@field AvoidanceLength_Side float
---@field AvoidanceStrength_Forward float
---@field AvoidanceStrength_Side float
---@field AvoidanceStrengthMultiplier float
---@field AvoidanceSideLengthExtension float
---@field MaxVerticalAngleDot float
---@field CreaturePushMultiplier float
---@field MultiHitStrengthMultiplier float
---@field SphereCastRadius float
---@field ClampFactor float
---@field LevelOutFactor float
---@field AvoidanceInterpSpeed float
---@field bCanSprintDuringWander boolean
---@field WanderAngle float
---@field ActorsToIgnore TArray<AActor>
---@field TraceType ETraceTypeQuery
---@field MaxAllowableFleeTime float
---@field MaxTimeBeforeSprint float
---@field MinTimeBeforeSprint float
---@field SprintDuration float
---@field bShowArrowTrace boolean
---@field bShowDirection boolean
---@field AIController ASurvivalAIController
ASwimmingSurvivalCharacter = {}

---@return float
function ASwimmingSurvivalCharacter:GetMinWanderHeight() end
---@return float
function ASwimmingSurvivalCharacter:GetMaxWanderHeight() end
---@return boolean
function ASwimmingSurvivalCharacter:GetCanUseSteeringBehaviors() end
---@param bSteeringEnabled boolean
function ASwimmingSurvivalCharacter:EnableSteeringBehavior(bSteeringEnabled) end


---@class ASwitch : AActor
---@field OnLockStateChangedDelegate FSwitchOnLockStateChangedDelegate
---@field OnOpenStateChangedDelegate FSwitchOnOpenStateChangedDelegate
---@field SwitchMode ESwitchMode
---@field NumUsesRemaining uint8
---@field OCLComponent UOCLComponent
---@field PersistenceComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
ASwitch = {}

---@param UsesRemaining float
function ASwitch:SetUsesRemaining(UsesRemaining) end
---@param IsOpen boolean
function ASwitch:OnUpdateVisualState(IsOpen) end
---@param IsOpen boolean
---@param ActorInstigator AActor
function ASwitch:OnOpenStateChanged(IsOpen, ActorInstigator) end
---@param IsLocked boolean
function ASwitch:OnLockStateChanged(IsLocked) end
---@param IsOpen boolean
function ASwitch:NativeOnUpdateVisualState(IsOpen) end
---@param IsOpen boolean
---@param ActorInstigator AActor
function ASwitch:NativeOnOpenStateChanged(IsOpen, ActorInstigator) end
---@param IsLocked boolean
function ASwitch:NativeOnLockStateChanged(IsLocked) end


---@class ASwitchFog : AActor
ASwitchFog = {}


---@class ATerminalSwitch : ASwitch
---@field PersistentListeners TArray<TSoftObjectPtr<AActor>>
---@field StaticMesh UStaticMeshComponent
---@field Widget UWidgetComponent
---@field WidgetClass TSubclassOf<UTerminalWidget>
---@field Audio UAudioComponent
---@field PlayerBlocker UBoxComponent
---@field ScreenMaterial UMaterialInterface
---@field Conditionals TArray<FTerminalConditional>
---@field CurrentStateIndex int32
---@field CurrentWidgetState ETerminalWidgetState
---@field ActiveWidget UTerminalWidget
---@field ScreenMID UMaterialInstanceDynamic
ATerminalSwitch = {}

function ATerminalSwitch:OnRep_CurrentWidgetState() end
function ATerminalSwitch:OnRep_CurrentStateIndex() end
---@param Component UConditionalToggleComponent
---@param bEnabled boolean
function ATerminalSwitch:OnConditionalStateChanged(Component, bEnabled) end
---@param ConditionalStateName FName
---@param bEnabled boolean
function ATerminalSwitch:OnConditionalChanged(ConditionalStateName, bEnabled) end
---@param ConditionalStateName FName
---@param GlobalVariable FGlobalVariableReference
---@param DesiredValue int32
---@return boolean
function ATerminalSwitch:CanSetGlobalVariables(ConditionalStateName, GlobalVariable, DesiredValue) end


---@class ATexturePacker : AActor
---@field SourceTextures TArray<FSourceTexture>
---@field DestinationTexture UTextureRenderTarget2D
---@field TexturePackMaterial UMaterialInterface
---@field TexturePackMID UMaterialInstanceDynamic
---@field Canvas UCanvas
ATexturePacker = {}



---@class ATimeOfDayLightingManager : AActor
---@field CurveValues FTimeOfDayCurveCache
---@field PhotoModeTime float
---@field PhotoModeAzimuthOffset float
---@field CurrentFrameNormalizedTime float
---@field OnRestingTimelapseChange FTimeOfDayLightingManagerOnRestingTimelapseChange
---@field TimelapseAudioCues TArray<FTimelapseAudioCue>
---@field TimelapseSoundMix USoundMix
---@field TimelapseMusicStopOffset float
---@field NativeInteriorDaylights TArray<AIndirectSpotLight>
---@field NativePostProcessVolumes TArray<APostProcessVolume>
---@field CurveSunPitch UCurveFloat
---@field CurveSunTemperature UCurveFloat
---@field CurveSunOcclusionMask UCurveFloat
---@field CurveSunVolumetricInscatter UCurveFloat
---@field CurveSunIntensity UCurveFloat
---@field CurveSunColorDisc UCurveLinearColor
---@field SunDiscColorMul float
---@field HorizonSunPos float
---@field WaterSunMul float
---@field CurveMoonIntensity UCurveFloat
---@field CurveMoonFade UCurveFloat
---@field IsMoonPresent boolean
---@field WaterMoonMul float
---@field MoonHedgeIntensity float
---@field VolumetricHedgeScatter float
---@field CurveSkyLightCubemap UCurveFloat
---@field CurveSkyLightCubemapTranslucent UCurveFloat
---@field CurveHedgeSkylight UCurveFloat
---@field CurveWaterSkylightIntensity UCurveFloat
---@field CurveFogSkylightScatter UCurveFloat
---@field CurveSkyLightFilter UCurveLinearColor
---@field CurveZenithColor UCurveLinearColor
---@field CurveHorizonColor UCurveLinearColor
---@field CurveCloudColor UCurveLinearColor
---@field CurveAtmosFogColor UCurveLinearColor
---@field CurveFogExtinction UCurveFloat
---@field RandomFogMultiplier float
---@field FogMultiplierCutscene float
---@field CurveLootableIntensity UCurveFloat
---@field CurveWaterlineColor UCurveLinearColor
---@field CurveWaterBallEmissive UCurveLinearColor
---@field ForcedFullUpdateRequested boolean
---@field ManagedPostProcessMaterials TArray<FStencilRequiredGlobalPostProcessMaterial>
---@field ActiveBlendables FWeightedBlendables
---@field PhotoModeHelperComponent UPhotoModeHelperComponent
---@field bIsTimelapseActive boolean
---@field TimelapseStartGameTimeSeconds float
---@field TimelapseDuration float
---@field TimelapseLightingDuration float
---@field TimelapseStartTime float
---@field TimelapseCurrentTime float
---@field TimelapseTargetTime float
---@field TimelapseLerp float
---@field TimelapseLightingLerp float
---@field TimelapseMusicStopHandle FTimerHandle
---@field HasCutsceneTimeOfDayOverride boolean
---@field CutsceneTimeOfDayOverride float
---@field HasCutsceneBlendTriggerOverride boolean
---@field CutsceneBlendOverrides FCutsceneBlendTriggerAttributes
---@field HasCutsceneRequestDefaultBlendTriggerOverride boolean
---@field LastInteriorDaylightIntensity float
---@field LastInteriorDaylightColor FLinearColor
---@field bLiteModeEnabled boolean
ATimeOfDayLightingManager = {}

---@return boolean
function ATimeOfDayLightingManager:UseNativeVolumetricFogUpdate() end
---@return boolean
function ATimeOfDayLightingManager:UseNativeSunUpdate() end
---@return boolean
function ATimeOfDayLightingManager:UseNativeSkyUpdate() end
---@return boolean
function ATimeOfDayLightingManager:UseNativeSkylightUpdate() end
---@return boolean
function ATimeOfDayLightingManager:UseNativeOakTreeShadowUpdate() end
---@return boolean
function ATimeOfDayLightingManager:UseNativeMoonUpdate() end
---@return boolean
function ATimeOfDayLightingManager:UseNativeCollectionsUpdate() end
---@param ObjectID int32
---@param StencilValue int32
function ATimeOfDayLightingManager:UnregisterStencilMaskRenderer(ObjectID, StencilValue) end
function ATimeOfDayLightingManager:StopMusicForTimelapse() end
---@param SunDiscColorMulti float
---@param HorizSunPos float
---@param WaterSunMulti float
---@param MoonPres boolean
---@param WaterMoonMulti float
---@param IntensityMoonHedge float
---@param VolHedgeScatter float
---@param FogMulRandom float
---@param FogMulCutscene float
function ATimeOfDayLightingManager:SetNativeVariablesFromBlueprint(SunDiscColorMulti, HorizSunPos, WaterSunMulti, MoonPres, WaterMoonMulti, IntensityMoonHedge, VolHedgeScatter, FogMulRandom, FogMulCutscene) end
---@param bEnabled boolean
function ATimeOfDayLightingManager:SetLiteModeEnabled(bEnabled) end
---@param DOFBlurRadius float
function ATimeOfDayLightingManager:SetCutsceneDOF(DOFBlurRadius) end
---@param ObjectID int32
---@param StencilValue int32
function ATimeOfDayLightingManager:RegisterStencilMaskRenderer(ObjectID, StencilValue) end
function ATimeOfDayLightingManager:RefreshBlendTriggerPriorities() end
function ATimeOfDayLightingManager:OnPhotoModeExited() end
---@param RestDuration float
function ATimeOfDayLightingManager:OnGameRest(RestDuration) end
---@param IsCutsceneActive boolean
function ATimeOfDayLightingManager:OnCutsceneStateChanged(IsCutsceneActive) end
---@param Enabled boolean
---@param CutsceneTimeOfDay float
function ATimeOfDayLightingManager:OnCutsceneRequestTimeOfDayOverride(Enabled, CutsceneTimeOfDay) end
---@param Enabled boolean
function ATimeOfDayLightingManager:OnCutsceneRequestDefaultBlendTrigger(Enabled) end
---@param Enabled boolean
---@param BlendOverride FCutsceneBlendTriggerAttributes
function ATimeOfDayLightingManager:OnCutsceneRequestBlendTriggerOverride(Enabled, BlendOverride) end
function ATimeOfDayLightingManager:OnActiveBlendablesChanged() end
---@param ExponentialHeightFog AExponentialHeightFog
---@param TimeOfDayMPC UMaterialParameterCollection
---@param FogThicknessMin float
---@param FogThicknessMax float
---@param UpdateVolumetricFogDrawDistance boolean
---@param BlendIntensity float
function ATimeOfDayLightingManager:NativeUpdateVolumetricFog(ExponentialHeightFog, TimeOfDayMPC, FogThicknessMin, FogThicknessMax, UpdateVolumetricFogDrawDistance, BlendIntensity) end
---@param SunLightComponent UDirectionalLightComponent
---@param SkyMaterial UMaterialInstanceDynamic
---@param HedgeContributionMin float
---@param HedgeContributionMax float
---@param SunIntensityMin float
---@param SunIntensityMax float
---@param BlendIntensity float
function ATimeOfDayLightingManager:NativeUpdateSun(SunLightComponent, SkyMaterial, HedgeContributionMin, HedgeContributionMax, SunIntensityMin, SunIntensityMax, BlendIntensity) end
---@param TimeOfDayMPC UMaterialParameterCollection
---@param SkylightLightComponent USkyLightComponent
---@param SourceCubemap UTextureCube
---@param DestCubemap UTextureCube
---@param HedgeContributionMin float
---@param HedgeContributionMax float
---@param SkylightIntensityMin float
---@param SkylightIntensityMax float
---@param SkylightColorTint FLinearColor
---@param BlendIntensity float
---@param UnderWater boolean
function ATimeOfDayLightingManager:NativeUpdateSkylight(TimeOfDayMPC, SkylightLightComponent, SourceCubemap, DestCubemap, HedgeContributionMin, HedgeContributionMax, SkylightIntensityMin, SkylightIntensityMax, SkylightColorTint, BlendIntensity, UnderWater) end
---@param SkyMaterial UMaterialInstanceDynamic
---@param AtmosphericFogComponent UAtmosphericFogComponent
function ATimeOfDayLightingManager:NativeUpdateSky(SkyMaterial, AtmosphericFogComponent) end
---@param PostProcessMain UPostProcessComponent
---@param PostProcessExposureContribution boolean
---@param HourlyIntensity float
---@param BlendIntensity float
---@param MinBrightnessOutdoor float
---@param MaxBrightnessOutdoor float
---@param UnderWater boolean
---@param IndirectLightingColor FLinearColor
function ATimeOfDayLightingManager:NativeUpdatePostProcess(PostProcessMain, PostProcessExposureContribution, HourlyIntensity, BlendIntensity, MinBrightnessOutdoor, MaxBrightnessOutdoor, UnderWater, IndirectLightingColor) end
---@param TimeOfDayMPC UMaterialParameterCollection
---@param TreeWindSpeed1 float
---@param TreeWindStrength1 float
---@param TreeWindSpeed2 float
---@param TreeWindStrength2 float
---@param TreeShadowLeavesScale float
function ATimeOfDayLightingManager:NativeUpdateOakTreeShadow(TimeOfDayMPC, TreeWindSpeed1, TreeWindStrength1, TreeWindSpeed2, TreeWindStrength2, TreeShadowLeavesScale) end
---@param MoonLightComponent UDirectionalLightComponent
---@param SkyMaterial UMaterialInstanceDynamic
---@param HedgeContributionMin float
---@param HedgeContributionMax float
---@param MoonIntensityMin float
---@param MoonIntensityMax float
---@param BlendIntensity float
function ATimeOfDayLightingManager:NativeUpdateMoon(MoonLightComponent, SkyMaterial, HedgeContributionMin, HedgeContributionMax, MoonIntensityMin, MoonIntensityMax, BlendIntensity) end
---@param TimeOfDayMPC UMaterialParameterCollection
---@param SunLightComponent UDirectionalLightComponent
---@param MoonLightComponent UDirectionalLightComponent
function ATimeOfDayLightingManager:NativeUpdateCollections(TimeOfDayMPC, SunLightComponent, MoonLightComponent) end
---@param Intensity float
function ATimeOfDayLightingManager:NativeSetInteriorDaylightsIntensity(Intensity) end
---@param Intensity float
---@param Color FLinearColor
function ATimeOfDayLightingManager:NativeSetInteriorDaylightsColorAndIntensity(Intensity, Color) end
---@return float
function ATimeOfDayLightingManager:NativeGetNormalizedTime() end
---@return boolean
function ATimeOfDayLightingManager:IsLootShimmerEnabled() end
---@return int32
function ATimeOfDayLightingManager:GetTimelapseMinute() end
---@return float
function ATimeOfDayLightingManager:GetTimelapseLightingLerp() end
---@return float
function ATimeOfDayLightingManager:GetTimelapseLerp() end
---@return int32
function ATimeOfDayLightingManager:GetTimelapseHour() end
---@return UDirectionalLightComponent
function ATimeOfDayLightingManager:GetSunLight() end
---@param Time float
---@return USoundCue
function ATimeOfDayLightingManager:GetSoundCueForWakeupTime(Time) end
---@return UPostProcessComponent
function ATimeOfDayLightingManager:GetPostProcessMain() end
---@return int32
function ATimeOfDayLightingManager:GetPhotoModeHour() end
---@return float
function ATimeOfDayLightingManager:GetNormalizedPhotoModeTime() end
---@return AActor
function ATimeOfDayLightingManager:GetCurrentBlendTrigger() end
function ATimeOfDayLightingManager:EndRestTimelapse() end
---@return boolean
function ATimeOfDayLightingManager:BeginRestTimelapse() end


---@class ATimelapseCameraPlacement : AActor
---@field Spline USplineComponent
ATimelapseCameraPlacement = {}

---@param InCameraActor AActor
function ATimelapseCameraPlacement:Start(InCameraActor) end
---@param Active boolean
function ATimelapseCameraPlacement:OnTimelapseChange(Active) end
function ATimelapseCameraPlacement:End() end


---@class ATrapBuilding : ABuilding
---@field OnCharacterEnter FTrapBuildingOnCharacterEnter
---@field OnCharacterExit FTrapBuildingOnCharacterExit
---@field OnItemAdded FTrapBuildingOnItemAdded
---@field OnTrapArmed FTrapBuildingOnTrapArmed
---@field OnTrapTriggerStateChange FTrapBuildingOnTrapTriggerStateChange
---@field TriggerTrap boolean
---@field InteractText FLocString
---@field TrapArmedSetting ETrapArmedSetting
---@field TrapApplyType ETrapApplyType
---@field TriggerDelay float
---@field TriggerRearmTime float
---@field bTriggerOnCooldown boolean
---@field bDestroyOnTrigger boolean
---@field SelfDamageOnTrigger float
---@field bFriendlyFire boolean
---@field bFriendlyTrigger boolean
---@field bAlwaysTick boolean
---@field bAcceptAnyPlayerDamage boolean
---@field DamageData FDamageData
---@field TrapAttackData FDataTableRowHandle
---@field StatusEffects TArray<FDataTableRowHandle>
---@field TrapRequirements FRecipeRequirements
---@field TrapHitParams FTrapHitParams
---@field HazardClass TSoftClassPtr<AHazard>
---@field TrapAttackTargetPoint ATargetPoint
---@field bLastActorOnHitHazardOwner boolean
---@field LastActorOnHit AActor
---@field TrapAttack UAttack
---@field ItemsAdded int32
---@field TargetsInside TArray<TWeakObjectPtr<ASurvivalCharacter>>
---@field bTrapArmed boolean
---@field TrapTriggerState ETrapTriggerState
---@field TriggerComponents TArray<UPrimitiveComponent>
---@field AttackHandlerComponent UAttackHandlerComponent
ATrapBuilding = {}

function ATrapBuilding:SpawnHazard() end
---@param NewTrapTriggerState ETrapTriggerState
---@param Flags ESetTrapStateFlags
function ATrapBuilding:SetTrapTriggerState(NewTrapTriggerState, Flags) end
---@param bActive boolean
---@param bForce boolean
function ATrapBuilding:SetTrapArmed(bActive, bForce) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function ATrapBuilding:OnTriggerEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function ATrapBuilding:OnTriggerBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@param SpawnedHazard AHazard
function ATrapBuilding:OnSpawnHazard(SpawnedHazard) end
function ATrapBuilding:OnRep_TrapTriggerState() end
function ATrapBuilding:OnRep_TrapArmed() end
function ATrapBuilding:OnRep_ItemsAdded() end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function ATrapBuilding:OnHit(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@return boolean
function ATrapBuilding:IsTrapArmed() end
---@return boolean
function ATrapBuilding:IsFull() end
---@return float
function ATrapBuilding:GetTriggerRearmTime() end
---@return float
function ATrapBuilding:GetTriggerDelay() end
---@return ETrapTriggerState
function ATrapBuilding:GetTrapTriggerState() end
---@return float
function ATrapBuilding:GetRemainingTriggerDelay() end
---@return int32
function ATrapBuilding:GetNumItems() end
function ATrapBuilding:ForceTrigger() end


---@class ATriggerConnector : AActor
---@field ShaftLength float
---@field MinShaftScale float
---@field TipLength float
---@field BaseHeight float
---@field SecondaryHeight float
---@field MeshScale float
---@field PlayerPlacementMaxForwardDistance float
---@field PlayerPlacementBackoutDistance float
---@field SplineEndMesh UStaticMeshComponent
---@field ShaftMesh UStaticMeshComponent
---@field PersistentComponent UPersistenceComponent
---@field ObsidianIDComponent UObsidianIDComponent
---@field Start FVector_NetQuantize
---@field End FVector_NetQuantize
---@field OnEditingChanged FTriggerConnectorOnEditingChanged
---@field SenderID int32
---@field ReceiverID int32
---@field ConnectionId int32
---@field EventBehaviors TArray<FSelectedEventBehaviorData>
---@field IsSecondConnection boolean
---@field CustomizingPlayer ASurvivalPlayerCharacter
---@field PlacingPlayer ASurvivalPlayerCharacter
---@field SendEventInfo FSendTriggerEventInfo
---@field EventInProgress FDataTableRowHandle
---@field InProgressCustomizations TArray<FCustomizedValue>
---@field AlwaysVisibleDistance float
---@field HasUpdatedMeshesWithBothIDs boolean
---@field AllEvents TArray<FDataTableRowHandle_NetCrc>
---@field ValidBehaviors TArray<FDataTableRowHandle_NetCrc>
---@field ReceiverCustomPropertyRowHandle FDataTableRowHandle_NetCrc
---@field WasModifiedDuringValidation boolean
---@field MaterialMode ETriggerConnectionMaterialMode
---@field OverrideMaterialMode ETriggerConnectionMaterialMode
---@field DistanceFadeMaterial UMaterialInterface
---@field ValidationFailedDistanceFadeMaterial UMaterialInterface
---@field ValidationFailedAlwaysVisibleMaterial UMaterialInterface
---@field EmptyDistanceFadeMaterial UMaterialInterface
---@field EmptyAlwaysVisibleMaterial UMaterialInterface
---@field DistanceFadeMID UMaterialInstanceDynamic
---@field ValidationFailedDistanceFadeMID UMaterialInstanceDynamic
---@field EmptyDistanceFadeMID UMaterialInstanceDynamic
---@field TriggerGroupIndex uint8
---@field WidgetInteract UWidgetInteractComponent
ATriggerConnector = {}

function ATriggerConnector:OnRep_WasModifiedDuringValidation() end
function ATriggerConnector:OnRep_TriggerGroupIndex() end
function ATriggerConnector:OnRep_StartEnd() end
function ATriggerConnector:OnRep_ConnectionID() end
---@param LODActor UBaseLODActor
function ATriggerConnector:OnLODActorConvertedToHardActor(LODActor) end


---@class ATurretBuilding : ABuilding
---@field OnTurretAmmoChanged FTurretBuildingOnTurretAmmoChanged
---@field TurretPawnClass TSubclassOf<APawn>
---@field bAttachMountedCharacter boolean
---@field CharacterMountMontage UAnimMontage
---@field MountAttachSocket FName
---@field UnmountSocket FName
---@field bHideMountedCharacter boolean
---@field MaxPitchDown float
---@field MaxPitchUp float
---@field MaxPitchDown3P float
---@field MaxPitchUp3P float
---@field MaxYawDelta float
---@field TurretRotationInterpSpeed float
---@field AmmoAttackData TArray<FTurretAttackData>
---@field DefaultAttackCooldown float
---@field CooldownTimer float
---@field CurrentCooldown float
---@field SelectedAmmoData FDataTableRowHandle_NetCrc
---@field bCanAutoFire boolean
---@field HorizontalMovementAudioLoop USoundBase
---@field VerticalMovementAudioLoop USoundBase
---@field HorizonalMovementParameter FName
---@field VerticalMovementParameter FName
---@field MovementLoopFadeInTime float
---@field MovementLoopFadeOutTime float
---@field TurretAttack UAttack
---@field TurretComponent USceneComponent
---@field TurretComponent3P USceneComponent
---@field TurretBaseComponent USceneComponent
---@field VisibiltyComponents1P TArray<UPrimitiveComponent>
---@field VisibiltyComponents3P TArray<UPrimitiveComponent>
---@field SkelMesh USkeletalMeshComponent
---@field bIsBusy boolean
---@field CombatTrackers TArray<FPlayerCombatTracker>
---@field bInCombat boolean
---@field AttackHandlerComponent UAttackHandlerComponent
---@field ProximityInventoryComponent UProximityInventoryComponent
---@field MountedCharacter ASurvivalPlayerCharacter
ATurretBuilding = {}

---@param Character ASurvivalPlayerCharacter
function ATurretBuilding:OnTurretExit(Character) end
---@param Character ASurvivalPlayerCharacter
function ATurretBuilding:OnTurretEnter(Character) end
---@param bAttackSuccess boolean
function ATurretBuilding:OnTurretAttack(bAttackSuccess) end
---@param PreviousCharacter ASurvivalPlayerCharacter
function ATurretBuilding:OnRep_MountedCharacter(PreviousCharacter) end
---@param bAttackSuccess boolean
---@param AttackCooldown float
function ATurretBuilding:MulticastNotifyTurretAttack(bAttackSuccess, AttackCooldown) end
---@return boolean
function ATurretBuilding:IsLocallyControlled() end
---@return TArray<UItem>
function ATurretBuilding:GetValidAmmoTypes() end
---@return FDataTableRowHandle
function ATurretBuilding:GetCurrentAmmo() end


---@class ATurretPawn : APawn
---@field OnKillTarget FTurretPawnOnKillTarget
---@field Turret ATurretBuilding
---@field DesiredRotation FRotator
---@field InputRotationScale float
---@field StickInputRotationScale float
ATurretPawn = {}

---@param NewDesiredRotation FRotator
function ATurretPawn:ServerUpdateRotation(NewDesiredRotation) end
function ATurretPawn:ServerReleaseAttack() end
function ATurretPawn:ServerCancel() end
function ATurretPawn:ServerAttack() end
---@param PrevTurret ATurretBuilding
function ATurretPawn:OnRep_Turret(PrevTurret) end
function ATurretPawn:OnRep_DesiredRotation() end
---@return ATurretBuilding
function ATurretPawn:GetTurret() end
---@param Enemy ASurvivalCharacter
function ATurretPawn:ClientSetEnemy(Enemy) end
---@param PreviousController AController
function ATurretPawn:ClientClearUI(PreviousController) end


---@class ATypeRestrictedStorageBuilding : ABuilding
---@field AllowedItem FDataTableRowHandle
---@field StoredMesh UStaticMesh
---@field Capacity int32
---@field PutString FLocString
---@field PutAllString FLocString
---@field OnItemAddedSFX USoundCue
---@field StoredItems TArray<FDataTableRowHandle_NetCrc>
---@field SpawnedVisuals TArray<UStaticMeshComponent>
---@field InstSpawnedVisuals TMap<FName, FInstancedStorageData>
---@field StoredItemCount int32
---@field InventoryComponent UInventoryComponent
ATypeRestrictedStorageBuilding = {}

function ATypeRestrictedStorageBuilding:OnRep_StoredItemCount() end
---@param Sender UInventoryComponent
function ATypeRestrictedStorageBuilding:OnInventoryChanged(Sender) end
function ATypeRestrictedStorageBuilding:MulticastPlaceItem() end
---@param InstigatedBy AActor
---@return boolean
function ATypeRestrictedStorageBuilding:HasPlaceableItem(InstigatedBy) end


---@class AUGCStartPoint : ABuilding
AUGCStartPoint = {}


---@class AUpgradeCollectible : ACollectible
---@field bPartyUpgrade boolean
---@field UpgradePoints int32
---@field SphereComponent USphereComponent
AUpgradeCollectible = {}

---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function AUpgradeCollectible:OnOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end


---@class AUserPlacedFoliageActor : AActor
---@field UserPlacedFoliageISMs TMap<UStaticMesh, UFoliageInstancedStaticMeshComponent>
---@field ObsidianIDComponent UObsidianIDComponent
---@field PersistenceComponent UPersistenceComponent
---@field FoliageItems FReplicatedUserPlacedFoliageSet
AUserPlacedFoliageActor = {}

function AUserPlacedFoliageActor:OnRep_FoliageItems() end


---@class AVFXActor : AActor
---@field TargetActor AActor
AVFXActor = {}



---@class AVolumeBuilding : ABuilding
---@field CollisionComponent UShapeComponent
---@field bVisibleInPlayMode boolean
---@field OverlapBeginEventHandle FDataTableRowHandle
---@field OverlapEndEventHandle FDataTableRowHandle
---@field UseTriggerMany boolean
---@field AllowMultipleConnectionsToSameClass boolean
---@field CurrentOverlaps TArray<AActor>
---@field EditModeVolumeMaterial UMaterialInterface
---@field PlayModeVolumeMaterial UMaterialInterface
---@field TriggerManyBatches TMap<uint32, FTriggerManyBatch>
AVolumeBuilding = {}

function AVolumeBuilding:UpdateNavigation() end
---@param Player ASurvivalPlayerCharacter
function AVolumeBuilding:OnPlayerOverlapEnd(Player) end
---@param Player ASurvivalPlayerCharacter
function AVolumeBuilding:OnPlayerOverlapBegin(Player) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function AVolumeBuilding:OnCollisionComponentEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function AVolumeBuilding:OnCollisionComponentBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@return int32
function AVolumeBuilding:GetNumOverlapsForBroadcastChangeEvent() end


---@class AVolumetricAudioController : AActor
---@field AudioEmitter AVolumetricAudioEmitter
AVolumetricAudioController = {}



---@class AVolumetricAudioEmitter : AVolume
---@field AudioComponent UAudioComponent
AVolumetricAudioEmitter = {}

---@return UAudioComponent
function AVolumetricAudioEmitter:GetAudioComponent() end


---@class AWalkDial : AActor
---@field Radius float
---@field MotionEater UCharacterMotionEaterComponent
---@field DialRootComponent USceneComponent
---@field DialMeshComponent UStaticMeshComponent
---@field InteractString FLocString
---@field bIsBusy boolean
AWalkDial = {}

---@param Sender UCharacterMotionEaterComponent
---@param Input FVector2D
function AWalkDial:OnMotionInput(Sender, Input) end
---@param Sender UCharacterMotionEaterComponent
---@param Character ASurvivalCharacter
function AWalkDial:OnCharacterDetached(Sender, Character) end
---@param Sender UCharacterMotionEaterComponent
---@param Character ASurvivalCharacter
function AWalkDial:OnCharacterAttached(Sender, Character) end
---@param Delta float
function AWalkDial:HandleDialRotated(Delta) end
---@param Character ASurvivalCharacter
function AWalkDial:HandleCharacterDetached(Character) end
---@param Character ASurvivalCharacter
function AWalkDial:HandleCharacterAttached(Character) end


---@class AWaterBody : AActor
---@field DepthImpostorMeshComponent UStaticMeshComponent
---@field ImpostorOffset FVector
---@field ImpostorRelativeScale float
---@field StaticMeshToTile UStaticMesh
---@field MaterialLODs TArray<UMaterialInterface>
---@field NumTiles FIntVector
---@field PostProcessVolume UBoxComponent
---@field PostProcessVolumeHeight int32
---@field PostProcessVolumeOffset FVector
---@field UnderwaterPostProcess UPostProcessComponent
---@field UnderwaterPostProcessMaterial UMaterialInterface
---@field BaseCollider UBoxComponent
---@field BaseCollisionVolumeHeight int32
---@field BaseCollisionOffset FVector
---@field CameraCollider UBoxComponent
---@field CameraCollisionOffset FVector
---@field CameraCollisionVolumeHeight int32
---@field MeshComponents TArray<UStaticMeshComponent>
---@field WaterMIDs TArray<UMaterialInstanceDynamic>
AWaterBody = {}

function AWaterBody:UpdateMeshVisibility() end
---@param MaterialIndex int32
---@param Mid UMaterialInstanceDynamic
function AWaterBody:SetMaterialParameters(MaterialIndex, Mid) end
---@return boolean
function AWaterBody:IsPlayerAboveWater() end
---@return float
function AWaterBody:GetWaterSurfaceWorldHeight() end
---@return float
function AWaterBody:GetLocalPlayerDistanceToWater() end


---@class AWaveBlockerVolume : AVolume
---@field OverlappingPlayers TArray<ASurvivalPlayerCharacter>
AWaveBlockerVolume = {}

---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function AWaveBlockerVolume:OnEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function AWaveBlockerVolume:OnBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end
---@return int32
function AWaveBlockerVolume:NumOverlappingPlayers() end


---@class AWaveSpawnRegionVolume : AVolume
---@field Name FName
---@field Priority int32
---@field FlyingCreatureWaveRegions uint32
---@field FlyingCreatureOnlyVolume boolean
AWaveSpawnRegionVolume = {}

---@param Point FVector
---@return boolean
function AWaveSpawnRegionVolume:IsPointInVolume(Point) end
---@param RegionA AWaveSpawnRegionVolume
---@param RegionB AWaveSpawnRegionVolume
---@return boolean
function AWaveSpawnRegionVolume:CanFlyingCreaturesCrossRegions(RegionA, RegionB) end


---@class AWaveSpawnTarget : ATargetPoint
---@field bIsObstructed boolean
---@field Volume AWaveSpawnRegionVolume
---@field AllowedTypes ESpawnTargetAllowedTypes
AWaveSpawnTarget = {}



---@class AWaypoint : ATargetPoint
---@field WaypointType EWaypointType
---@field NextWaypoint AWaypoint
---@field Duration float
---@field EmergeVariation int32
---@field Anim UAnimMontage
---@field AnimProp TSoftClassPtr<AActor>
---@field AnimPropSocket FName
---@field ChatterEvent FChatterEventReference
---@field ChatterDelay float
---@field ObsidianIDComponent UObsidianIDComponent
AWaypoint = {}

---@param InWaypoint AWaypoint
function AWaypoint:SetNextWaypoint(InWaypoint) end


---@class AWendellBotCharacter : AFlyingSurvivalCharacter
---@field PersistenceComponent UPersistenceComponent
---@field bActivated boolean
AWendellBotCharacter = {}

---@param RestDuration float
function AWendellBotCharacter:HandleGameRestWendell(RestDuration) end
---@param Sender UPartyComponent
---@param Player ASurvivalPlayerCharacter
function AWendellBotCharacter:HandleFixUpFollowTarget(Sender, Player) end
---@return boolean
function AWendellBotCharacter:GetIsActivated() end
---@param Activator AActor
function AWendellBotCharacter:ActivateFollow(Activator) end
function AWendellBotCharacter:Activate() end


---@class AWidgetBuilding : ABuilding
---@field WidgetInteractionComponent UWidgetInteractComponent
AWidgetBuilding = {}



---@class AWinLoseUIBuilding : AWidgetBuilding
---@field CustomText FString
---@field CustomTextFiltered FString
AWinLoseUIBuilding = {}

---@param Instigators TArray<AActor>
function AWinLoseUIBuilding:ShowWidgetForInstigators(Instigators) end
---@param Instigators TArray<AActor>
function AWinLoseUIBuilding:MulticastHandleActivate(Instigators) end
---@return FString
function AWinLoseUIBuilding:GetCustomText() end


---@class AZiplineAnchorBuilding : ABuilding
---@field ZiplineAnchor UZiplineAnchor
---@field bPlayerCanInteract boolean
---@field bPlayerCanInteractEditMode boolean
AZiplineAnchorBuilding = {}



---@class AZiplineHandleProp : AActor
AZiplineHandleProp = {}


---@class AZiplineLine : ABuilding
---@field OnActorStartZiplining FZiplineLineOnActorStartZiplining
---@field OnActorStopZiplining FZiplineLineOnActorStopZiplining
---@field SplineMesh USplineMeshComponent
---@field SplineCollision USplineMeshComponent
---@field InitialAnchorA AZiplineAnchorBuilding
---@field InitialAnchorB AZiplineAnchorBuilding
---@field Anchor1 UZiplineAnchor
---@field Anchor2 UZiplineAnchor
---@field AnchorLocation1 FVector_NetQuantize
---@field AnchorLocation2 FVector_NetQuantize
---@field IngredientLengthUnit float
---@field CustomName FString
---@field CustomNameFiltered FString
---@field ItemAttachmentAudio USoundCue
AZiplineLine = {}

---@param DeltaTime float
function AZiplineLine:TickUpdatePosition(DeltaTime) end
function AZiplineLine:OnRep_AnchorLocation() end
function AZiplineLine:OnRep_Anchor2() end
function AZiplineLine:OnRep_Anchor1() end
---@param Anchor UZiplineAnchor
---@return boolean
function AZiplineLine:HasAnchor(Anchor) end
---@param Actor AActor
function AZiplineLine:HandleActorStopZiplining(Actor) end
---@param Actor AActor
function AZiplineLine:HandleActorStartZiplining(Actor) end
---@param VerticalTerminalSpeed float
---@return float
function AZiplineLine:GetTerminalSpeed(VerticalTerminalSpeed) end
---@return float
function AZiplineLine:GetSlope() end
---@return FVector
function AZiplineLine:GetRightDirection() end
---@param Anchor UZiplineAnchor
---@return UZiplineAnchor
function AZiplineLine:GetOtherAnchor(Anchor) end
---@return float
function AZiplineLine:GetLength() end
---@return FVector
function AZiplineLine:GetDirection() end
---@return FRotator
function AZiplineLine:GetAttachedRotation() end
---@param BaseSpeed float
---@return float
function AZiplineLine:GetAscendSpeed(BaseSpeed) end
---@return FVector
function AZiplineLine:GetAnchorLocation2() end
---@return FVector
function AZiplineLine:GetAnchorLocation1() end
---@return UZiplineAnchor
function AZiplineLine:GetAnchor2() end
---@return UZiplineAnchor
function AZiplineLine:GetAnchor1() end
function AZiplineLine:BlueprintUpdateZipline() end
function AZiplineLine:BlueprintInitializeZipline() end
---@param AnchorA UZiplineAnchor
---@param AnchorB UZiplineAnchor
---@return boolean
function AZiplineLine:AreAnchors(AnchorA, AnchorB) end


---@class AZiplineSelectorPawn : APawn
---@field OnTargetZiplineAnchorChanged FZiplineSelectorPawnOnTargetZiplineAnchorChanged
---@field OnZiplineAttachedToOrigin FZiplineSelectorPawnOnZiplineAttachedToOrigin
---@field CurrentAnchor UZiplineAnchor
---@field OriginAnchor UZiplineAnchor
---@field CameraComponent UCameraComponent
---@field LineClass TSubclassOf<AZiplineLine>
---@field LerpTime float
AZiplineSelectorPawn = {}

---@param ToOther UZiplineAnchor
function AZiplineSelectorPawn:ServerSetCurrentAnchor(ToOther) end
---@param ToOther UZiplineAnchor
function AZiplineSelectorPawn:ServerCreateZipline(ToOther) end
function AZiplineSelectorPawn:ServerCancel() end
function AZiplineSelectorPawn:OnRep_OriginAnchor() end
---@param Anchor UZiplineAnchor
---@return boolean
function AZiplineSelectorPawn:IsValidAnchor(Anchor) end
---@param Anchor UZiplineAnchor
---@return boolean
function AZiplineSelectorPawn:IsSelectableAnchor(Anchor) end
---@param Anchor UZiplineAnchor
---@return boolean
function AZiplineSelectorPawn:IsConnectionBlocked(Anchor) end
---@param Anchor UZiplineAnchor
---@return boolean
function AZiplineSelectorPawn:IsAlreadyConnected(Anchor) end
---@param Sender UZiplineAnchor
---@param Line AZiplineLine
function AZiplineSelectorPawn:HandleZiplineAttachedToOriginAnchor(Sender, Line) end
---@param Sender UZiplineAnchor
function AZiplineSelectorPawn:HandleOriginAnchorDestroyed(Sender) end
---@param Anchor UZiplineAnchor
---@return FString
function AZiplineSelectorPawn:GetErrorString(Anchor) end
---@return TArray<FRecipeRequirements>
function AZiplineSelectorPawn:GetCurrentAnchorRequirements() end


---@class FAICombatAction
---@field TargetActor AActor
---@field DesiredAttack UAttack
---@field AnimPreAttack UAnimMontage
FAICombatAction = {}



---@class FAIDynamicParam_Maine
---@field ParamName FName
---@field ParamType EAIParamType
---@field Value float
---@field ValueSelector FEQSParameter
FAIDynamicParam_Maine = {}



---@class FAIShoutEvent
---@field Shouter AActor
---@field Target AActor
---@field Tag FName
FAIShoutEvent = {}



---@class FAISoundEvent
---@field Instigator AActor
---@field SoundLocation FVector
---@field Intensity float
---@field Range float
---@field Tag FName
FAISoundEvent = {}



---@class FAbilityData : FTableRowBase
---@field AttackData FDataTableRowHandle
---@field Cooldown float
---@field BeginCooldownConfig ECooldownBeginConfig
---@field SetBeginCooldown float
---@field Priority int32
---@field AbilityTargetType EAbilityTargetType
---@field ScriptedTargetTags FGameplayTagContainer
---@field UseNearestScriptedTarget boolean
---@field AbilityConditions TArray<EAbilityCondition>
---@field PreferredNextAbility FDataTableRowHandle
---@field IgnoreCooldownInPreferedAbility boolean
---@field AnimPreAttack UAnimMontage
FAbilityData = {}



---@class FAchievementData : FTableRowBase
---@field AchievementUnlockTag FString
---@field PlayerStat UPlayerStatConfig
---@field bTotalPartyPlayerStat boolean
---@field GlobalVariable FGlobalVariableReference
---@field AchievementStat EAchievementStat
---@field ComparisonOperator EComparisonOperator
---@field ConditionalValue int32
---@field bHostMustBePresentAtValueChange boolean
---@field bClientMustBePresentAtValueChange boolean
---@field bCanUnlockInCreativeMode boolean
FAchievementData = {}



---@class FAchievementStatus
---@field AchievementName FName_NetCrc
---@field LastKnownStatValue int32
---@field AchievementData FAchievementData
FAchievementStatus = {}



---@class FActiveConversationData
FActiveConversationData = {}


---@class FActiveQuestStickiedData
---@field QuestRowHandle FDataTableRowHandle_NetCrc
---@field bStickiedState boolean
FActiveQuestStickiedData = {}



---@class FActiveScreenEffect
---@field ScreenEffectData UScreenEffectData
FActiveScreenEffect = {}



---@class FActorCustomTickFunction : FTickFunction
FActorCustomTickFunction = {}


---@class FActorMaterialKey
---@field MeshComponent TWeakObjectPtr<UMeshComponent>
FActorMaterialKey = {}



---@class FAddItemResult
---@field InventoryItems TArray<UItem>
---@field WorldItems TArray<UItem>
FAddItemResult = {}



---@class FAllowableBuildingPenetration
---@field Depth FFloatRange
---@field Normal FFloatRange
FAllowableBuildingPenetration = {}



---@class FAnimEffectParams
FAnimEffectParams = {}


---@class FAnyControlMapping
---@field Key FAnyControlMappingKey
---@field Chord FInputChord
FAnyControlMapping = {}



---@class FAnyControlMappingKey
---@field Type EControlMappingKeyType
---@field Name FName
---@field bAxisPositive boolean
FAnyControlMappingKey = {}



---@class FAppearanceParams
---@field AppearanceTag FGameplayTag
---@field bFemale boolean
FAppearanceParams = {}



---@class FArmorAttachData
---@field ArmorAttachActor TSoftClassPtr<AActor>
---@field ArmorAttachSocket FName
FArmorAttachData = {}



---@class FArmorEquipmentSlot
---@field EquipmentSlot EEquipmentSlot
---@field DurabilityRatio float
---@field Armor TWeakObjectPtr<UItem>
FArmorEquipmentSlot = {}



---@class FAsyncTraceGroup
FAsyncTraceGroup = {}


---@class FAttackAIParams
---@field MinDist float
---@field MaxDist float
---@field PreferredMaxDist float
---@field PreferredDistPostLunge float
---@field PreferredHeight float
---@field RequiredSideClearance float
---@field bLockRotation boolean
---@field bRequiresFacing boolean
FAttackAIParams = {}



---@class FAttackAmmoData
---@field AmmoItem FDataTableRowHandle
---@field Attack FDataTableRowHandle
FAttackAmmoData = {}



---@class FAttackComboData
---@field Attacks TArray<FDataTableRowHandle>
---@field bLoop boolean
---@field ScalingType FGameplayTag
FAttackComboData = {}



---@class FAttackData : FTableRowBase
---@field DamageData FDamageData
---@field DamageDataSecondary TArray<FDamageData>
---@field ChargedDamageData FDamageData
---@field ChargeTime float
---@field bChargeHoldChainsAttack boolean
---@field Range float
---@field ChargedRange float
---@field OverrideTraceRadius float
---@field ConeAngle float
---@field ConeBaseDirectionAngle float
---@field ConeBaseDirectionSymetry boolean
---@field bIgnoreVisibilityCheck boolean
---@field Duration float
---@field SoundIntensity float
---@field SoundRange float
---@field HitResolutionType EAttackHitType
---@field bIsHostile boolean
---@field bFriendlyFire boolean
---@field bIgnoreOwner boolean
---@field bDropHauledItems boolean
---@field FireAttackOnFullCharge boolean
---@field bEndAttackOnHit boolean
---@field bHitFrameLoops boolean
---@field bIsJumpAttack boolean
---@field bChargeHitOnlyOnCharacter boolean
---@field bSelfDestruct boolean
---@field bDestroyTarget boolean
---@field bIgnoreItemDamageTypeModifiers boolean
---@field bCanTriggerOnTriggeredAttacks boolean
---@field bCanTriggerExtraAttacks boolean
---@field AIParams FAttackAIParams
---@field StaminaCost int32
---@field bConsumeStaminaOnHitFrame boolean
---@field ProjectileClass TSoftClassPtr<AProjectile>
---@field ChargedProjectileClass TSoftClassPtr<AProjectile>
---@field SummonClass TSoftClassPtr<ASurvivalCharacter>
---@field Hazards TArray<FAttackHazardParams>
---@field bRangedAttack boolean
---@field bBurrowAttack boolean
---@field bBurrowOnEndAttack boolean
---@field bUnBurrowOnEndAttack boolean
---@field bForceSwapFoliageOnHit boolean
---@field ProjectileAttackTime float
---@field OriginSocket FName
---@field LaunchOrientationOffset FRotator
---@field LaunchOrientationDeviation FRotator
---@field bUseLegacyOffset boolean
---@field bThrowAttack boolean
---@field MinThrowIntensity float
---@field MaxThrowIntensity float
---@field bSummonBossMobsPhase boolean
---@field StatusEffects TArray<FDataTableRowHandle>
---@field StatusEffectApplyType EAttackStatusEffectApplyType
---@field AttackAnim UAttackAnimEffect
---@field WeaponAnim TSoftObjectPtr<UAnimMontage>
---@field DeflectAnim TSoftObjectPtr<UAnimMontage>
---@field DeathNotification FDataTableRowHandle
---@field StartVFX TSoftObjectPtr<UVisualEffect>
---@field ChargingVFX TSoftObjectPtr<UVisualEffect>
---@field LaunchVFX TSoftObjectPtr<UVisualEffect>
---@field AttackVFX TSoftObjectPtr<UVisualEffect>
---@field AttackChargedVFX TSoftObjectPtr<UVisualEffect>
---@field SoundFX TSoftObjectPtr<USoundBase>
---@field ChargingSFX TSoftObjectPtr<USoundBase>
---@field LaunchSFX TSoftObjectPtr<USoundBase>
---@field HitEffect TSoftObjectPtr<USurfaceEffectData>
---@field bActivateWeaponEffects boolean
---@field Tags FGameplayTagContainer
FAttackData = {}



---@class FAttackHazardParams
---@field HazardClass TSoftClassPtr<AHazard>
---@field bAttachToOwner boolean
---@field AttachSocket FName
FAttackHazardParams = {}



---@class FAttackTriggerData : FBaseCustomDropdownData
---@field CustomTags FGameplayTagContainer
FAttackTriggerData = {}



---@class FAttractionCDOData
---@field Actions TArray<UGoapAction>
FAttractionCDOData = {}



---@class FAttractionComponentKey
---@field HardComponent TWeakObjectPtr<UAttractionComponent>
---@field LODActor UBaseLODActor
---@field FoliageKey FFoliageKey
FAttractionComponentKey = {}



---@class FAuraEmitterInfo : FAuraInfoBase
---@field Emitter UAuraEmitterComponent
---@field RadiusSq float
FAuraEmitterInfo = {}



---@class FAuraInfoBase
FAuraInfoBase = {}


---@class FAuraOverlapCounts
FAuraOverlapCounts = {}


---@class FAuraReceiverInfo : FAuraInfoBase
---@field AuraTagOverlapCount TMap<FGameplayTag, FAuraOverlapCounts>
---@field Receiver TWeakObjectPtr<UAuraReceiverComponent>
FAuraReceiverInfo = {}



---@class FAutoConsoleCommandProperties
---@field bEnable boolean
---@field bTriggerRegularly boolean
---@field bOneTimeTrigger boolean
---@field ExecuteWaitTime float
---@field bTriggerAfterTravel boolean
---@field Command FString
FAutoConsoleCommandProperties = {}



---@class FAutoEquipmentProperties
---@field ItemName FString
---@field Slot int32
---@field Amount int32
---@field bRefill boolean
---@field bCanThrow boolean
FAutoEquipmentProperties = {}



---@class FAutoRandomInputProperties
---@field bEnable boolean
---@field Key FKey
---@field bAxis boolean
---@field MinAxisDeltaSpeed float
---@field MaxAxisDeltaSpeed float
---@field bHold boolean
---@field MinHoldTime float
---@field MaxHoldTime float
---@field MinTriggerTime float
---@field MaxTriggerTime float
FAutoRandomInputProperties = {}



---@class FAxisDirectionKey
---@field AxisName FName
---@field bPositive boolean
FAxisDirectionKey = {}



---@class FBase
---@field Location FVector
---@field Radius float
---@field FullLocation FVector
---@field FullRadius float
---@field Buildings TArray<ABuilding>
---@field InstancedBuildings TArray<FBuildingGridBuildingId>
---@field WaveRegionData TMap<AWaveSpawnRegionVolume, FBaseWaveRegionData>
---@field BaseLocationRegion AWaveSpawnRegionVolume
FBase = {}



---@class FBaseBossPhase
---@field StatusEffects TArray<FDataTableRowHandle>
---@field AbilityDataList TArray<FDataTableRowHandle>
---@field OverrideMusicTrack UMusicTrackData
FBaseBossPhase = {}



---@class FBaseBuildingData : FTableRowBase
---@field LocalizedDisplayName FLocString
---@field LocalizedWildcardDisplayName FLocString
---@field SearchableKeywords TArray<FLocString>
---@field LocalizedDescription FLocString
---@field Icon TSoftObjectPtr<UTexture2D>
---@field ModIcon TSoftObjectPtr<UObject>
---@field Heat int32
---@field bBaseBuilding boolean
---@field bNewGamePlus boolean
---@field WaveDamageScore float
---@field PlacementData FPlacementData
---@field GridPlacementData FGridPlacementData
---@field CozinessContribution int32
---@field CozinessAdditionalContribution float
---@field bCozinessStructural boolean
---@field ModelViewerMeshOverride TSoftObjectPtr<UStaticMesh>
---@field ModelViewerMaterialsOverride TArray<TSoftObjectPtr<UMaterialInterface>>
---@field InspectModelOverrideSoft TSoftClassPtr<AActor>
---@field bModelViewerAddOverheadSpotlight boolean
---@field ModelViewerYRotation float
---@field bCanCollapse boolean
---@field PivotUpdateHistory TArray<FBuildingPivotUpdate>
FBaseBuildingData = {}



---@class FBaseCustomDropdownData : FTableRowBase
---@field DisplayName FLocString
FBaseCustomDropdownData = {}



---@class FBaseItemData : FTableRowBase
---@field Comment FString
---@field LocalizedDisplayName FLocString
---@field LocalizedWildcardDisplayName FLocString
---@field SearchableKeywords TArray<FLocString>
---@field LocalizedDescription FLocString
---@field Icon TSoftObjectPtr<UObject>
---@field ModIcon TSoftObjectPtr<UObject>
---@field ItemType EItemType
---@field bNewGamePlus boolean
---@field DuplicateBaseCost int32
---@field RecycleReward int32
---@field DeduplicationItemRewardCount int32
---@field RarityTag FGameplayTag
---@field StackSizeTag FGameplayTag
---@field KeyItemCategory FGameplayTag
---@field KeyItemSubCategory FGameplayTag
---@field bIgnoreForFinalScore boolean
---@field BestiaryData FDataTableRowHandle
---@field OnKeyItemPickupVariable FGlobalVariableReference
---@field OnKeyItemPickupVariableValue int32
---@field OnKeyItemTurnedInVariable FGlobalVariableReference
---@field OnKeyItemTurnedInVariableValue int32
---@field KeyItemDateDay uint8
---@field KeyItemDateMonth uint8
---@field KeyItemDateYear uint8
---@field NewGamePlusRewardItem FDataTableRowHandle
---@field UnlockRecipes TArray<FDataTableRowHandle>
---@field ResearchUnlockRecipes TArray<FDataTableRowHandle>
---@field NewResearchUnlockRecipes TArray<FDataTableRowHandle>
---@field TechTreeUnlocks TArray<FDataTableRowHandle>
---@field WorldActor TSoftClassPtr<ASpawnedItem>
---@field DynamicMesh TSoftObjectPtr<UStaticMesh>
---@field DynamicMaterials TArray<TSoftObjectPtr<UMaterialInterface>>
---@field Tier int32
---@field bWorldMarker boolean
---@field bCanEnhance boolean
---@field ValidEnhancementTags FGameplayTagContainer
---@field EnhancementTagUpdates TArray<FGameplayTagChange>
---@field bHotDroppable boolean
---@field bTrashable boolean
---@field bIsFlammable boolean
---@field bWasCut boolean
---@field bDecomposeOnLoad boolean
---@field PlayerEquippedActor TSoftClassPtr<ASpawnedItem>
---@field CustomEquippedActors TArray<FEquippedActorOption>
---@field ArmorAttachData FArmorAttachData
---@field FirstPersonArmorAttachData FArmorAttachData
---@field EquippableData FEquippableData
---@field Slot EEquipmentSlot
---@field TwoHanded boolean
---@field Stance int32
---@field OverrideEquipSocket ESocketName
---@field MarkerType EHUDMarkerType
---@field MarkerVariation int32
---@field ItemSlotTintTag FGameplayTag
---@field bIsLightSource boolean
---@field bCanBlock boolean
---@field bCannotBlockWhileAttacking boolean
---@field BlockDamageMultiplier float
---@field BlockStaminaCost float
---@field BlockStaminaRegenMultiplier float
---@field BlockAnim TSoftObjectPtr<UAnimMontage>
---@field BlockItemAnim TSoftObjectPtr<UAnimMontage>
---@field BlockedEffectAnim TSoftObjectPtr<UBaseAnimEffect>
---@field BlockSound TSoftObjectPtr<USoundBase>
---@field PerfectBlockSound TSoftObjectPtr<USoundBase>
---@field AttackComboData FAttackComboData
---@field AlternateAttackComboData FAttackComboData
---@field SwimmingAttackComboData FAttackComboData
---@field AdaptiveTriggerWeaponAction EAdaptiveTriggerWeaponAction
---@field AdaptiveTriggerWeaponStart uint8
---@field AdaptiveTriggerWeaponEnd uint8
---@field AdaptiveTriggerWeaponStrength uint8
---@field AdaptiveTriggerWeaponStrengthEnd uint8
---@field VibrateOnCharge boolean
---@field VibrateOnChargeStartTime float
---@field VibrateOnChargeStartPosition uint8
---@field VibrateOnChargeFrequency uint8
---@field VibrateOnChargeAmplitude uint8
---@field AmmoAttackReference FDataTableRowHandle
---@field AmmoAttackData TArray<FAttackAmmoData>
---@field ConsumableData TArray<FDataTableRowHandle>
---@field ConsumeChatterType EChatterConsumableType
---@field ConsumeChatterEvent FChatterEventReference
---@field ConsumeAudio TSoftObjectPtr<USoundCue>
---@field ConsumeAnimType EInteractAnimType
---@field bHasConsumableCooldown boolean
---@field bBurgleQuestCanAnalyze boolean
---@field BurgleQuestAnalyzeRewardLevel int32
---@field OverrideTemplateConsumeAction UGoapActionConsumeItem
---@field HaulingData FHaulingData
---@field ProcessingOptions TArray<FItemProcessingStateChange>
---@field ProcessingActorOverride TSoftClassPtr<ASpawnedItem>
---@field HatchTime float
---@field HatchData TSoftObjectPtr<UHatchingDataAsset>
---@field GardenModifierType EGardenModifierType
---@field GardenModifierValue float
---@field SpoilData FSpoilData
---@field ThrowData FThrowData
---@field PowerData FItemPowerData
---@field InspectData FInspectData
---@field GlidingData FGlidingData
---@field PlacementData FPlacementData
---@field bCanZipUp boolean
---@field ResourceCategory FGameplayTagContainer
---@field Tags FGameplayTagContainer
---@field TelemetryTag FGameplayTag
---@field WaveSpawnWeight int32
---@field PickupAudio TSoftObjectPtr<USoundCue>
---@field AudioData TSoftObjectPtr<UCharacterAudioData>
---@field InteractAnimType EInteractAnimType
---@field bDropsOnDeath boolean
FBaseItemData = {}



---@class FBaseRecipeData : FTableRowBase
---@field Visibility ERecipeVisibility
---@field bWasCut boolean
---@field bHideInCraftingMenu boolean
---@field bDontAutoUnlockInCreative boolean
---@field bQuestCritical boolean
---@field CategoryTag FGameplayTag
---@field Requirements TArray<FRecipeRequirements>
---@field ReplaceRecipe FDataTableRowHandle
FBaseRecipeData = {}



---@class FBaseWaveRegionData
---@field AnchoredBuildings TArray<TWeakObjectPtr<ABuilding>>
---@field AnchoredInstancedBuildings TArray<FBuildingGridBuildingId>
FBaseWaveRegionData = {}



---@class FBatchedAttackEffects
---@field AttackDataRowHandle FDataTableRowHandle_NetCrc
---@field Location FVector_NetQuantize
---@field bCharged boolean
---@field BatchedSequence TArray<EBatchedAttackEffectSegments>
FBatchedAttackEffects = {}



---@class FBatchedAttackEffectsEnvHit : FBatchedAttackEffects
---@field HitResults TArray<FHitResult>
FBatchedAttackEffectsEnvHit = {}



---@class FBehaviorMovementConfig
---@field DefaultConfig FMovementConfig
FBehaviorMovementConfig = {}



---@class FBestiaryData : FTableRowBase
---@field Creature TSoftClassPtr<ASurvivalCharacter>
---@field WeakpointTags FGameplayTagContainer
---@field Stats TArray<UPlayerStatConfig>
---@field RareUnlockItemData FDataTableRowHandle
---@field RareDropChance float
FBestiaryData = {}



---@class FBestiaryStat
---@field Stat UPlayerStatConfig
---@field Value int32
FBestiaryStat = {}



---@class FBestiaryUIData
---@field BestiaryDataHandle FDataTableRowHandle
---@field Weaknesses TArray<ESurvivalDamageTypeFlags>
---@field Resistances TArray<ESurvivalDamageTypeFlags>
---@field Weakpoints TArray<FGameplayTag>
---@field LocalizedDisplayName FString
---@field Tier int32
---@field Stats TArray<FBestiaryStat>
FBestiaryUIData = {}



---@class FBirdSplineItemSpawn
---@field Chance float
---@field SpawnActor TSubclassOf<AActor>
---@field SplineRange FFloatRange
FBirdSplineItemSpawn = {}



---@class FBitArrayWrapper
FBitArrayWrapper = {}


---@class FBlendTriggerData
---@field BlendTrigger ABlendTrigger
---@field AssociatedTickActors TArray<AActor>
---@field LevelName FName
---@field PlayersInTrigger TArray<AActor>
FBlendTriggerData = {}



---@class FBlendTriggerGroupSettings
---@field OverrideViewDistanceScale boolean
---@field ViewDistanceScale float
FBlendTriggerGroupSettings = {}



---@class FBossActorSpawn
---@field ActorToSpawn TSoftClassPtr<AActor>
---@field SpawnPoint ATargetPoint
FBossActorSpawn = {}



---@class FBossDroppedItem
---@field ItemHandle FDataTableRowHandle
---@field WorldLocation FVector
FBossDroppedItem = {}



---@class FBossPhase : FBaseBossPhase
---@field HealthThreshold float
FBossPhase = {}



---@class FBreadcrumb
---@field Type EBreadcrumbType
---@field Location FVector
---@field TravelDistance float
---@field Radius float
---@field CreationTime float
---@field DeathTime float
---@field AdvertisedAction FGoapActionInstance
---@field Colony FColonyIdentifier
FBreadcrumb = {}



---@class FBreathSettings
---@field MaxValue float
---@field AdjustmentPerSecond float
---@field RegenPerSecond float
---@field DamageEffect FDataTableRowHandle
---@field OutOfBreathAlertTime int32
---@field RunningOutOfBreathEffectTime int32
---@field VignetteIntensityCurve FRuntimeFloatCurve
FBreathSettings = {}



---@class FBuildingBlockedResult
FBuildingBlockedResult = {}


---@class FBuildingGridAxis
---@field Axis EAxis::Type
---@field Origin1 int32
---@field Origin2 int32
FBuildingGridAxis = {}



---@class FBuildingGridBuildingId
---@field Grid UBuildingGridComponent
---@field ID uint32
FBuildingGridBuildingId = {}



---@class FBuildingGridISMKey
---@field Class UClass
---@field Mesh UStaticMesh
FBuildingGridISMKey = {}



---@class FBuildingGridISMMetadata
FBuildingGridISMMetadata = {}


---@class FBuildingGridISMNavUpdateData
---@field Index int32
---@field Time float
---@field Transform FTransform
FBuildingGridISMNavUpdateData = {}



---@class FBuildingGridKey
---@field Location FIntVector
---@field Slot EBuildingGridSlot
FBuildingGridKey = {}



---@class FBuildingGridKeyArray
---@field Array TArray<FBuildingGridKey>
FBuildingGridKeyArray = {}



---@class FBuildingGridLocation
---@field Grid TWeakObjectPtr<UBuildingGridComponent>
---@field Key FBuildingGridKey
FBuildingGridLocation = {}



---@class FBuildingGridReplicationProxyList
---@field Proxies TArray<ABuildingGridReplicationProxy>
FBuildingGridReplicationProxyList = {}



---@class FBuildingNode
FBuildingNode = {}


---@class FBuildingPivotUpdate
---@field BuildingVersion int32
---@field BuildingClass TSoftClassPtr<ABuilding>
---@field PivotChange FTransform
FBuildingPivotUpdate = {}



---@class FBuildingPlacementReplicatedData
---@field PendingLocation FBuildingGridLocation
---@field ZoopStartLocation FBuildingGridLocation
---@field PendingRotation FQuat
---@field ZoopStartPlacementMode EBuildingPlacementMode
---@field PendingActorClass TSubclassOf<AActor>
FBuildingPlacementReplicatedData = {}



---@class FBuildingPowerBipartiteSet
FBuildingPowerBipartiteSet = {}


---@class FBuildingPowerEdge
---@field NodeA int32
---@field NodeB int32
---@field NetworkIdA int32
---@field NetworkIdB int32
FBuildingPowerEdge = {}



---@class FBuildingPowerId
---@field NetworkId int32
---@field NodeId int32
FBuildingPowerId = {}



---@class FBuildingPowerNetwork
---@field NetworkId int32
---@field GraphVertices TMap<int32, FBuildingPowerVertex>
---@field ReachableNetworks TSet<int32>
---@field AccessibleNetworks TSet<int32>
---@field bIsSwitch boolean
---@field bIsSwitchActive boolean
---@field PowerOutput float
FBuildingPowerNetwork = {}



---@class FBuildingPowerNodeList
---@field Nodes TArray<int32>
FBuildingPowerNodeList = {}



---@class FBuildingPowerVertex
---@field NodeId int32
---@field Building ABuilding
---@field BuildingGuid FGuid
---@field Neighbors TMap<int32, FBuildingPowerNodeList>
FBuildingPowerVertex = {}



---@class FBuildingRecipeData : FBaseRecipeData
---@field Building FDataTableRowHandle
---@field MetaBuilding FMetaBuildingIdentifier
---@field bIsFlammable boolean
FBuildingRecipeData = {}



---@class FBuildingReplicatedData
---@field BuildingId FBuildingGridBuildingId
---@field GridLocation FBuildingGridLocation
---@field ReplacingBuilding FBuildingGridBuildingId
FBuildingReplicatedData = {}



---@class FBurgleQuestInstanceArray : FFastArraySerializer
---@field QuestItems TArray<FBurgleQuestInstanceItem>
---@field Quests TArray<UBurgleQuestInstance>
FBurgleQuestInstanceArray = {}



---@class FBurgleQuestInstanceItem : FFastArraySerializerItem
---@field Quest UBurgleQuestInstance
FBurgleQuestInstanceItem = {}



---@class FBurgleQuestInstanceKillConfiguration : FBurgleQuestParameterValue
---@field CreatureTag FGameplayTag
---@field MinCount int32
---@field MaxCount int32
---@field MaxCountProgress float
FBurgleQuestInstanceKillConfiguration = {}



---@class FBurgleQuestIntParameterValue : FBurgleQuestParameterValue
---@field Value int32
FBurgleQuestIntParameterValue = {}



---@class FBurgleQuestKillGroupRewardConfig
---@field CreatureTag FGameplayTag
---@field SciencePerKill int32
FBurgleQuestKillGroupRewardConfig = {}



---@class FBurgleQuestParameterValue
---@field ProgressRange FFloatRange
---@field GlobalVariableCondition FGlobalVariableReferenceConditional
FBurgleQuestParameterValue = {}



---@class FBurgleQuestTableRowParameterValue : FBurgleQuestParameterValue
---@field Value FDataTableRowHandle
FBurgleQuestTableRowParameterValue = {}



---@class FCVarBase
FCVarBase = {}


---@class FCVarBool : FCVarBase
FCVarBool = {}


---@class FCVarFloat : FCVarBase
FCVarFloat = {}


---@class FCVarInt : FCVarBase
FCVarInt = {}


---@class FCVarStackFrame
FCVarStackFrame = {}


---@class FCachedFoliageMeshInfo
---@field FoliageKey FFoliageKey
---@field FoliageTransform FTransform
---@field TimeStampWhenRemoved float
---@field WorldTimeWhenRemoved float
---@field bRemovedByEditMode boolean
---@field bRemovedDuringPlayMode boolean
---@field bImplementsSwappableFoliageMeshInterface boolean
FCachedFoliageMeshInfo = {}



---@class FCameraTarget
FCameraTarget = {}


---@class FCharacterMeshData : FBaseCustomDropdownData
---@field SkeletalMesh TSoftObjectPtr<USkeletalMesh>
---@field HairAppearance UBaseAppearanceData
---@field bFemale boolean
FCharacterMeshData = {}



---@class FCharacterPropEntry
---@field Actor AActor
FCharacterPropEntry = {}



---@class FChatBoxMessage
---@field SenderPlayerState ASurvivalPlayerState
---@field Message FString
---@field Color FColor
---@field Type EChatBoxMessageType
FChatBoxMessage = {}



---@class FChatWheelData : FTableRowBase
---@field ChatterEvent FChatterEventReference
---@field ChatWheelName FLocString
---@field ChatWheelIcon TSoftObjectPtr<UTexture2D>
FChatWheelData = {}



---@class FCheckRespawnSwapFoliageSharedData
FCheckRespawnSwapFoliageSharedData = {}


---@class FClassMemoryStatsData
---@field BaseClassName FName
---@field DerivedClassNames TSet<FName>
---@field Subclasses TArray<TSoftClassPtr<UObject>>
FClassMemoryStatsData = {}



---@class FClassToRestore
---@field SoftClassPath TSoftClassPtr<AActor>
---@field ExceptionRestoreOption EExceptionRestoreOption
FClassToRestore = {}



---@class FClassTreeNode
---@field LiteData UActorLiteData
FClassTreeNode = {}



---@class FClimbableSplineAnimSegment
---@field TimeRange FFloatRange
---@field Animation UAnimMontage
---@field RotationOffset FRotator
FClimbableSplineAnimSegment = {}



---@class FClimbableSplineKey
---@field HardSplineComponent TWeakObjectPtr<UClimbableSplineComponent>
---@field CDOSplineComponent TWeakObjectPtr<UClimbableSplineComponent>
---@field LODActor UBaseLODActor
---@field FoliageKey FFoliageKey
FClimbableSplineKey = {}



---@class FClusteredHUDMarker
---@field Actor AActor
---@field MarkerType EHUDMarkerType
---@field Params FHUDMarkerParameters
FClusteredHUDMarker = {}



---@class FCollectibleData
---@field Type ECollectibleType
---@field State ECollectibleState
---@field ID FGuid
---@field WorldPos FVector
---@field bHiddenForThisNewGameLoop boolean
FCollectibleData = {}



---@class FColony
---@field Config UColonyConfiguration
FColony = {}



---@class FColonyIdentifier
FColonyIdentifier = {}


---@class FCombatMusicSettings
---@field CombatMusicTag FGameplayTag
---@field CombatMusicTrack UMusicTrackData
---@field Priority int32
FCombatMusicSettings = {}



---@class FCombinedLadderData
---@field CombinedLadder ACombinedLadder
---@field BuildingStack TArray<ALadderBuilding>
FCombinedLadderData = {}



---@class FComboScalingData
---@field Tag FGameplayTag
---@field ScalingValue TArray<float>
FComboScalingData = {}



---@class FConditionalMusicTrack
---@field MusicTrack UMusicTrackData
---@field GlobalVariable FGlobalVariableReference
---@field GlobalVariableComparisonOperator EComparisonOperator
---@field GlobalVariableCompareValue int32
FConditionalMusicTrack = {}



---@class FConsumableData : FTableRowBase
---@field StatusEffects TArray<FDataTableRowHandle>
---@field ConsumeChatterEvent FChatterEventReference
---@field ConsumeChatterType EChatterConsumableType
FConsumableData = {}



---@class FConsumableDataSet : FTableRowBase
---@field ConsumableEffects TArray<FDataTableRowHandle>
---@field ConsumeChatterEvent FChatterEventReference
---@field ConsumeChatterType EChatterConsumableType
FConsumableDataSet = {}



---@class FContextEntry
---@field DisplayImage UTexture2D
---@field DisplayString FLocString
---@field ActionTag FGameplayTag
FContextEntry = {}



---@class FControlActionToAxisBinding
---@field AxisName FName
---@field AxisScale float
FControlActionToAxisBinding = {}



---@class FControlAxisMetadataPair
---@field Key FAxisDirectionKey
---@field MetaData FControlMetadata
FControlAxisMetadataPair = {}



---@class FControlConflictContextMetadata
---@field ConflictsWith TArray<EControlConflictContext>
FControlConflictContextMetadata = {}



---@class FControlMetadata
---@field DisplayName FLocString
---@field GamepadOverrideDisplayName FLocString
---@field Description FLocString
---@field ReverseActionName FName
---@field bRebindableKeyboard boolean
---@field bRebindableGamepad boolean
---@field ConflictCategories TArray<EControlConflictContext>
---@field Category EBindableControlCategory
---@field OrderInUI int32
---@field bHideForKeyboard boolean
---@field bHideForGamepad boolean
---@field bHideForPlaystation boolean
---@field bPreferAnalogBindings boolean
---@field FeatureGate FString
FControlMetadata = {}



---@class FConversationPlayData
FConversationPlayData = {}


---@class FConvoCameraTraceData
FConvoCameraTraceData = {}


---@class FCozinessLevel
---@field RequiredValue int32
---@field BurgleQuestProgressLevel float
---@field BurgleQuestScienceReward int32
---@field StatusEffects TArray<FDataTableRowHandle>
---@field UnlockRecipes TArray<FDataTableRowHandle>
---@field UnlockPerks TArray<FDataTableRowHandle>
---@field UnlockEmotes TArray<FDataTableRowHandle>
---@field UnlockKeyItems TArray<FDataTableRowHandle>
FCozinessLevel = {}



---@class FCreatureSpawnerSpawnData
---@field ActorToSpawn TSoftClassPtr<AActor>
FCreatureSpawnerSpawnData = {}



---@class FCreditsEntry
---@field DebugName FString
---@field DisplayType ECreditsDisplayType
---@field HeaderLevel uint8
---@field RawString FString
---@field ImageKey FString
---@field bRandomizeOrder boolean
FCreditsEntry = {}



---@class FCreditsGroup
---@field SwitchOnly boolean
---@field PlaystationOnly boolean
---@field DebugName FString
---@field Content FString
---@field Credits TArray<FCreditsEntry>
FCreditsGroup = {}



---@class FCustomGameModeSettings
---@field GameDifficulty EGameDifficulty
---@field DynamicMemoryLimitMode EDynamicMemoryLimitMode
---@field bAllRecipesUnlocked boolean
---@field bAllRecipesFree boolean
---@field bEncountersEnabled boolean
---@field bCreaturesIgnorePlayers boolean
---@field bBuildingIntegrityEnabled boolean
---@field bStaminaEnabled boolean
---@field bFriendlyFireEnabled boolean
---@field bDurabilityEnabled boolean
---@field bSpoilingEnabled boolean
---@field bQuestsEnabled boolean
---@field bDamageEnabled boolean
---@field bPetInvincible boolean
---@field bMenusPauseGame boolean
---@field bWavesEnabled boolean
---@field bPerksUnlocked boolean
---@field bUpgradesUnlocked boolean
---@field bBuildModeAvailable boolean
---@field bEditModeAvailable boolean
---@field bBuildingEnabled boolean
---@field bCraftingEnabled boolean
---@field bPhotoModeEnabled boolean
---@field bCreaturesFightEachOther boolean
---@field DeathBehavior EPlayerDeathBehavior
---@field TimeOfDaySpeedMultiplier float
---@field HungerMultiplier float
---@field ThirstMultiplier float
---@field ResourceRespawnMultiplier float
---@field CreatureHealthMultiplier float
---@field FallDamageMultiplier float
FCustomGameModeSettings = {}



---@class FCustomKeyData : FBaseCustomDropdownData
---@field KeyItemData FDataTableRowHandle
FCustomKeyData = {}



---@class FCustomLoadRestoreSettings
---@field bResetAllActorClasses boolean
---@field ExceptionClassesToRestore TArray<FClassToRestore>
---@field bResetPlayerSpawn boolean
---@field bResetPointsOfInterest boolean
---@field bResetSuperChips boolean
---@field bResetRegularChips boolean
---@field bResetPersonalUpgradeCollectables boolean
---@field bResetPartyUpgradeCollectables boolean
---@field bResetColorCollectables boolean
---@field bResetReputations boolean
---@field bResetPerks boolean
---@field bResetPlayerUpgrades boolean
---@field bResetScience boolean
---@field bResetFoliage boolean
---@field bResetQuests boolean
---@field bResetBurgleQuests boolean
---@field bResetTutorialQuests boolean
---@field bResetConversations boolean
---@field bResetBestiary boolean
---@field bResetHarvestNodes boolean
---@field bResetCreatures boolean
---@field bResetTechTreesUnlocked boolean
---@field bResetTechTreePurchasesUnlocked boolean
---@field bResetHourToStartingHour boolean
---@field bResetKeyItems boolean
---@field ExceptionKeyItemsToRestore TArray<FDataTableRowHandle>
---@field ExceptionKeyItemsToRemove TArray<FDataTableRowHandle>
---@field bResetGlobals boolean
---@field ExceptionGlobalsToRestore TArray<FGlobalVariableReference>
---@field GlobalValuesToSetOnLoad TMap<FGlobalVariableReference, int32>
---@field RecipesToRemoveOnLoad TArray<FDataTableRowHandle>
---@field ResetPOIs TArray<UPointOfInterestDataAsset>
---@field PlayerUpgradesToKeepEffect TArray<FDataTableRowHandle>
---@field PlayerUpgradesToNotReset TArray<FDataTableRowHandle>
FCustomLoadRestoreSettings = {}



---@class FCustomProperty
---@field InputType ECustomPropertyInputType
---@field PropertyID FName
---@field PropertyName FLocString
---@field DefaultValue float
---@field DropdownPropertyNames TArray<FLocString>
---@field SliderMinValue float
---@field SliderMaxValue float
---@field SliderStepSize float
---@field ValueFormat ECustomPropertyValueFormat
---@field MaxIntegralDigits int32
---@field MinFractionalDigits int32
---@field MaxFractionalDigits int32
---@field ValueBehavior ECustomPropertyValueBehavior
---@field UserAccess ECustomPropertyAccess
---@field GameModeVisibilityFlags int32
---@field PropertyBehavior TSubclassOf<UCustomPropertyBehaviorBase>
---@field CustomDropdownData UDataTable
---@field bShouldCopyValue boolean
FCustomProperty = {}



---@class FCustomPropertyDataRow : FTableRowBase
---@field CustomPropertyData UCustomPropertyDataAsset
FCustomPropertyDataRow = {}



---@class FCustomSignCopyData : FPlaceableCopyData
FCustomSignCopyData = {}


---@class FCustomizationCameraTraceData
FCustomizationCameraTraceData = {}


---@class FCustomizedValue
---@field PropertyName FName_NetCrc
---@field PropertyValue float
FCustomizedValue = {}



---@class FCutsceneBlendTriggerAttributes
---@field BlendIntensity float
---@field SkylightIntensityMin float
---@field SkylightIntensityMax float
---@field SunIntensityMin float
---@field SunIntensityMax float
---@field MoonIntensityMin float
---@field MoonIntensityMax float
---@field FogThicknessMin float
---@field FogThicknessMax float
---@field HedgeContributionMin float
---@field HedgeContributionMax float
---@field InteriorDaylightContribution boolean
---@field PostProcessExposureContribution boolean
---@field GroundSpecularContribution boolean
---@field UpdateVolumetricFogDrawDistance boolean
FCutsceneBlendTriggerAttributes = {}



---@class FDamageData
---@field Damage float
---@field DamageType TSubclassOf<USurvivalDamageType>
---@field DamageEventType EDamageEventType
---@field ForcedHitReaction EHitReactionType
---@field HitStun int32
---@field Pushback float
---@field DeathNotification FDataTableRowHandle
FDamageData = {}



---@class FDamageInfo
---@field HitLocation FVector
---@field InstigatorController TWeakObjectPtr<AController>
---@field DamageSource TWeakObjectPtr<UObject>
---@field Target TWeakObjectPtr<AActor>
---@field InflictStyle EInflictDamageStyle
---@field DamageType TSubclassOf<UDamageType>
---@field OriginAttack TWeakObjectPtr<UAttack>
---@field Tier int32
---@field HitStun int32
---@field ForcedHitReaction EHitReactionType
---@field BlockType EBlockType
---@field DamageSourceType EDamageSourceType
---@field Pushback float
---@field DamageFlags int32
---@field DeathNotification FDataTableRowHandle
FDamageInfo = {}



---@class FDataTableRowRedirects
---@field RowRedirects TMap<FName, FName>
FDataTableRowRedirects = {}



---@class FDeathInfo
---@field DeathNotificationDataHandle FDataTableRowHandle
---@field DamageType TSubclassOf<UDamageType>
---@field DamageInstigator TSubclassOf<AActor>
---@field PlayerInstigator TWeakObjectPtr<APlayerState>
---@field DamageSourceType EDamageSourceType
---@field bIsIncapacitate boolean
FDeathInfo = {}



---@class FDeathNotificationData : FTableRowBase
---@field DeathMessages TArray<FLocString>
---@field IncapacitationMessages TArray<FLocString>
---@field Icon TSoftObjectPtr<UTexture2D>
FDeathNotificationData = {}



---@class FDefensePointEnemyType
---@field DisplayIconDataRow FDataTableRowHandle
---@field DisplayName FLocString
FDefensePointEnemyType = {}



---@class FDefensePointTarget
---@field TargetBuilding ABuilding
---@field IconVariant int32
FDefensePointTarget = {}



---@class FDefensePointWave
---@field Encounters TArray<AEncounter>
---@field SpawnTime float
FDefensePointWave = {}



---@class FDeferredHandleNewLODActorItem
FDeferredHandleNewLODActorItem = {}


---@class FDeferredRemovalItem
---@field TriggerIDA int32
---@field TriggerIDB int32
---@field ConnectionId int32
FDeferredRemovalItem = {}



---@class FDeferredWaveSpawnActorData
FDeferredWaveSpawnActorData = {}


---@class FDelayedDestructionData
FDelayedDestructionData = {}


---@class FDesiredItemObjectiveLocationRequest
---@field ClosestItemActor AActor
---@field MatchingISMComponents TArray<UInstancedStaticMeshComponent>
FDesiredItemObjectiveLocationRequest = {}



---@class FDestroyedBuildingsData
---@field DestroyedByWave boolean
---@field BuildingScore float
FDestroyedBuildingsData = {}



---@class FDetectedSound
FDetectedSound = {}


---@class FDroppedItem
---@field Item UItem
FDroppedItem = {}



---@class FDroppedItemBuffer
---@field Items TArray<FDroppedItem>
---@field SourceActor AActor
---@field SourceLODActor UBaseLODActor
FDroppedItemBuffer = {}



---@class FDynamicMaterialColorKey
---@field BaseMaterial UMaterialInterface
FDynamicMaterialColorKey = {}



---@class FDynamicMemoryUsageData
---@field TargetPlatform EGamePlatform
---@field LevelName FString
---@field BuildingsFull int32
---@field BuildingsInstanced int32
---@field LODActors int32
---@field SpawnedItemLODActors int32
---@field PlaceableStaticMeshActors int32
FDynamicMemoryUsageData = {}



---@class FEQSParameter
---@field EQSParameter TSubclassOf<UAIEQSParameter>
FEQSParameter = {}



---@class FEditModeResetCachedData
FEditModeResetCachedData = {}


---@class FEditModeSaveLoadData
---@field WorldData USaveWriter
---@field PlayerData TMap<APlayerState, USaveWriter>
FEditModeSaveLoadData = {}



---@class FEggHatchType
---@field FullActor TSoftClassPtr<AActor>
---@field Ratio float
FEggHatchType = {}



---@class FEmitterList
---@field Emitters TArray<FAuraEmitterInfo>
FEmitterList = {}



---@class FEmoteData : FTableRowBase
---@field EmoteTag FGameplayTag
---@field EmoteName FLocString
---@field EmoteIcon TSoftObjectPtr<UTexture2D>
---@field ChatterEvent FChatterEventReference
---@field bAlwaysUnlocked boolean
---@field bLooping boolean
FEmoteData = {}



---@class FEquipmentSlotHiddenPrePhotoModeData
---@field Slot EEquipmentSlot
---@field WasHidden boolean
FEquipmentSlotHiddenPrePhotoModeData = {}



---@class FEquipmentSlotsFlags
---@field bMainHand boolean
---@field bOffHand boolean
---@field bHead boolean
---@field bChest boolean
---@field bArms boolean
---@field bLegs boolean
---@field bGlider boolean
FEquipmentSlotsFlags = {}



---@class FEquippableData
---@field EquipAudio TSoftObjectPtr<USoundCue>
---@field EquipAnim TSoftObjectPtr<UAnimMontage>
---@field Durability float
---@field FlatDamageReduction float
---@field PercentageDamageReduction float
---@field StatusEffects TArray<FDataTableRowHandle>
---@field HiddenStatusEffects TArray<FDataTableRowHandle>
---@field RepairRecipe TArray<FRecipeRequirements>
---@field HairType FGameplayTag
---@field RandomEffectType ERandomEffectType
---@field DisablesThirdPersonShadowCastingInFirstPerson boolean
FEquippableData = {}



---@class FEquippedActorOption
---@field CharacterType FGameplayTag
---@field EquippedActor TSoftClassPtr<ASpawnedItem>
FEquippedActorOption = {}



---@class FFPCMeshData
---@field StartTransform FTransform
---@field Transform FTransform
---@field UniqueVariant boolean
---@field UseSkeletalMesh boolean
---@field StaticMeshVariants TArray<UStaticMesh>
---@field SkeletalMeshVariants TArray<USkeletalMesh>
---@field AnimMontage UAnimMontage
---@field AnimInstanceClass TSubclassOf<UAnimInstance>
---@field CastsShadow boolean
---@field Enabled boolean
FFPCMeshData = {}



---@class FFPCOverlayConfig
---@field MeshPieces TArray<FFPCMeshData>
---@field BlendTime float
FFPCOverlayConfig = {}



---@class FFactionReputationEventData
---@field ReputationThreshold int32
---@field GlobalVariableConditional FGlobalVariableReferenceConditional
FFactionReputationEventData = {}



---@class FFactionReputationEvents
---@field Events TArray<FFactionReputationEventData>
FFactionReputationEvents = {}



---@class FFaucetItemSpawnData
---@field SpawnGroup TSubclassOf<UItemSpawnGroupData>
---@field SpawnData TSubclassOf<UItemSpawnData>
---@field ValidSpawnPointSockets TArray<FName>
---@field bAttachToSockets boolean
---@field bAllowSocketRepeat boolean
FFaucetItemSpawnData = {}



---@class FFlySwimCharacterWiggle
FFlySwimCharacterWiggle = {}


---@class FFoliageAnimationData
FFoliageAnimationData = {}


---@class FFoliageDisplaceData
---@field RegisteredDisplacers TArray<FFoliageDisplacerRegistration>
FFoliageDisplaceData = {}



---@class FFoliageDisplacerAudioData
FFoliageDisplacerAudioData = {}


---@class FFoliageDisplacerRegistration
---@field Displacer TWeakObjectPtr<UFoliageDisplacerComponent>
FFoliageDisplacerRegistration = {}



---@class FFoliageKey : FInstancedMeshKey
FFoliageKey = {}


---@class FFoliageMapping
---@field FoliageBlueprintClass TSubclassOf<AActor>
---@field DefaultState EFoliageInstanceState
---@field CanAttackToSwap boolean
---@field DisplaceLevel EFoliageSwapLevel
---@field PlayerSwapDistance float
---@field DisplaceAudioLoop USoundBase
---@field DisplaceAudioAttenuation USoundAttenuation
---@field InteractVisualEffects TArray<UVisualEffect>
---@field SpringStrength float
---@field SpringDecay float
---@field bAnimate boolean
---@field bActiveInDevelopmentContentOnly boolean
---@field bAllowGOAPAdvertisements boolean
---@field HeightAboveOrigin float
---@field CDOAttractionData TMap<UAttractionComponent, FAttractionCDOData>
---@field LootComponent ULootComponent
FFoliageMapping = {}



---@class FFoliageRespawnRules
---@field UniqueId FGuid
---@field DebugName FString
---@field StaticMeshes TArray<TSoftObjectPtr<UStaticMesh>>
---@field RespawnOnlyOnRest boolean
---@field RespawnOnlyOnNewGamePlus boolean
---@field RespawnWhenRemoved boolean
---@field IgnorePlayerDistanceCheckOnRest boolean
---@field MinimumInGameHoursGoneRequired float
---@field MinimumDistanceAwayFromPlayersRequired float
---@field GlobalVariableCondition FGlobalVariableReferenceConditional
FFoliageRespawnRules = {}



---@class FFootstepEntry
---@field SurfaceType EPhysicalSurface
---@field VisualEffect UVisualEffect
---@field SoundEffect USoundBase
---@field SoundInensity float
---@field SoundRange float
FFootstepEntry = {}



---@class FGameVersion
---@field Major int32
---@field Minor int32
---@field Patch int32
---@field Build int32
FGameVersion = {}



---@class FGameplayTagChange
---@field From FGameplayTag
---@field To FGameplayTag
FGameplayTagChange = {}



---@class FGardenRecipeData : FTableRowBase
---@field CatalystItem FDataTableRowHandle
---@field SpawnData TSubclassOf<UItemSpawnData>
---@field RareSpawnData TSubclassOf<UItemSpawnData>
---@field SpawnSockets TArray<FName>
---@field RareSpawnChance float
---@field Duration float
---@field InProductionMesh TSoftObjectPtr<UStaticMesh>
---@field RareSpawnInProductionMesh TSoftObjectPtr<UStaticMesh>
---@field PreviewMesh TSoftObjectPtr<UStaticMesh>
FGardenRecipeData = {}



---@class FGlidingData
---@field Style EGlidingStyle
---@field StaminaDrainPerSecond float
---@field ForwardAcceleration float
---@field MaxForwardVelocity float
---@field DescendSpeed float
---@field DescendDrag float
---@field LiftAcceleration float
---@field bUseWhileSwimming boolean
FGlidingData = {}



---@class FGlobalConditionalUnlock
---@field GlobalCondition FGlobalVariableReferenceConditional
---@field UnlockType ETechTreeUnlockType
---@field UnlockData TArray<FDataTableRowHandle>
---@field UnlockDataTags TArray<FGameplayTag>
---@field UnlockDisplayName FLocString
FGlobalConditionalUnlock = {}



---@class FGlobalVariableReferenceConditional
---@field GlobalVariable FGlobalVariableReference
---@field ComparisonOperator EComparisonOperator
---@field Value int32
FGlobalVariableReferenceConditional = {}



---@class FGlobalVariableSetCommand
---@field GlobalVariable FGlobalVariableReference
---@field NewValue int32
FGlobalVariableSetCommand = {}



---@class FGoapActionInstance
---@field Owner FGoapActionOwner
---@field Action UGoapAction
---@field bProjectToGround boolean
FGoapActionInstance = {}



---@class FGoapActionOwner
FGoapActionOwner = {}


---@class FGoapActionVitalAdjustment
---@field Vital FGameplayTag
---@field Value float
---@field Visibility EVitalAdjustmentVisibility
FGoapActionVitalAdjustment = {}



---@class FGridPlacementData
---@field ActorDiagonal TSoftClassPtr<AActor>
---@field ActorDiagonalFlipped TSoftClassPtr<AActor>
---@field bOverrideZoopAxes boolean
---@field bPermitZoopX boolean
---@field bPermitZoopY boolean
---@field bPermitZoopZ boolean
---@field bZoopAlternateRotationZ boolean
FGridPlacementData = {}



---@class FHISMAClusterData
FHISMAClusterData = {}


---@class FHISMAGridClusterKey
FHISMAGridClusterKey = {}


---@class FHUDMarkerArray
---@field MarkerArray TArray<UHUDMarkerData>
FHUDMarkerArray = {}



---@class FHUDMarkerCluster
---@field ClusterMarker UHUDMarkerData
---@field RawMarkers TArray<FClusteredHUDMarker>
FHUDMarkerCluster = {}



---@class FHUDMarkerParameters
---@field bShowDistance boolean
---@field bQuickStartup boolean
---@field bIsCluster boolean
---@field Lifetime float
---@field IconVariant int32
---@field ColorVariant int32
---@field DisplayName FString
---@field Color FColor
---@field Quest FDataTableRowHandle
---@field AdditionalData FDataTableRowHandle
---@field RestrictedToPlayer FGuid
---@field FadeVariant EHUDMarkerType
FHUDMarkerParameters = {}



---@class FHUDMarkerVariationData
---@field BrushList TArray<FSlateBrush>
---@field MapBrushList TArray<FSlateBrush>
---@field BrushDisplayName TArray<FLocString>
FHUDMarkerVariationData = {}



---@class FHarvestLootData
---@field ItemData FDataTableRowHandle
---@field Count int32
FHarvestLootData = {}



---@class FHarvestNodeData : FTableRowBase
---@field DisplayName FLocString
---@field SearchableKeywords TArray<FLocString>
---@field Icon TSoftObjectPtr<UTexture2D>
---@field ModelViewerMeshOverride TSoftObjectPtr<UStaticMesh>
---@field ModelViewerMaterialsOverride TArray<TSoftObjectPtr<UMaterialInterface>>
---@field PlacementData FPlacementData
FHarvestNodeData = {}



---@class FHaulingData
---@field HaulingSocket ESocketName
---@field MaxHaulCount int32
---@field StackHeight float
FHaulingData = {}



---@class FHealthColliderConfig
---@field ComponentName FString
---@field DamageMultiplier float
---@field ForwardComponentName FName
---@field ForwardAngleRange float
---@field DamageSourceTags FGameplayTagContainer
---@field DamageTypeFlags uint32
---@field DamageType TSubclassOf<USurvivalDamageType>
FHealthColliderConfig = {}



---@class FHealthStateMesh
---@field HealthState EHealthVisualState
---@field StaticMesh UStaticMesh
FHealthStateMesh = {}



---@class FHealthStateMeshList
---@field HealthStateMeshes TArray<FHealthStateMesh>
FHealthStateMeshList = {}



---@class FHeatBracket
---@field HeatMin int32
---@field HeatMax int32
---@field TotalSpawnWeight int32
FHeatBracket = {}



---@class FHeatEmitter
---@field StaticMesh UStaticMesh
---@field SkeletalMesh USkeletalMesh
---@field UseActorForwardScaling boolean
---@field FOVAngleBeforeFallOff float
---@field EmissionMaxRadius float
---@field DistanceFallOffCurve FRuntimeFloatCurve
---@field EmissionMaxStrength float
---@field EmitterDamageMultiplier float
FHeatEmitter = {}



---@class FHeatEmitterTraceResult
---@field Transform FTransform
---@field DistanceToOwner float
---@field EmissionMaxRadius float
---@field EmissionMaxStrength float
---@field EmissionStrengthAtOwnerLocation float
---@field EmitterDamageMultiplier float
FHeatEmitterTraceResult = {}



---@class FHeatHazardConditionState
---@field IsActive boolean
---@field TimeWhenStateChanged float
FHeatHazardConditionState = {}



---@class FHideSlotHandle
FHideSlotHandle = {}


---@class FHotBarQuickSlotItemTypeKey
---@field ItemRowHandle FDataTableRowHandle_NetCrc
---@field EnhanceLevel int32
---@field BonusEnhanceLevel int32
---@field BonusEnhanceTypeTag FGameplayTag
---@field RandomEffectHash int32
FHotBarQuickSlotItemTypeKey = {}



---@class FHourBasedOneShotBundle
---@field HourOfDay int32
---@field SpawnDistanceRange FVector2D
---@field RandomSounds TArray<USoundBase>
FHourBasedOneShotBundle = {}



---@class FHouseMaterialSoftGroup
---@field HouseMain TSoftObjectPtr<UMaterialInterface>
---@field HousePostA TSoftObjectPtr<UMaterialInterface>
---@field HousePostB TSoftObjectPtr<UMaterialInterface>
---@field HouseShingles TSoftObjectPtr<UMaterialInterface>
FHouseMaterialSoftGroup = {}



---@class FISMList
---@field ISMList TArray<UInstancedStaticMeshComponent>
FISMList = {}



---@class FIgnoredBindingConflictGroup
---@field IgnoreOnKBM boolean
---@field IgnoreOnGamepad boolean
---@field BindingNames TArray<FName>
FIgnoredBindingConflictGroup = {}



---@class FIndefiniteAnimationResumeData
---@field CachedAnimations UWidgetAnimation
FIndefiniteAnimationResumeData = {}



---@class FInputKeyData
---@field Image FSlateBrush
---@field OverrideNarrationName FLocString
FInputKeyData = {}



---@class FInspectData
---@field InspectModelOverrideSoft TSoftClassPtr<AActor>
---@field InspectStaticMeshOverrideSoft TSoftObjectPtr<UStaticMesh>
---@field InspectSkeletalMeshOverrideSoft TSoftObjectPtr<USkeletalMesh>
---@field InspectModel2DTextureOverrideSoft TSoftObjectPtr<UTexture>
---@field Switch2DTextureOverrideSoft TSoftObjectPtr<UTexture>
---@field InspectMaterialsOverride TArray<TSoftObjectPtr<UMaterialInterface>>
---@field ModelScale float
---@field Conversation FConversationReference
---@field ConversationStartNode int32
---@field bUseConversationAsInspectDescription boolean
---@field InspectKeyItemOnPickup boolean
---@field bAllowYRotation boolean
---@field bShowSkyLight boolean
FInspectData = {}



---@class FInstancedFreeBuildingData
---@field Grid UBuildingGridComponent
---@field Items TMap<UClass, FInstancedFreeBuildingType>
FInstancedFreeBuildingData = {}



---@class FInstancedFreeBuildingType
FInstancedFreeBuildingType = {}


---@class FInstancedGridBuildingData
---@field Grid UBuildingGridComponent
---@field Items TMap<UClass, FInstancedGridBuildingType>
FInstancedGridBuildingData = {}



---@class FInstancedGridBuildingType
FInstancedGridBuildingType = {}


---@class FInstancedMeshKey
---@field InstancedStaticMeshComponent TWeakObjectPtr<UInstancedStaticMeshComponent>
---@field MeshIndex int32
FInstancedMeshKey = {}



---@class FInstancedStorageData
---@field ISMComponent UInstancedStaticMeshComponent
---@field StorageToISMIndices TMap<int32, int32>
FInstancedStorageData = {}



---@class FInteractAnimData
---@field Anim UAnimEffect
---@field Prop TSubclassOf<AActor>
FInteractAnimData = {}



---@class FInterestActionNode
---@field Action FGoapActionInstance
FInterestActionNode = {}



---@class FInterestConfig
---@field VitalValues TArray<TSubclassOf<UBaseVitalStat>>
---@field FoodTags FGameplayTagContainer
---@field TirednessTag FGameplayTag
---@field bShouldDropBreadcrumbs boolean
---@field FleeBreadcrumbAction UGoapAction
---@field BaselineAction UGoapAction
---@field WorldEvaluators TArray<UGoapWorldStateEvaluator>
FInterestConfig = {}



---@class FInterestStateItemStack
---@field Item FDataTableRowHandle
FInterestStateItemStack = {}



---@class FItemBatch
---@field EquipmentToAdd TArray<FItemRowAndCount>
---@field InventoryToAdd TArray<FItemRowAndCount>
FItemBatch = {}



---@class FItemBonusEnhancementData
---@field LocalizedDisplayName FLocString
---@field Icon TSoftObjectPtr<UObject>
---@field ItemSlotBG TSoftObjectPtr<UObject>
---@field DamageType TSubclassOf<USurvivalDamageType>
---@field bUnlockStatusEffects boolean
---@field EnhancementItems TArray<FDataTableRowHandle>
---@field ExtraRepairItem FDataTableRowHandle
FItemBonusEnhancementData = {}



---@class FItemChoiceOption
---@field ItemDataRowHandle FDataTableRowHandle
---@field RecipeDataRowHandle FDataTableRowHandle
FItemChoiceOption = {}



---@class FItemKnowledge
---@field ResourceName FName_NetCrc
---@field bDoesKnowOf boolean
---@field bHasDiscovered boolean
---@field bHasResearched boolean
FItemKnowledge = {}



---@class FItemPowerConversion
---@field From FGameplayTag
---@field To FGameplayTag
FItemPowerConversion = {}



---@class FItemPowerData
---@field UsesPower boolean
---@field AlwaysOn boolean
---@field bConsumesPowerDuringRest boolean
---@field bCanBeUsedInWater boolean
---@field UsesPowerType FGameplayTag
---@field PowerConversions TArray<FItemPowerConversion>
---@field ProvidesPower FGameplayTag
---@field TotalPowerTimeInHours float
---@field TotalCharges float
---@field ChargingAnimType EInteractAnimType
FItemPowerData = {}



---@class FItemProcessingData
---@field Item UItem
---@field FinishTime float
---@field LocationIndex int8
---@field WorldItemActor ASpawnedItem
---@field VisualEffect UParticleSystemComponent
---@field Owner AItemProcessingBuilding
---@field ProcessingInstigator FUniqueNetIdRepl
---@field ProcessingType FGameplayTag
FItemProcessingData = {}



---@class FItemProcessingStateChange
---@field ProcessingType FGameplayTag
---@field ResultItem FDataTableRowHandle
---@field ResultItemCount int32
FItemProcessingStateChange = {}



---@class FItemRegionKey
FItemRegionKey = {}


---@class FItemRowAndCount
---@field RowHandle FDataTableRowHandle
---@field Count int32
FItemRowAndCount = {}



---@class FItemRowCountPair
---@field ItemRowHandle FDataTableRowHandle
---@field Count int32
FItemRowCountPair = {}



---@class FItemSetData : FTableRowBase
---@field Items TArray<FDataTableRowHandle>
---@field StatusEffects TArray<FDataTableRowHandle>
FItemSetData = {}



---@class FItemSpawnGroup
---@field SpawnPointDatas TArray<FItemSpawnPointData>
---@field SpawnPointProviders TArray<TScriptInterface<ISpawnPointProviderInterface>>
FItemSpawnGroup = {}



---@class FItemSpawnGroupEvent
---@field EventType EItemSpawnEventType
---@field When ESpawnIntervalBehavior
---@field WhenValue float
---@field bAllowQueueing boolean
---@field EventPercentageChance float
---@field AffectedPercentage FFloatRange
---@field AffectedCount FInt32Range
---@field MaxPercentage FFloatRange
---@field MaxCount FInt32Range
FItemSpawnGroupEvent = {}



---@class FItemSpawnParameters
---@field EquippedTo AActor
---@field OverrideSpawnActor TSoftClassPtr<AActor>
FItemSpawnParameters = {}



---@class FItemSpawnPointData
---@field ItemSpawnData TSubclassOf<UItemSpawnData>
---@field SpawnTransform FTransform
---@field Guid FGuid
---@field VersionAdded FGameVersion
---@field Provider TScriptInterface<ISpawnPointProviderInterface>
---@field AttachParent TWeakObjectPtr<AActor>
---@field ProviderIndex int32
---@field bIsValid boolean
---@field bAllowMultipleUse boolean
FItemSpawnPointData = {}



---@class FItemStackUpgrade
---@field ItemStackTag FGameplayTag
---@field Tier int32
FItemStackUpgrade = {}



---@class FItemStackUpgradeData
---@field LocalizedDisplayName FLocString
---@field Icon TSoftObjectPtr<UObject>
---@field ItemStackTag FGameplayTag
FItemStackUpgradeData = {}



---@class FItemVariantData : FTableRowBase
---@field ItemType FDataTableRowHandle
---@field PlacementData FPlacementData
FItemVariantData = {}



---@class FKeyItemDisplayData
---@field LocalizedDisplayName FLocString
---@field Icon TSoftObjectPtr<UObject>
---@field Visibility EKeyItemVisibility
---@field bIgnoreForFinalScore boolean
FKeyItemDisplayData = {}



---@class FLabMachineBlueprintableInfo
---@field CabinetDoodadsTop uint8
---@field CabinetOneDoodadsBottom uint8
---@field CabinetPanelTop uint8
---@field CabinetOnePanelBottom uint8
---@field CabinetTwoFrontPanelTop uint8
---@field CabinetTwoInsetDoodadsTop uint8
---@field CabinetTwoFrontPanelBottom uint8
---@field CabinetTwoInsetDoodadsBottom uint8
---@field CabinetDoor uint8
---@field TopPiece uint8
---@field ConsolePlate uint8
---@field ConsoleButtons uint8
---@field ConsoleFrontPanel uint8
---@field ConsoleDoodads uint8
---@field CollisionEnabled uint8
---@field HasMonitor boolean
---@field CollisionDisabled uint8
---@field VariantType uint8
---@field FlipCabinet boolean
---@field BlinkingLights boolean
---@field ManuallyOverrideMaterials boolean
---@field LightsOut boolean
---@field CabinetDoorA boolean
---@field CanHaveDoodadsOne boolean
---@field CanHaveDoodadsTwo boolean
---@field CanHaveDoodadsThree boolean
---@field CanHaveDoodadsFour boolean
---@field CanHaveDoodadsFive boolean
---@field CabinetPanelTrimTop boolean
---@field CabinetOnePanelTrimBottom boolean
---@field CabinetTwoPanelTrimTop boolean
---@field CabinetTwoPanelTrimBottom boolean
---@field HasCabinet boolean
---@field HasConsoleA boolean
---@field ConsolePanelTrim boolean
---@field FlipConsole boolean
---@field TableBaseVariant boolean
---@field EmissiveStrip boolean
---@field EmissiveStripColor FLinearColor
FLabMachineBlueprintableInfo = {}



---@class FLabMachineInfoBase
---@field InfoA uint32
---@field InfoB uint32
FLabMachineInfoBase = {}



---@class FLabMachineMeshGroup
---@field Cabinet TArray<UStaticMesh>
---@field Doodads TArray<UStaticMesh>
---@field Trim UStaticMesh
FLabMachineMeshGroup = {}



---@class FLatencyRange
---@field Min int32
---@field Max int32
FLatencyRange = {}



---@class FLevelData
---@field LevelNameLocString FLocString
---@field LevelDescriptionLocString FLocString
---@field LevelIcon TSoftObjectPtr<UTexture2D>
---@field DevLevel TSoftObjectPtr<UWorld>
---@field RelLevel TSoftObjectPtr<UWorld>
---@field bIsStoryLevel boolean
---@field MaxBounds FVector2D
---@field MinBounds FVector2D
---@field MapTextureSize FVector2D
---@field MapBackroundWidget TSoftClassPtr<UGameUserWidget>
FLevelData = {}



---@class FLiteBuilding
---@field CDO ABuilding
FLiteBuilding = {}



---@class FLiteBuildingGrid
---@field Grid TMap<FBuildingGridKey, FLiteBuildingGridSlotData>
---@field Buildings TMap<uint32, FLiteBuilding>
---@field RemovedBuildings TSet<uint32>
FLiteBuildingGrid = {}



---@class FLiteBuildingGridSlotData
FLiteBuildingGridSlotData = {}


---@class FLookTriggeredParams
---@field TriggeringCharacter ASurvivalCharacter
FLookTriggeredParams = {}



---@class FLootData
---@field Type ELootType
---@field ItemData FDataTableRowHandle
---@field OverrideWorldActor TSoftClassPtr<ASpawnedItem>
---@field ActorToSpawn TSoftClassPtr<AActor>
---@field Count int32
---@field DropChance float
---@field DropChanceMultiplier float
---@field bIgnoreLuck boolean
---@field SpawnType ELootSpawnType
---@field LocationType ELootLocationType
---@field SocketName FName
---@field SpawnPoint USceneComponent
---@field SpawnPointPreviousVelocity FVector
---@field IgnoreObjectiveMarkers boolean
---@field bDoUnderFloorCheckDuringLootSpawn boolean
---@field bCheckNonCollidingComponents boolean
---@field bSpawnOnDecay boolean
---@field bCheckConditionals boolean
---@field bStealable boolean
---@field RequiredNewGamePlusTier int32
---@field MaxdNewGamePlusTier int32
FLootData = {}



---@class FMaineAlwaysRelevantActorInfo
---@field Connection UNetConnection
---@field LastViewer AActor
---@field LastViewTarget AActor
FMaineAlwaysRelevantActorInfo = {}



---@class FMaineDamageEvent : FDamageEvent
FMaineDamageEvent = {}


---@class FMainePointDamageEvent : FPointDamageEvent
FMainePointDamageEvent = {}


---@class FMaineRadialDamageEvent : FRadialDamageEvent
FMaineRadialDamageEvent = {}


---@class FManagedRenderTarget
---@field Publisher TScriptInterface<IRenderTargetPublisher>
---@field PublisherRequestedUnregister boolean
---@field Subscribers TArray<TScriptInterface<IRenderTargetSubscriber>>
---@field RenderTargetInfo UManagedRenderTargetObject
---@field RenderTarget UTextureRenderTarget2D
---@field SceneProxyCullDistance float
FManagedRenderTarget = {}



---@class FMaterialInterfaceArray
---@field Array TArray<UMaterialInterface>
FMaterialInterfaceArray = {}



---@class FMaterialToIngredientMapping
---@field MeshName FName
---@field StartIndex uint8
---@field EndIndex uint8
---@field NeedsInvisibleConstructionMaterial boolean
---@field Ingredient FDataTableRowHandle
FMaterialToIngredientMapping = {}



---@class FMetaBuildingData : FTableRowBase
---@field DisplayName FLocString
---@field CategoryTag FGameplayTag
---@field SubBuildings TArray<FDataTableRowHandle>
---@field SubBuildingVariants TArray<FDataTableRowHandle>
FMetaBuildingData = {}



---@class FMetaBuildingIdentifier
---@field Building FDataTableRowHandle
---@field Variant FDataTableRowHandle
FMetaBuildingIdentifier = {}



---@class FMetaBuildingVariantData : FTableRowBase
---@field bDummy boolean
FMetaBuildingVariantData = {}



---@class FMovementConfig
---@field AcceptableRadius float
---@field MaxMoveDuration float
---@field MaxMoveRandomDeviation float
FMovementConfig = {}



---@class FMovieSkippingPlayerData
FMovieSkippingPlayerData = {}


---@class FMusicPlayterData : FBaseCustomDropdownData
---@field MusicSettings UMusicSettings
FMusicPlayterData = {}



---@class FNativeRippleEvent
---@field Position FVector
---@field Size float
---@field Intensity float
---@field SizeInner float
---@field IntensityInner float
---@field Owner TWeakObjectPtr<AActor>
---@field CreationTime float
---@field LowPriority boolean
FNativeRippleEvent = {}



---@class FNewGameMaterialData
---@field Data TArray<FNewGameMaterialList>
FNewGameMaterialData = {}



---@class FNewGameMaterialList
---@field Materials TArray<TSoftObjectPtr<UMaterialInterface>>
FNewGameMaterialList = {}



---@class FObjectRefCounter
FObjectRefCounter = {}


---@class FObjectiveData
---@field DisplayName FLocString
---@field VerboseName FLocString
---@field StartsHidden boolean
---@field DisplaysObjectiveMarker boolean
---@field AutoSaveOnComplete boolean
---@field CanUncomplete boolean
---@field RecipeOrItem FDataTableRowHandle
---@field ObjectiveType EQuestObjectiveType
---@field MouseKeyboardControl FName
---@field GamepadControl FName
---@field HUDMarkerData FObjectiveHUDMarkerData
---@field GlobalVariableData FQuestGlobalVariableData
---@field ObjectiveStartConversation FQuestConversationData
---@field ObjectiveStartConversationDelay float
---@field ObjectiveCompleteConversation FQuestConversationData
---@field ObjectiveCompleteConversationDelay float
---@field DisabledForPackageFlags uint32
FObjectiveData = {}



---@class FObjectiveHUDMarkerData
---@field Location FVector
---@field ActorTagOverride FName
---@field MarkerType EHUDMarkerType
---@field ShowDistance boolean
FObjectiveHUDMarkerData = {}



---@class FOptionsDisplayLanguage
---@field ID ELanguageSetting
---@field NativeName FString
---@field LocalizedName FLocString
FOptionsDisplayLanguage = {}



---@class FOriginalMaterialMapping
FOriginalMaterialMapping = {}


---@class FOverlappedVolumes
---@field PlayerState APlayerState
---@field Volumes TArray<AGameZoneVolume>
FOverlappedVolumes = {}



---@class FOverrideActorReplicationPolicy
---@field bShouldOverrideChildClasses boolean
---@field bOverrideReplicationPeriod boolean
---@field ReplicationPeriodFrame uint16
---@field bOverrideCullDistance boolean
---@field CullDistanceSquared float
FOverrideActorReplicationPolicy = {}



---@class FOverrideDisplayModeData
FOverrideDisplayModeData = {}


---@class FOverrideDisplayModeHandle
FOverrideDisplayModeHandle = {}


---@class FOverrideMaterialSetting
---@field MaterialIndex int32
---@field Material TSoftObjectPtr<UMaterialInterface>
FOverrideMaterialSetting = {}



---@class FPartyBarrier
---@field BarrierName FName
---@field MaxActiveTime float
FPartyBarrier = {}



---@class FPendingEditModeChangeData
---@field IsPending boolean
---@field RequestTime float
---@field Instigator ASurvivalPlayerState
---@field PendingMode EEditMode
FPendingEditModeChangeData = {}



---@class FPendingSharedSaveAuthorizedUser
FPendingSharedSaveAuthorizedUser = {}


---@class FPendingVolumes
FPendingVolumes = {}


---@class FPendingWaveSpawn
---@field Spawns TArray<TSoftClassPtr<ASurvivalCharacter>>
---@field SpawnTarget AWaveSpawnTarget
---@field SpawnRequestID int32
---@field SpawnRequestReceived boolean
---@field SpawnRequestFailed boolean
---@field WaveStartRequestID int32
---@field WaveStartRequestReceived boolean
---@field WaveStartRequestFailed boolean
---@field MaxMoveSpeedForWave float
FPendingWaveSpawn = {}



---@class FPerkCondition
---@field Value int32
FPerkCondition = {}



---@class FPerkData : FTableRowBase
---@field LocalizedDisplayName FLocString
---@field LocalizedDescription FLocString
---@field Icon TSoftObjectPtr<UTexture2D>
---@field Stat UPlayerStatConfig
---@field GlobalVariable FGlobalVariableReference
---@field Tiers TArray<FPerkTier>
FPerkData = {}



---@class FPerkLoadout
---@field Perks TArray<FName_NetCrc>
FPerkLoadout = {}



---@class FPerkReward
---@field StatusEffects TArray<FDataTableRowHandle>
---@field Recipes TArray<FDataTableRowHandle>
FPerkReward = {}



---@class FPerkStatus
---@field PerkName FName_NetCrc
---@field Tier int32
---@field bEquipped boolean
---@field StatusEffectID FGuid
FPerkStatus = {}



---@class FPerkTier
---@field Condition FPerkCondition
---@field Reward FPerkReward
FPerkTier = {}



---@class FPerlinNoise
FPerlinNoise = {}


---@class FPetPersonalityData : FTableRowBase
---@field DisplayName FLocString
---@field Weight float
FPetPersonalityData = {}



---@class FPhaseEncounter
---@field PhaseIndex int32
---@field Encounter AEncounter
FPhaseEncounter = {}



---@class FPhobiaMaterialSetting
---@field MaterialIndex int32
---@field Material TSoftObjectPtr<UMaterialInterface>
FPhobiaMaterialSetting = {}



---@class FPhobiaMeshData
---@field MeshName FString
---@field Settings TArray<FPhobiaSettingData>
FPhobiaMeshData = {}



---@class FPhobiaSettingData
---@field MaterialReplacements TArray<FPhobiaMaterialSetting>
---@field HideBoneNames TArray<FName>
FPhobiaSettingData = {}



---@class FPlaceableCopyData
---@field CachedCustomizations TArray<FCustomizedValue>
---@field CachedCustomizedData TArray<FDataTableRowHandle_NetCrc>
---@field String1 FString
---@field String2 FString
---@field PickedTriggerID int32
---@field CreatureSpawnerType FDataTableRowHandle_NetCrc
---@field CreatureSpawnerSpawnCount int32
---@field bOCLComponentOpen boolean
---@field bOCLComponentLocked boolean
FPlaceableCopyData = {}



---@class FPlaceableStaticMeshData : FTableRowBase
---@field DisplayName FLocString
---@field LocalizedDescription FLocString
---@field SearchableKeywords TArray<FLocString>
---@field Icon TSoftObjectPtr<UTexture2D>
---@field Mesh TSoftObjectPtr<UStaticMesh>
---@field OverrideMaterials TArray<TSoftObjectPtr<UMaterialInterface>>
---@field ModelViewerXRotation float
---@field ModelViewerYRotation float
---@field ModelViewerOffset FVector
---@field InspectModelOverrideSoft TSoftClassPtr<AActor>
---@field PlacementData FPlacementData
FPlaceableStaticMeshData = {}



---@class FPlacementData
---@field bPermitForUGC boolean
---@field bHasUGCInteractions boolean
---@field MonthToUnlockForUGC EPlacementDataMonthUnlock
---@field UGCSubcategoryTag FGameplayTag
---@field Actor TSoftClassPtr<AActor>
---@field ActorFlipped TSoftClassPtr<AActor>
---@field ActorWall TSoftClassPtr<AActor>
---@field ActorCeiling TSoftClassPtr<AActor>
---@field SlotType EBuildingSlotType
---@field bUseAlternateSlotType boolean
---@field AlternateSlotType EBuildingSlotType
---@field EmbedMode EBuildingGroundEmbedMode
---@field bPlaceAtPlayerRotation boolean
---@field bPermitExtraRotationAxes boolean
---@field bPermitRescaling boolean
---@field bAllowPlaceInWater boolean
---@field RandomRotateIncrement float
---@field RotationOffset float
---@field BuoyantPlacement EBuildingBuoyantPlacementMode
---@field TerrainConform EBuildingTerrainConformMode
---@field MaxSlope float
---@field OverridePlacementDistance float
---@field PlacementOriginOffset FVector
---@field AttachedPlacementOffset FVector
---@field bDoOverrideAllowedWallNormal boolean
---@field OverrideAllowedWallNormal FFloatRange
---@field DefaultScale float
FPlacementData = {}



---@class FPlacementValidity
FPlacementValidity = {}


---@class FPlayerCombatTracker
---@field Tag FGameplayTag
---@field Count int32
FPlayerCombatTracker = {}



---@class FPlayerIdentityStruct
---@field Identity EPlayerCharacterIdentity
---@field ProgressBar UProgressBar
FPlayerIdentityStruct = {}



---@class FPlayerResponseData
---@field NodeId int32
---@field DisplayString FString
---@field HasSeen boolean
---@field RequiredNode boolean
FPlayerResponseData = {}



---@class FPlayerStartData : FBaseCustomDropdownData
---@field CharacterIdentity EPlayerCharacterIdentity
FPlayerStartData = {}



---@class FPlayerUpgrade
---@field UpgradeName FName_NetCrc
---@field Tier int32
---@field StatusEffectID FGuid
FPlayerUpgrade = {}



---@class FPlayerUpgradeData : FTableRowBase
---@field LocalizedDisplayName FLocString
---@field Icon TSoftObjectPtr<UObject>
---@field BaseCost int32
---@field UpgradeType EPlayerUpgradeType
---@field Tiers TArray<FPlayerUpgradeTier>
FPlayerUpgradeData = {}



---@class FPlayerUpgradeTier
---@field StatusEffectData TArray<FDataTableRowHandle>
---@field Value int32
FPlayerUpgradeTier = {}



---@class FPopulationMonitorSample
---@field ActorType TSoftClassPtr<AActor>
---@field SampleTime float
---@field SampleValue int32
FPopulationMonitorSample = {}



---@class FPostGameReport
---@field Score float
---@field LowestScore float
---@field LowestCategory EReportCategory
---@field TipString FLocString
FPostGameReport = {}



---@class FPowerReservoir
---@field AllowedPowerType FGameplayTag
---@field CurrentPowerType FGameplayTag
---@field ChargesStored float
---@field ChargeCapacity float
FPowerReservoir = {}



---@class FPowerTypeData : FTableRowBase
---@field GameplayTag FGameplayTag
---@field LocalizedDisplayName FLocString
---@field SlotBacking TSoftObjectPtr<UTexture2D>
---@field SlotBackingColor FColor
---@field bIsConsumable boolean
---@field ConsumableEffects TArray<FDataTableRowHandle>
---@field bCanDump boolean
---@field DumpedActor TSoftClassPtr<AActor>
FPowerTypeData = {}



---@class FPredefinedColonyData
---@field Tag FGameplayTag
---@field Config UColonyConfiguration
FPredefinedColonyData = {}



---@class FProceduralAnimationHandle
FProceduralAnimationHandle = {}


---@class FProcessLoadMultiThreadedData
FProcessLoadMultiThreadedData = {}


---@class FProcessingTypeGlobalData
---@field ProcessingTag FGameplayTag
---@field DamageType uint32
---@field ProcessingTime float
---@field bAllowPlayerRemoval boolean
---@field WorkingVFX UVisualEffect
---@field StartedVFX UVisualEffect
FProcessingTypeGlobalData = {}



---@class FProxyComponentTickFunction : FTickFunction
FProxyComponentTickFunction = {}


---@class FPushbackActorData
---@field Instigator AActor
---@field TimeSincePushed float
FPushbackActorData = {}



---@class FPuzzlePieceTextureEntry
---@field KnownAreaTexture UTexture2D
FPuzzlePieceTextureEntry = {}



---@class FPuzzlePieceZoneData : FTableRowBase
---@field DisplayName FLocString
---@field Zone EPuzzlePieceZone
FPuzzlePieceZoneData = {}



---@class FQuadAudioBedSoundData
---@field FrontLeftSound USoundBase
---@field FrontRightSound USoundBase
---@field BackLeftSound USoundBase
---@field BackRightSound USoundBase
FQuadAudioBedSoundData = {}



---@class FQuestArray : FFastArraySerializer
---@field QuestItems TArray<FQuestItem>
---@field Quests TArray<UQuest>
FQuestArray = {}



---@class FQuestConversationData
---@field ConversationReference FConversationReference
---@field NodeId int32
FQuestConversationData = {}



---@class FQuestData : FTableRowBase
---@field DisplayName FLocString
---@field Description FLocString
---@field Objectives TArray<FObjectiveData>
---@field GlobalVariableData FQuestGlobalVariableData
---@field QuestStartConversation FQuestConversationData
---@field QuestStartConversationDelay float
---@field QuestCompleteConversation FQuestConversationData
---@field QuestCompleteConversationDelay float
---@field DisabledForPackageFlags uint32
---@field OnlyValidInDevelopmentContent boolean
---@field IsLocalClientQuest boolean
---@field StartsAsStickied boolean
---@field Tutorial boolean
---@field IsCritPathQuest boolean
---@field AutoSaveOnComplete boolean
---@field IsCut boolean
---@field NeverHideStickyObjectives boolean
FQuestData = {}



---@class FQuestGlobalVariableData
---@field TriggerStartGlobal FGlobalVariableReference
---@field TriggerStartGlobalComparisonOperator EComparisonOperator
---@field TriggerStartGlobalValue int32
---@field TriggerCompleteGlobal FGlobalVariableReference
---@field TriggerCompleteGlobalComparisonOperator EComparisonOperator
---@field TriggerCompleteGlobalValue int32
---@field OnStartGlobalVariable FGlobalVariableReference
---@field OnStartGlobalVariableValue int32
---@field OnCompleteGlobalVariable FGlobalVariableReference
---@field OnCompleteGlobalVariableValue int32
FQuestGlobalVariableData = {}



---@class FQuestItem : FFastArraySerializerItem
---@field Quest UQuest
FQuestItem = {}



---@class FRadialShortcutData
---@field Brush FSlateBrush
---@field DisplayName FLocString
FRadialShortcutData = {}



---@class FRealInterestState
---@field Vitals FVitalState
---@field ActionCooldowns TMap<FGoapActionInstance, float>
FRealInterestState = {}



---@class FRecipeData : FBaseRecipeData
---@field CraftedItem FDataTableRowHandle
---@field CraftedItemCount int32
---@field ToolRequired FDataTableRowHandle
---@field CraftingBuildingTag FGameplayTag
---@field RecipeMods TArray<FRecipeMod>
---@field bBurgleQuestCanCraft boolean
---@field BurgleQuestCraftRewardLevel int32
---@field BurgleQuestMinCount int32
---@field BurgleQuestMaxCount int32
---@field BurgleQuestMaxCountProgress float
FRecipeData = {}



---@class FRecipeKnowledge
---@field RecipeRowName FName_NetCrc
---@field bReplaced boolean
---@field NumCrafted int32
FRecipeKnowledge = {}



---@class FRecipeMod
---@field ModItem FDataTableRowHandle
---@field ResultItem FDataTableRowHandle
FRecipeMod = {}



---@class FRecipeModData
---@field ItemRowHandle FDataTableRowHandle
---@field LocalizedModType FLocString
---@field LocalizedDescription FLocString
FRecipeModData = {}



---@class FRecipeProductionItem
---@field Item UItem
---@field RecipeRowHandle FDataTableRowHandle_NetCrc
---@field FinishTime float
---@field Owner AProductionBuilding
FRecipeProductionItem = {}



---@class FRecipeRequirements
---@field Item FDataTableRowHandle
---@field ItemCount int32
FRecipeRequirements = {}



---@class FRenderStateViewLocation
---@field ViewLocation FVector
---@field ViewActor AActor
---@field ProxyCullRangeOverride float
FRenderStateViewLocation = {}



---@class FReplicatedFoliageAddedData
FReplicatedFoliageAddedData = {}


---@class FReplicatedFoliageRemovedData
FReplicatedFoliageRemovedData = {}


---@class FReplicatedFoliageSet
---@field Items TMap<TWeakObjectPtr<UInstancedStaticMeshComponent>, FReplicatedFoliageTypeData>
FReplicatedFoliageSet = {}



---@class FReplicatedFoliageTypeData
FReplicatedFoliageTypeData = {}


---@class FReplicatedUserPlacedFoliageAddedData
FReplicatedUserPlacedFoliageAddedData = {}


---@class FReplicatedUserPlacedFoliageSet
---@field Items TMap<TSoftObjectPtr<UStaticMesh>, FReplicatedUserPlacedFoliageTypeData>
FReplicatedUserPlacedFoliageSet = {}



---@class FReplicatedUserPlacedFoliageTypeData
FReplicatedUserPlacedFoliageTypeData = {}


---@class FReportCategoryData
---@field Weight float
---@field TipString FLocString
FReportCategoryData = {}



---@class FReportGlobalVariableData
---@field GlobalVariableConditional FGlobalVariableReferenceConditional
---@field ReportData FReportCategoryData
FReportGlobalVariableData = {}



---@class FReputationData
---@field FactionTag FGameplayTag
---@field Value int32
---@field MaxObservedValue int32
---@field Enabled boolean
FReputationData = {}



---@class FReputationNotificationData
---@field ReputationThreshold int32
---@field Icon TSoftObjectPtr<UTexture2D>
---@field NotificationString FLocString
FReputationNotificationData = {}



---@class FRereplicatedActor
---@field Value AActor
---@field UniqueIndex uint8
FRereplicatedActor = {}



---@class FResearchLevelGlobalData
---@field LocalizedDisplayName FLocString
---@field ResearchPointThreshold int32
---@field UnlockRecipes TArray<FDataTableRowHandle>
---@field BonusScienceAtLevel int32
FResearchLevelGlobalData = {}



---@class FResourceSurveyReplicationData
FResourceSurveyReplicationData = {}


---@class FRespawnableInstancedMeshData
---@field AttachedToFoliage FFoliageKey
FRespawnableInstancedMeshData = {}



---@class FRootMotionSource_WallCrawl : FRootMotionSource
FRootMotionSource_WallCrawl = {}


---@class FSMInstancerMeshID
---@field Mesh UStaticMesh
---@field OverrideMaterials TArray<UMaterialInterface>
---@field CollisionProfile FName
---@field bUseDefaultCollision boolean
---@field MaxDrawDistance float
---@field bOverrideLightMapRes boolean
---@field OverriddenLightMapRes int32
---@field UseEmissiveForStaticLighting boolean
---@field EmissiveBoost float
---@field CastShadow boolean
---@field LightmapType ELightmapType
---@field bOverrideLightmapType boolean
---@field bCastFarShadow boolean
---@field bHiddenShadow boolean
---@field bVisible boolean
---@field bActorHiddenInGame boolean
---@field bNeverDistanceCull boolean
---@field bAllowCullDistanceVolume boolean
---@field bFillCollisionUnderneathForNavmesh boolean
---@field Mobility EComponentMobility::Type
FSMInstancerMeshID = {}



---@class FSMInstancerSharedMeshList
---@field StaticMeshActors TArray<AStaticMeshActor>
---@field SpecialStaticMeshActors TArray<AStaticMeshActor>
---@field HISMActors TArray<AHISMActor>
FSMInstancerSharedMeshList = {}



---@class FSMInstancerStats
---@field NumActorsModified int32
---@field NumIncompatibleActorsSkipped int32
---@field NumLevelsModified int32
---@field NumDistinctSMAs int32
---@field DistinctSMAsBelowInstanceThreshold int32
---@field BelowInstanceThresholdButNotUniqueTotal int32
---@field UniqueSMAs int32
---@field HISMACount int32
---@field HISMComponentCount int32
---@field OutlierCount int32
FSMInstancerStats = {}



---@class FScriptedBossPhase : FBaseBossPhase
FScriptedBossPhase = {}


---@class FSelectedBehaviorData
---@field BehaviorRowHandle FDataTableRowHandle_NetCrc
---@field CustomizedValues TArray<FCustomizedValue>
FSelectedBehaviorData = {}



---@class FSelectedEventBehaviorData
---@field EventRowHandle FDataTableRowHandle_NetCrc
---@field Behaviors TArray<FSelectedBehaviorData>
FSelectedEventBehaviorData = {}



---@class FSendTriggerEventInfo
---@field Event FDataTableRowHandle
---@field InitialInstigators TArray<AActor>
---@field TriggerMany boolean
---@field Randomize boolean
---@field RandomCount int32
---@field Force boolean
FSendTriggerEventInfo = {}



---@class FServerSaveAPIStatus
FServerSaveAPIStatus = {}


---@class FShowConversationNodeParams
---@field PlayerResponseString FString
---@field NodeString FString
---@field Speaker FSpeakerBundle
---@field DisplayStyle EConversationNodeDisplayStyle
---@field DisplayType ENodeDisplayType
---@field bIsPlayingVoice boolean
---@field bHideSpeaker boolean
FShowConversationNodeParams = {}



---@class FSignBuildingData : FTableRowBase
---@field Icon TSoftObjectPtr<UObject>
---@field Material TSoftObjectPtr<UMaterialInterface>
---@field Tags FGameplayTagContainer
FSignBuildingData = {}



---@class FSignSetData : FTableRowBase
---@field Table UDataTable
---@field UnlockType ESignUnlockType
FSignSetData = {}



---@class FSimulatedInterestState
---@field ActionCooldowns TMap<FGoapActionInstance, float>
---@field Vitals FVitalState
---@field CarriedItems TArray<FInterestStateItemStack>
---@field GroundItems TArray<FInterestStateItemStack>
---@field Killed TSet<FGoapActionOwner>
FSimulatedInterestState = {}



---@class FSittingCharacter
---@field Character TWeakObjectPtr<ASurvivalPlayerCharacter>
---@field SlotIndex int32
FSittingCharacter = {}



---@class FSittingSlot
---@field SittingMontage UAnimMontage
FSittingSlot = {}



---@class FSkeletalMeshAttachment
---@field SkeletalMesh USkeletalMesh
---@field SocketName FName
FSkeletalMeshAttachment = {}



---@class FSoundSpeakerData : FBaseCustomDropdownData
---@field Sound USoundBase
---@field SoundJA USoundBase
FSoundSpeakerData = {}



---@class FSourceTexture
---@field Texture UTexture2D
FSourceTexture = {}



---@class FSpawnData
---@field ActorToSpawn TSoftClassPtr<ASurvivalCharacter>
---@field Colony FGameplayTag
---@field SpawnCount int32
---@field SpawnPoint ATargetPoint
---@field SpawnClimbSplineRole FGameplayTag
---@field InteractionPoint ATargetPoint
---@field AssociatedActor ASpawnAssociatedActor
---@field SpawnOffset FVector
---@field bDisableProxyLODAI boolean
FSpawnData = {}



---@class FSpawnTargetSpawningData
---@field SpawnTarget TWeakObjectPtr<AWaveSpawnTarget>
---@field HasRegisteredHUDMarker boolean
FSpawnTargetSpawningData = {}



---@class FSpawnedWaveActorData
FSpawnedWaveActorData = {}


---@class FSpoilData
---@field SpoilState ESpoilState
---@field SpoiledResultItem FDataTableRowHandle
FSpoilData = {}



---@class FStaticMeshInstancingData
---@field Enabled boolean
---@field PerMeshConfig TMap<UStaticMesh, FStaticMeshInstancingParams>
FStaticMeshInstancingData = {}



---@class FStaticMeshInstancingParams
---@field Enabled boolean
---@field BatchRadius float
FStaticMeshInstancingParams = {}



---@class FStatusEffectBatch
---@field StatusEffectsToAdd TArray<FDataTableRowHandle>
FStatusEffectBatch = {}



---@class FStatusEffectData : FTableRowBase
---@field DisplayData FStatusEffectUIData
---@field Type EStatusEffectType
---@field Value float
---@field DurationType EStatusEffectDurationType
---@field Duration float
---@field Interval float
---@field MaxStackCount int32
---@field DamageTypeFlags uint32
---@field DamageType TSubclassOf<USurvivalDamageType>
---@field ApplicationTags FGameplayTagContainer
---@field EffectTags FGameplayTagContainer
---@field DamageSourceTags FGameplayTagContainer
---@field DamageTargetTags FGameplayTagContainer
---@field UniqueTag FGameplayTag
---@field ApplyType EStatusEffectApplyType
---@field AttackChargeType EStatusEffectAttackChargeType
---@field ClearFlags uint32
---@field ExtraData FDataTableRowHandle
---@field SpawnedActor TSoftClassPtr<ASpawnedEffectActor>
---@field ScreenEffectData UScreenEffectData
---@field VisualEffectData TSoftObjectPtr<UVisualEffect>
---@field bShowInUI boolean
---@field bIsNegativeEffectInUI boolean
---@field bStackInUI boolean
FStatusEffectData = {}



---@class FStatusEffectHazardData : FBaseCustomDropdownData
---@field StatusEffectReferences TArray<FDataTableRowHandle>
---@field EffectApplyType EHazardEffectApplyType
---@field Interval float
FStatusEffectHazardData = {}



---@class FStatusEffectPickupData : FBaseCustomDropdownData
---@field StatusEffectReferences TArray<FDataTableRowHandle>
---@field TintColor FLinearColor
---@field StaticMesh TSoftObjectPtr<UStaticMesh>
---@field SoundFX TSoftObjectPtr<USoundBase>
FStatusEffectPickupData = {}



---@class FStatusEffectReferenceCategoryData : FTableRowBase
---@field CategoryName FLocString
FStatusEffectReferenceCategoryData = {}



---@class FStatusEffectReferenceData : FTableRowBase
---@field Icon TSoftObjectPtr<UTexture2D>
---@field Category FDataTableRowHandle
---@field DisplayName FLocString
---@field Description FLocString
FStatusEffectReferenceData = {}



---@class FStatusEffectUIData
---@field Icon UTexture2D
---@field Name FLocString
---@field Description FLocString
FStatusEffectUIData = {}



---@class FStencilRequiredGlobalPostProcessMaterial
---@field PostProcessMaterial FWeightedBlendable
---@field Bits EManagedPostProcessBitMasks
---@field ActiveObjectIDs TSet<int32>
FStencilRequiredGlobalPostProcessMaterial = {}



---@class FStreamVoiceOverData
FStreamVoiceOverData = {}


---@class FSurfaceEffect
---@field SurfaceType EPhysicalSurface
---@field VisualEffect TSoftObjectPtr<UVisualEffect>
---@field SoundEffect TSoftObjectPtr<USoundBase>
FSurfaceEffect = {}



---@class FSurvivalCharacterData : FTableRowBase
---@field Icon TSoftObjectPtr<UObject>
---@field ModIcon TSoftObjectPtr<UObject>
---@field HudIcon TSoftObjectPtr<UObject>
---@field CharacterName FLocString
---@field CharacterTags FGameplayTagContainer
---@field bTameable boolean
---@field TamingFood TArray<FDataTableRowHandle>
---@field PetPersonalities TArray<FDataTableRowHandle>
---@field ActivePetPassiveEffects TArray<FDataTableRowHandle>
---@field BestiaryItem FDataTableRowHandle
---@field PlacementData FPlacementData
FSurvivalCharacterData = {}



---@class FSurvivalTraitSettings
---@field MaxValue float
---@field InitialValue float
---@field AdjustmentPerSecond float
---@field AdjustmentTickInterval float
---@field BonusPercentage float
---@field PenaltyPercentage float
---@field AdjustmentEffect FDataTableRowHandle
---@field DamageEffect FDataTableRowHandle
---@field BonusEffect FDataTableRowHandle
FSurvivalTraitSettings = {}



---@class FSwimmingCharacterMovementSettings
---@field MovementType ESwimmingMovementType
---@field MinimumDistanceFactor float
---@field HorizontalFactor float
---@field VerticalPullFactor float
FSwimmingCharacterMovementSettings = {}



---@class FTagDataInt
---@field Tag FGameplayTag
---@field Value int32
FTagDataInt = {}



---@class FTamingHappinessStep
---@field MaxHappiness float
---@field DisplayName FLocString
FTamingHappinessStep = {}



---@class FTeamData : FTableRowBase
---@field DefaultRelationship ETeamAttitude::Type
---@field FriendlyTeams TArray<FDataTableRowHandle>
---@field NeutralTeams TArray<FDataTableRowHandle>
---@field HostileTeams TArray<FDataTableRowHandle>
---@field FleeTeams TArray<FDataTableRowHandle>
---@field bAlwaysFlee boolean
---@field FactionTag FGameplayTag
---@field ReputationOnDeath int32
FTeamData = {}



---@class FTechTreeData : FTableRowBase
---@field DisplayName FLocString
---@field DisplayDescription FLocString
---@field IconBrush FSlateBrush
---@field TechTreeRecipesTable UDataTable
---@field ScienceRewardOnUnlock int32
FTechTreeData = {}



---@class FTechTreeRecipeData : FTableRowBase
---@field OverrideDisplayName FLocString
---@field OverrideDisplayDescription FLocString
---@field UnlockType ETechTreeUnlockType
---@field UnlockData TArray<FDataTableRowHandle>
---@field UnlockDataTags TArray<FGameplayTag>
---@field Cost int32
---@field RequiredTechTreeUnlocks int32
---@field bRecommended boolean
---@field bIsTimedExclusive boolean
---@field RequiredNewGamePlusTier int32
FTechTreeRecipeData = {}



---@class FTechUnlockData
---@field TechTreeNodeRowName FName_NetCrc
---@field PointsAllocated int32
FTechUnlockData = {}



---@class FTeleportedActorData
---@field Actor AActor
---@field TeleportedGameTime float
FTeleportedActorData = {}



---@class FTerminalConditional
---@field ConditionalStateName FName
---@field GlobalVariableConditionals TArray<FGlobalVariableReferenceConditional>
---@field ConditionalLogic ELogicalOperator
---@field WidgetState ETerminalWidgetState
---@field StateDisablesInteraction boolean
---@field GlobalValuesSetOnInteract TArray<FGlobalVariableReferenceConditional>
---@field RequiredItemsToSetGlobalValues TArray<FDataTableRowHandle>
---@field InteractionText FLocString
---@field ToggleComponent UConditionalToggleComponent
FTerminalConditional = {}



---@class FThirdPersonShadowVisuals
---@field ShadowArmorMesh USkeletalMeshComponent
---@field OriginalArmorMesh USkeletalMeshComponent
---@field ItemMeshes TArray<UPrimitiveComponent>
---@field ItemOriginalMeshes TArray<UPrimitiveComponent>
---@field PrimSlotHiddenForAnim boolean
FThirdPersonShadowVisuals = {}



---@class FThreatDamageModifierConfig
---@field ThreatMultiplier float
---@field DamageSourceTags FGameplayTagContainer
---@field DamageTypeFlags uint32
---@field DamageType TSubclassOf<USurvivalDamageType>
FThreatDamageModifierConfig = {}



---@class FThrowData
---@field bCanThrow boolean
---@field bCanThrowUnderWater boolean
---@field bRotateToVelocity boolean
---@field BaseRotationAngle float
---@field bDestroyOnAttack boolean
---@field bDestroyOnDelay boolean
---@field ThrowAttackType EThrowAttackType
---@field ThrowSpeedMultiplier float
---@field ThrowSpeedMultiplierInWater float
---@field AttackDelay float
---@field OverrideImpactAttack FDataTableRowHandle
---@field ImpactType FGameplayTag
---@field ThrowAnim TSoftObjectPtr<UAnimMontage>
FThrowData = {}



---@class FThrowingImpactData
---@field Tag FGameplayTag
---@field AttackData FDataTableRowHandle
---@field SoundIntensity float
---@field SoundRange float
FThrowingImpactData = {}



---@class FTimeOfDayCurveCache
---@field SunPitch float
---@field SunOcclusionMask float
---@field SunTemperature float
---@field SunVolumetricInscatter float
---@field SunIntensity float
---@field SunDiscColor FLinearColor
---@field MoonIntensity float
---@field MoonFade float
---@field SkylightCubemap float
---@field SkylightCubemapTranslucent float
---@field HedgeSkylight float
---@field WaterSkylightIntensity float
---@field FogSkylightScatter float
---@field SkylightFilter FLinearColor
---@field ZenithColor FLinearColor
---@field HorizonColor FLinearColor
---@field CloudColor FLinearColor
---@field AtmosFogColor FLinearColor
---@field FogExtinction float
---@field LootableIntensity float
---@field WaterlineColor FLinearColor
---@field WaterBallEmissive FLinearColor
FTimeOfDayCurveCache = {}



---@class FTimedBossPhase : FBaseBossPhase
---@field Duration float
FTimedBossPhase = {}



---@class FTimelapseAudioCue
---@field Cue USoundCue
---@field StartTime float
---@field EndTime float
FTimelapseAudioCue = {}



---@class FTrackedAura
FTrackedAura = {}


---@class FTrackedItemSpawnGroupEventRepData
---@field UniqueId uint32
---@field EventIndex int32
---@field Seed int32
FTrackedItemSpawnGroupEventRepData = {}



---@class FTrackedItemSpawnGroupRepData : FFastArraySerializerItem
---@field ItemSpawnGroupData UItemSpawnGroupData
---@field Events TArray<FTrackedItemSpawnGroupEventRepData>
FTrackedItemSpawnGroupRepData = {}



---@class FTrackedItemSpawnGroupRepDataArray : FFastArraySerializer
---@field Items TArray<FTrackedItemSpawnGroupRepData>
FTrackedItemSpawnGroupRepDataArray = {}



---@class FTrackedLooker
FTrackedLooker = {}


---@class FTrackedSpawnData
FTrackedSpawnData = {}


---@class FTrackingPart
---@field DelayTurnThreshold float
---@field DelayTurnTimer float
---@field Speed float
FTrackingPart = {}



---@class FTrapHitParams
---@field DamageSourceTags FGameplayTagContainer
---@field DamageTypeFlags uint32
---@field DamageType TSubclassOf<USurvivalDamageType>
FTrapHitParams = {}



---@class FTriggerBehaviorData : FTableRowBase
---@field BehaviorClass TSubclassOf<UTriggerBehaviorBase>
---@field BehaviorTitle FLocString
---@field BehaviorDescription FLocString
---@field OverrideBehaviorTitles TArray<FTriggerBehaviorTitleOverride>
---@field BehaviorIcon TSoftObjectPtr<UTexture2D>
---@field UseTargetCustomProperties boolean
---@field AllowedDefaultEventTypes TArray<ETriggerEventType>
---@field CustomProperties UCustomPropertyDataAsset
---@field BehaviorCustomizationWidgetClass UGameUserWidget
FTriggerBehaviorData = {}



---@class FTriggerBehaviorTitleOverride
---@field Class UClass
---@field OverrideTitle FLocString
FTriggerBehaviorTitleOverride = {}



---@class FTriggerBehaviorUIData
---@field Behaviors TArray<FDataTableRowHandle>
FTriggerBehaviorUIData = {}



---@class FTriggerComponentStatus
FTriggerComponentStatus = {}


---@class FTriggerConnectorDeinstancedKey
---@field DeinstancedFoliageKey FFoliageKey
---@field DeinstancedBuildingKey FBuildingGridBuildingId
FTriggerConnectorDeinstancedKey = {}



---@class FTriggerConnectorOwnerList
---@field TriggerConnectorOwners TArray<AActor>
FTriggerConnectorOwnerList = {}



---@class FTriggerEventData : FTableRowBase
---@field EventTitle FLocString
---@field EventDescription FLocString
---@field OverrideEventTitles TArray<FTriggerEventTitleOverride>
---@field EventType ETriggerEventType
---@field EventIcon TSoftObjectPtr<UTexture2D>
FTriggerEventData = {}



---@class FTriggerEventTitleOverride
---@field Class UClass
---@field OverrideTitle FLocString
FTriggerEventTitleOverride = {}



---@class FTriggerList
---@field List TArray<TScriptInterface<ITriggerObject>>
FTriggerList = {}



---@class FTriggerManyBatch
---@field Targets TMap<int32, FTriggerList>
---@field PendingDistributionObjects TArray<TScriptInterface<ITriggerObject>>
FTriggerManyBatch = {}



---@class FTriggerObjectData
---@field TriggerID int32
---@field OutputTriggerIDs TArray<int32>
---@field InputTriggerIDs TArray<int32>
---@field TriggerConnectionIDs TArray<int32>
---@field TriggerClassPathHash uint32
FTriggerObjectData = {}



---@class FTriggerProcessingEntry
---@field ID int32
---@field Event FDataTableRowHandle
FTriggerProcessingEntry = {}



---@class FTurretAttackData
---@field AmmoItem FDataTableRowHandle
---@field Attack FDataTableRowHandle
---@field AttackCooldown float
FTurretAttackData = {}



---@class FTutorialControlIdentifier
---@field AxisName FName
---@field bAxisPositive boolean
FTutorialControlIdentifier = {}



---@class FTutorialData : FTableRowBase
---@field TutorialIconSoft TSoftObjectPtr<UTexture2D>
---@field TutorialControls TArray<FTutorialControlIdentifier>
---@field TutorialTitle FLocString
---@field TutorialText FLocString
---@field TutorialDescription FLocString
---@field TutorialPages TArray<FTutorialPageData>
---@field TutorialDisplayTime ETutorialDisplayTime
---@field CategoryTag FGameplayTag
---@field LogType ETutorialLogType
---@field bShowEvenWhenTutorialsDisabled boolean
---@field bShowInStoryMode boolean
---@field bShowInPlaygroundMode boolean
FTutorialData = {}



---@class FTutorialPageData
---@field TutorialIconSoft TSoftObjectPtr<UTexture2D>
---@field TutorialTitle FLocString
---@field TutorialText FLocString
---@field TutorialDescription FLocString
---@field TutorialControls TArray<FTutorialControlIdentifier>
FTutorialPageData = {}



---@class FUIAudioData : FTableRowBase
---@field Sound USoundBase
FUIAudioData = {}



---@class FUndoInitializationHandle
---@field Operation TWeakObjectPtr<UBaseUndoOperation>
FUndoInitializationHandle = {}



---@class FUnreachableActionData
FUnreachableActionData = {}


---@class FVFXSpawnerData : FBaseCustomDropdownData
---@field ParticleSystem UParticleSystem
---@field ParticleSystemActor TSubclassOf<AVFXActor>
---@field NiagaraParticleSystem UNiagaraSystem
---@field RotationOffset FRotator
---@field CastsShadows boolean
---@field Sound USoundBase
FVFXSpawnerData = {}



---@class FValueAdjustment
---@field Value float
---@field MinimumValue float
---@field MaximumValue float
FValueAdjustment = {}



---@class FVitalStatValue
---@field VitalValue float
FVitalStatValue = {}



---@class FVitalState
---@field Vitals TMap<UBaseVitalStat, FVitalStatValue>
---@field DirtyVitals TMap<UBaseVitalStat, FVitalStatValue>
FVitalState = {}



---@class FWaveCompositionData
---@field FactionTag FGameplayTag
---@field SpawnCount int32
---@field ReachedTargetCount int32
---@field Weight int32
FWaveCompositionData = {}



---@class FWaveSpawn
---@field ActorToSpawn TSoftClassPtr<ASurvivalCharacter>
---@field SpawnWeight int32
---@field GlobalVariable FGlobalVariableReference
---@field GlobalVariableComparisonOperator EComparisonOperator
---@field GlobalVariableCompareValue int32
FWaveSpawn = {}



---@class FWaveSpawnFaction
---@field FactionTag FGameplayTag
---@field ScienceReward int32
---@field Spawns TArray<FWaveSpawn>
FWaveSpawnFaction = {}



---@class FWaveSpawnParams
---@field SpawnChance float
---@field Heat int32
FWaveSpawnParams = {}



---@class FWindowLock
---@field Window TSoftClassPtr<UWindowWidget>
---@field Locker TWeakObjectPtr<AActor>
FWindowLock = {}



---@class FWorldEvaluatorInstance
---@field Evaluator UGoapWorldStateEvaluator
---@field Multiplier float
FWorldEvaluatorInstance = {}



---@class FWorldEventWaveData
---@field Priority float
---@field SpawnChancePerCheck float
FWorldEventWaveData = {}



---@class FZoneAudioData : FTableRowBase
---@field OneShotTable UDataTable
---@field QuadAudioBedSounds UQuadAudioBedSounds
---@field OverrideMusicSettings UMusicSettings
---@field ReverbSettings FZoneReverbSettings
---@field bInteriorAudio boolean
FZoneAudioData = {}



---@class FZoneData : FTableRowBase
---@field DisplayName FLocString
---@field Priority int32
---@field bUseInteriorTrigger boolean
---@field ZoneAudio FDataTableRowHandle
---@field HourlyReputationAccruals TArray<FReputationData>
FZoneData = {}



---@class FZoneOneShotEntry : FTableRowBase
---@field StartHourOfDay int32
---@field EndHourOfDay int32
---@field UseCurveForProbability boolean
---@field Probability float
---@field ProbabilityCurve FRuntimeFloatCurve
---@field UseCurveForRetriggerTime boolean
---@field RetriggerTimeRange FVector2D
---@field MinRetriggerTimeCurve FRuntimeFloatCurve
---@field MaxRetriggerTimeCurve FRuntimeFloatCurve
---@field OneShotSpawnDistanceRange FVector2D
---@field RandomSounds TArray<USoundBase>
FZoneOneShotEntry = {}



---@class FZoneReverbSettings
---@field ReverbEffect UReverbEffect
---@field TagName FName
---@field Priority float
---@field Volume float
---@field FadeTime float
FZoneReverbSettings = {}



---@class ICameraViewProvider : IInterface
ICameraViewProvider = {}

---@param IsViewProvider boolean
function ICameraViewProvider:OnIsViewProviderChanged(IsViewProvider) end
---@return boolean
function ICameraViewProvider:HasLookAtLocation() end
---@return FVector
function ICameraViewProvider:GetLookAtLocation() end
---@return FTransform
function ICameraViewProvider:GetCameraViewTransform() end


---@class ICharacterAudioSource : IInterface
ICharacterAudioSource = {}

---@param SoundTag FGameplayTag
---@param SoundType ECharacterAudioType
---@return USoundBase
function ICharacterAudioSource:GetSoundForTag(SoundTag, SoundType) end


---@class ICombatTrackerInterface : IInterface
ICombatTrackerInterface = {}

---@param Character ASurvivalCharacter
function ICombatTrackerInterface:RemoveCombatTracker(Character) end
---@return FGameplayTag
function ICombatTrackerInterface:GetHighestPriorityCombatTag() end
---@param Character ASurvivalCharacter
function ICombatTrackerInterface:AddCombatTracker(Character) end


---@class ICustomPropertyInterface : IInterface
ICustomPropertyInterface = {}

---@param PropertyName FName
---@param PropertyValue float
function ICustomPropertyInterface:SetCustomProperty(PropertyName, PropertyValue) end


---@class IDebuggableInterface : IInterface
IDebuggableInterface = {}


---@class IDisplayName : IInterface
IDisplayName = {}

---@return FText
function IDisplayName:GetDisplayName() end


---@class IGoapActionProviderInterface : IInterface
IGoapActionProviderInterface = {}

---@param GameInstance USurvivalGameInstance
---@param InOwner UObject
---@return TArray<UGoapAction>
function IGoapActionProviderInterface:AllocateGOAPActions(GameInstance, InOwner) end


---@class IHUDMarkerTargetInterface : IInterface
IHUDMarkerTargetInterface = {}

---@return boolean
function IHUDMarkerTargetInterface:GetShouldShowHUDMarker() end


---@class IInteractableInterface : IInterface
IInteractableInterface = {}

---@param Channel EInteractionChannel
---@param InstigatedBy AActor
function IInteractableInterface:UpdateInteractionPosition(Channel, InstigatedBy) end
---@return boolean
function IInteractableInterface:IsLockingAnim() end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@param InteractionType EInteractionType
---@return EInteractionState
function IInteractableInterface:IsInteractionEnabledForBuilder(Channel, InstigatedBy, InteractionType) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return EInteractionState
function IInteractableInterface:IsInteractionEnabled(Channel, InstigatedBy) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
function IInteractableInterface:Interact(Channel, InstigatedBy) end
---@return boolean
function IInteractableInterface:HideHUDCursorWhenInRange() end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return FDataTableRowHandle
function IInteractableInterface:GetRequiredRecipe(Channel, InstigatedBy) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return int32
function IInteractableInterface:GetRequiredItemCount(Channel, InstigatedBy) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return FDataTableRowHandle
function IInteractableInterface:GetRequiredItem(Channel, InstigatedBy) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return float
function IInteractableInterface:GetOverrideInteractionTime(Channel, InstigatedBy) end
---@param InstigatedBy AActor
---@return EInteractionType
function IInteractableInterface:GetOverrideInteractIcon(InstigatedBy) end
---@return EInteractionVisibility
function IInteractableInterface:GetNameVisibility() end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return EInteractionType
function IInteractableInterface:GetInteractionType(Channel, InstigatedBy) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@param OutText FString
function IInteractableInterface:GetInteractionText(Channel, InstigatedBy, OutText) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return EInteractionPriority
function IInteractableInterface:GetInteractionPriority(Channel, InstigatedBy) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return EInteractAnimType
function IInteractableInterface:GetInteractHoldAnimType(Channel, InstigatedBy) end
---@param InstigatedBy AActor
---@return EInteractHighlightLevel
function IInteractableInterface:GetInteractHighlightLevel(InstigatedBy) end
---@param OutText FString
function IInteractableInterface:GetInteractableName(OutText) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return EInteractAnimType
function IInteractableInterface:GetInteractableAnimType(Channel, InstigatedBy) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return TSubclassOf<AActor>
function IInteractableInterface:GetInteractableAnimProp(Channel, InstigatedBy) end
---@param InstigatedBy AActor
---@return FVector
function IInteractableInterface:GetHoldInteractionPosition(InstigatedBy) end
---@param InstigatedBy AActor
---@return float
function IInteractableInterface:GetHoldInteractionCancelDistance(InstigatedBy) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return UAnimMontage
function IInteractableInterface:GetCustomInteractAnim(Channel, InstigatedBy) end
---@param InstigatedBy AActor
function IInteractableInterface:EndInteraction(InstigatedBy) end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@param HoldInteractType EInteractHoldHandleType
function IInteractableInterface:EndInteractHold(Channel, InstigatedBy, HoldInteractType) end
function IInteractableInterface:DrawInteractableDebug() end
---@return boolean
function IInteractableInterface:CanReleaseLockBeforeEnd() end
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
function IInteractableInterface:BeginInteractHold(Channel, InstigatedBy) end


---@class IInterfaceCameraOwnerInterface : IInterface
IInterfaceCameraOwnerInterface = {}

---@param EnteringInteraction boolean
function IInterfaceCameraOwnerInterface:OnInteractionStateChanged(EnteringInteraction) end
---@return USpringArmComponent
function IInterfaceCameraOwnerInterface:GetInteractionCameraSpringArm() end


---@class IInteriorTriggerCharacter : IInterface
IInteriorTriggerCharacter = {}


---@class IItemContainerInterface : IInterface
IItemContainerInterface = {}

---@param Item UItem
---@param Count int32
---@return int32
function IItemContainerInterface:RemoveItem(Item, Count) end
---@return boolean
function IItemContainerInterface:HasItems() end
---@return TArray<UItem>
function IItemContainerInterface:GetItems() end
---@param Item UItem
---@param Offset FVector
---@return FTransform
function IItemContainerInterface:GetDropItemTransform(Item, Offset) end
---@param Item UItem
---@param Count int32
function IItemContainerInterface:DropItem(Item, Count) end
---@param Items TArray<UItem>
---@return boolean
function IItemContainerInterface:CanAddItems(Items) end
---@param ItemRowHandles TArray<FDataTableRowHandle>
---@return boolean
function IItemContainerInterface:CanAddItemRowHandles(ItemRowHandles) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function IItemContainerInterface:CanAddItemRowHandle(ItemRowHandle) end
---@param Item UItem
---@return boolean
function IItemContainerInterface:CanAddItem(Item) end
---@param Item UItem
---@param bIsNewItem boolean
function IItemContainerInterface:AddItem(Item, bIsNewItem) end


---@class IItemSource : IInterface
IItemSource = {}

---@param ItemType FDataTableRowHandle
---@return boolean
function IItemSource:IsSourceForItem(ItemType) end
---@param ItemType FDataTableRowHandle
---@return FVector
function IItemSource:GetItemSourceWorldLocation(ItemType) end


---@class ILODableActorInterface : IInterface
ILODableActorInterface = {}

function ILODableActorInterface:TransferBlueprintInstanceDataToProxy() end
---@return boolean
function ILODableActorInterface:ShouldRestoreTransform() end
function ILODableActorInterface:RestoreBlueprintInstanceDataToFullActor() end
function ILODableActorInterface:LODActorCheckValidity() end
---@return boolean
function ILODableActorInterface:HasBlueprintInstanceData() end
---@return float
function ILODableActorInterface:GetMaxFullActorDistance() end
---@return UClass
function ILODableActorInterface:GetLODActorClass() end
---@return boolean
function ILODableActorInterface:GetLifetimeDespawnWhenProxyOnly() end
---@return float
function ILODableActorInterface:GetGameLifetimeHours() end
---@return boolean
function ILODableActorInterface:CanActorProxyWhileSimulatingPhysics() end
---@return boolean
function ILODableActorInterface:CanActorProxyEver() end
---@return boolean
function ILODableActorInterface:CanActorProxy() end


---@class ILODableComponentInterface : IInterface
ILODableComponentInterface = {}

---@return UClass
function ILODableComponentInterface:GetLODComponentClass() end


---@class ILootableInterface : IInterface
ILootableInterface = {}

---@param ItemDataRowHandle FDataTableRowHandle
---@return boolean
function ILootableInterface:CheckLootConditionals(ItemDataRowHandle) end


---@class IPersistentInterface : IInterface
IPersistentInterface = {}

---@return boolean
function IPersistentInterface:SkippedLoadOfActor() end
---@return boolean
function IPersistentInterface:ShouldSaveTransform() end
---@return boolean
function IPersistentInterface:ShouldSave() end
---@return boolean
function IPersistentInterface:ShouldLoad() end
---@return boolean
function IPersistentInterface:ShouldEditModeSave() end
---@return boolean
function IPersistentInterface:ShouldEditModeRestore() end
---@param Writer USaveWriter
function IPersistentInterface:Save(Writer) end
function IPersistentInterface:ProcessLoadData() end
function IPersistentInterface:PrepareSave() end
---@param Reader USaveReader
---@param Version int32
---@return boolean
function IPersistentInterface:LoadAll(Reader, Version) end
---@param Reader USaveReader
---@param Version int32
function IPersistentInterface:Load(Reader, Version) end
---@return int32
function IPersistentInterface:GetSaveVersion() end
---@return int32
function IPersistentInterface:GetProcessLoadDataOrder() end
---@return FGameVersion
function IPersistentInterface:GetMinimumSaveVersionToRestore() end


---@class IPersistentTrigger : IInterface
IPersistentTrigger = {}

---@param LastState boolean
function IPersistentTrigger:SetLastPersistentTriggerState(LastState) end
---@return boolean
function IPersistentTrigger:IsPersistentTrigger() end
---@return boolean
function IPersistentTrigger:GetLastPersistentTriggerState() end
---@return boolean
function IPersistentTrigger:EvaluateTriggerActive() end
---@return boolean
function IPersistentTrigger:CanCacheLastPersistentTriggerState() end


---@class IPlaceable : IInterface
IPlaceable = {}

---@param From AActor
function IPlaceable:TransferAllData(From) end
---@param bIsValid boolean
function IPlaceable:StartPlacementMode(bIsValid) end
---@param IsValid boolean
function IPlaceable:SetPlacementValid(IsValid) end
---@param InAngle FRotator
function IPlaceable:SetPlacementRotation(InAngle) end
---@param InSurface EBuildingGridSurfaceType
function IPlaceable:SetAnchoredSurface(InSurface) end
---@param Sender UBuildingPlacementComponent
function IPlaceable:PreSpawnForPlacement(Sender) end
function IPlaceable:NotifyRelocationStopped() end
function IPlaceable:NotifyRelocationStarted() end
---@return boolean
function IPlaceable:IsInPlacement() end
---@param InstigatedBy AActor
---@return EInteractionState
function IPlaceable:GetRelocationEnabledState(InstigatedBy) end
---@return boolean
function IPlaceable:GetPlacementValid() end
---@return FRotator
function IPlaceable:GetPlacementRotation() end
---@return FDataTableRowHandle
function IPlaceable:GetPlaceableDataRow() end
---@return boolean
function IPlaceable:GetIsUserPlaced() end
---@return FPlaceableCopyData
function IPlaceable:GetCopyableData() end
---@return EBuildingGridSurfaceType
function IPlaceable:GetAnchoredSurface() end
---@param InstigatedBy AActor
function IPlaceable:FinishPlacementMode(InstigatedBy) end
---@param PendingLocation FBuildingGridLocation
function IPlaceable:DrawBeingPlacedDebug(PendingLocation) end
---@param At FBuildingGridLocation
---@return boolean
function IPlaceable:CheckAdditionalPlacementRequirements(At) end
---@param From FPlaceableCopyData
function IPlaceable:ApplySourceData(From) end


---@class IPossessableInterface : IInterface
IPossessableInterface = {}


---@class IPoweredBuilding : IInterface
IPoweredBuilding = {}

---@return boolean
function IPoweredBuilding:IsSwitchActive() end
---@return boolean
function IPoweredBuilding:IsSwitch() end
---@return boolean
function IPoweredBuilding:IsPowerSource() end
---@return boolean
function IPoweredBuilding:IsPowerReceiver() end
---@return boolean
function IPoweredBuilding:HasValidPowerId() end
---@return float
function IPoweredBuilding:GetPowerValue() end
---@return EBuildingPowerState
function IPoweredBuilding:GetPowerState() end
---@return FBuildingPowerId
function IPoweredBuilding:GetBuildingPowerId() end
---@return boolean
function IPoweredBuilding:CanJoinPowerNetwork() end


---@class IPoweredBuildingConnection : IInterface
IPoweredBuildingConnection = {}

---@param InNodeA int32
---@param InNodeB int32
---@param InNetworkIdA int32
---@param InNetworkIdB int32
function IPoweredBuildingConnection:SetEdgeInfo(InNodeA, InNodeB, InNetworkIdA, InNetworkIdB) end
---@return USplineMeshComponent
function IPoweredBuildingConnection:GetSplineMeshComponent() end
---@param OutNodeA int32
---@param OutNodeB int32
---@param OutNetworkIdA int32
---@param OutNetworkIdB int32
function IPoweredBuildingConnection:GetEdgeInfo(OutNodeA, OutNodeB, OutNetworkIdA, OutNetworkIdB) end


---@class IRelevanceOptimizationInterface : IInterface
IRelevanceOptimizationInterface = {}


---@class IRenderTargetPublisher : IInterface
IRenderTargetPublisher = {}

---@param ManagedRTO UManagedRenderTargetObject
function IRenderTargetPublisher:UnregisterAsRenderTargetPublisher(ManagedRTO) end
---@param ManagedRTO UManagedRenderTargetObject
function IRenderTargetPublisher:RegisterAsRenderTargetPublisher(ManagedRTO) end
---@param ManagedRTO UManagedRenderTargetObject
---@param RenderTarget UTextureRenderTarget2D
function IRenderTargetPublisher:OnPublisherRenderTargetWillBeDestroyed(ManagedRTO, RenderTarget) end
---@param ManagedRTO UManagedRenderTargetObject
---@param RenderTarget UTextureRenderTarget2D
function IRenderTargetPublisher:OnPublisherRenderTargetCreated(ManagedRTO, RenderTarget) end


---@class IRenderTargetSubscriber : IInterface
IRenderTargetSubscriber = {}

---@param ManagedRTO UManagedRenderTargetObject
function IRenderTargetSubscriber:UnregisterAsRenderTargetSubscriber(ManagedRTO) end
---@param ManagedRTO UManagedRenderTargetObject
function IRenderTargetSubscriber:RegisterAsRenderTargetSubscriber(ManagedRTO) end
---@param ManagedRTO UManagedRenderTargetObject
---@param RenderTarget UTextureRenderTarget2D
function IRenderTargetSubscriber:OnSubscribedRenderTargetWillBeUnavailable(ManagedRTO, RenderTarget) end
---@param ManagedRTO UManagedRenderTargetObject
---@param RenderTarget UTextureRenderTarget2D
function IRenderTargetSubscriber:OnSubscribedRenderTargetAvailable(ManagedRTO, RenderTarget) end


---@class IReplicatedSubobject : IInterface
IReplicatedSubobject = {}


---@class ISMInstancerInterface : IInterface
ISMInstancerInterface = {}


---@class IScannableTargetInterface : IInterface
IScannableTargetInterface = {}

---@return FDataTableRowHandle
function IScannableTargetInterface:GetBestiaryItemData() end
---@return boolean
function IScannableTargetInterface:CanBeScanned() end


---@class ISharedAsyncTraceClient : IInterface
ISharedAsyncTraceClient = {}


---@class ISignificance : IInterface
ISignificance = {}


---@class ISpawnPointProviderInterface : IInterface
ISpawnPointProviderInterface = {}

---@param SpawnPoint FItemSpawnPointData
---@param bSoft boolean
---@return UBaseLODActor
function ISpawnPointProviderInterface:Spawn(SpawnPoint, bSoft) end
---@return boolean
function ISpawnPointProviderInterface:IsSpawnPointProviderEnabled() end
---@param SpawnPoints TArray<FItemSpawnPointData>
function ISpawnPointProviderInterface:GetSpawnPoints(SpawnPoints) end
---@return FGuid
function ISpawnPointProviderInterface:GetProviderID() end
---@return TSubclassOf<UItemSpawnGroupData>
function ISpawnPointProviderInterface:GetItemSpawnGroupData() end
---@return boolean
function ISpawnPointProviderInterface:DoesSpawnActors() end
---@param SpawnPoint FItemSpawnPointData
function ISpawnPointProviderInterface:Despawn(SpawnPoint) end


---@class IStatusEffectOrigin : IInterface
IStatusEffectOrigin = {}


---@class ISwappableFoliageInterface : IInterface
ISwappableFoliageInterface = {}

---@param FromKey FFoliageKey
---@param bFromDamage boolean
function ISwappableFoliageInterface:NotifySwapped(FromKey, bFromDamage) end
---@return ECanRevertToFoliageState
function ISwappableFoliageInterface:CanRevertToFoliage() end


---@class ITimeOfDayTrigger : IInterface
ITimeOfDayTrigger = {}

---@return float
function ITimeOfDayTrigger:GetHourToSet() end


---@class ITriggerActivateable : IInterface
ITriggerActivateable = {}

---@param bActivated boolean
---@param Instigators TArray<AActor>
function ITriggerActivateable:SetActivatedState(bActivated, Instigators) end
---@return boolean
function ITriggerActivateable:GetActivatedState() end


---@class ITriggerConnectionInterface : IInterface
ITriggerConnectionInterface = {}


---@class ITriggerCustomizable : IInterface
ITriggerCustomizable = {}

---@return boolean
function ITriggerCustomizable:IsTriggerCustomizable() end


---@class ITriggerLightable : IInterface
ITriggerLightable = {}

---@param bEnabled boolean
function ITriggerLightable:SetLightEnabled(bEnabled) end
---@return boolean
function ITriggerLightable:IsTriggerLightable() end
---@return boolean
function ITriggerLightable:GetLightEnabled() end


---@class ITriggerLockable : IInterface
ITriggerLockable = {}

---@param bLocked boolean
function ITriggerLockable:SetLockedState(bLocked) end
---@return boolean
function ITriggerLockable:IsTriggerLockable() end
---@return boolean
function ITriggerLockable:GetLockedState() end


---@class ITriggerObject : IInterface
ITriggerObject = {}

---@param Locked boolean
function ITriggerObject:SetIsTriggerLocked(Locked) end
---@param Enabled boolean
function ITriggerObject:SetIsTriggerEnabled(Enabled) end
---@param Active boolean
function ITriggerObject:SetIsTriggerActive(Active) end
---@param Instigators TArray<AActor>
---@param Event FDataTableRowHandle
---@param Force boolean
function ITriggerObject:SendTriggerManyEventArray(Instigators, Event, Force) end
---@param Info FSendTriggerEventInfo
function ITriggerObject:SendTriggerEventEx(Info) end
---@param Instigators TArray<AActor>
---@param Event FDataTableRowHandle
---@param Force boolean
function ITriggerObject:SendTriggerEventArray(Instigators, Event, Force) end
---@param Instigator AActor
---@param Event FDataTableRowHandle
---@param Force boolean
function ITriggerObject:SendTriggerEvent(Instigator, Event, Force) end
---@param Instigators TArray<AActor>
---@param Event FDataTableRowHandle
---@param Count int32
---@param Force boolean
function ITriggerObject:SendRandomizedTriggerEventArray(Instigators, Event, Count, Force) end
---@param Instigator AActor
---@param Event FDataTableRowHandle
---@param Count int32
---@param Force boolean
function ITriggerObject:SendRandomizedTriggerEvent(Instigator, Event, Count, Force) end
---@param PlayerCharacter ASurvivalPlayerCharacter
---@param PlacingConnection boolean
function ITriggerObject:HandleConnectionPlacementStateChanged(PlayerCharacter, PlacingConnection) end


---@class ITriggerOpenable : IInterface
ITriggerOpenable = {}

---@param Instigators TArray<AActor>
---@param bOpened boolean
function ITriggerOpenable:SetOpenedState(Instigators, bOpened) end
---@return boolean
function ITriggerOpenable:IsTriggerOpenable() end
---@return boolean
function ITriggerOpenable:GetOpenedState() end


---@class ITriggerShowable : IInterface
ITriggerShowable = {}

---@param bEnabled boolean
function ITriggerShowable:SetTriggerShow(bEnabled) end
---@return boolean
function ITriggerShowable:IsTriggerShowable() end
---@return boolean
function ITriggerShowable:GetTriggerShown() end


---@class ITriggerableCounter : IInterface
ITriggerableCounter = {}

---@param Override boolean
---@param OverrideValue int32
function ITriggerableCounter:ResetTo(Override, OverrideValue) end
---@param Override boolean
---@param OverrideValue int32
function ITriggerableCounter:IncrementBy(Override, OverrideValue) end
---@param Override boolean
---@param OverrideValue int32
function ITriggerableCounter:DecrementBy(Override, OverrideValue) end


---@class ITriggerableEncounter : IInterface
ITriggerableEncounter = {}

---@param Instigators TArray<AActor>
---@param bActive boolean
function ITriggerableEncounter:SetEncounterActive(Instigators, bActive) end
---@return boolean
function ITriggerableEncounter:GetEncounterActive() end
---@return boolean
function ITriggerableEncounter:CanTriggerEncounter() end


---@class ITriggerableInventory : IInterface
ITriggerableInventory = {}

---@return boolean
function ITriggerableInventory:IsTriggerableItemGiver() end
---@return boolean
function ITriggerableInventory:IsTriggerableEquipmentGiver() end
---@return boolean
function ITriggerableInventory:GrantsItemsToOutputs() end
---@return TArray<UItem>
function ITriggerableInventory:GetItemsToGrant() end


---@class ITriggerableTimer : IInterface
ITriggerableTimer = {}

---@param bEnabled boolean
function ITriggerableTimer:SetTimerEnabled(bEnabled) end
---@return boolean
function ITriggerableTimer:IsTriggerableTimer() end
---@return boolean
function ITriggerableTimer:GetTimerEnabled() end


---@class ITriggerableTrap : IInterface
ITriggerableTrap = {}

function ITriggerableTrap:Fire() end
---@return boolean
function ITriggerableTrap:CanFire() end


---@class ITriggerableTrigger : IInterface
ITriggerableTrigger = {}

---@param Instigators TArray<AActor>
function ITriggerableTrigger:ForwardTriggerEvent(Instigators) end
---@return boolean
function ITriggerableTrigger:CanForwardTriggerEvent() end


---@class ITriggerableTurret : IInterface
ITriggerableTurret = {}

---@param bActive boolean
function ITriggerableTurret:SetAutoFireActive(bActive) end
---@return boolean
function ITriggerableTurret:GetAutoFireActive() end
function ITriggerableTurret:FireProjectile() end
---@return boolean
function ITriggerableTurret:CanFireProjectile() end
---@return boolean
function ITriggerableTurret:CanAutoFire() end


---@class IViewControl : IInterface
IViewControl = {}

---@param DeltaTime float
function IViewControl:UpdateCamera(DeltaTime) end
---@param ViewProvider UObject
---@param BlendTime float
---@param BlendFunc EViewTargetBlendFunction
---@param BlendExp float
---@param bLockOutgoing boolean
---@param bUsePawnLook boolean
function IViewControl:SetCameraView(ViewProvider, BlendTime, BlendFunc, BlendExp, bLockOutgoing, bUsePawnLook) end
---@param InCamera UCameraComponent
function IViewControl:SetCamera(InCamera) end
---@return boolean
function IViewControl:IsViewControlledBySelf() end
---@return boolean
function IViewControl:IsBlendInProgress() end
---@return UObject
function IViewControl:GetViewProvider() end
---@return float
function IViewControl:GetBlendRatio() end


---@class IZoopable : IInterface
IZoopable = {}

---@param AxisA FVector
---@param AxisB FVector
function IZoopable:GetZoopBasis(AxisA, AxisB) end


---@class UAIDataProvider_ClimbingTag : UAIDataProvider
---@field Value FGameplayTag
UAIDataProvider_ClimbingTag = {}



---@class UAIDataProvider_FleeRange : UAIDataProvider
---@field Value float
UAIDataProvider_FleeRange = {}



---@class UAIDataProvider_MaxJumpDistance : UAIDataProvider
---@field Value float
UAIDataProvider_MaxJumpDistance = {}



---@class UAIDataProvider_WanderRange : UAIDataProvider
---@field Value float
UAIDataProvider_WanderRange = {}



---@class UAIDetectionComponent : UActorComponent
---@field IntensityThreshold float
---@field InvestigateTime float
UAIDetectionComponent = {}

---@param Actor AActor
---@param Stimulus FAIStimulus
function UAIDetectionComponent:OnPerceptionUpdate(Actor, Stimulus) end


---@class UAIEQSParameter : UObject
UAIEQSParameter = {}


---@class UAISenseConfig_Shout : UAISenseConfig
---@field Implementation TSubclassOf<UAISense_Shout>
---@field ShoutHearingRadius float
UAISenseConfig_Shout = {}



---@class UAISenseConfig_Sound : UAISenseConfig
---@field Implementation TSubclassOf<UAISense_Sound>
---@field HearingRadius float
UAISenseConfig_Sound = {}



---@class UAISense_Shout : UAISense
---@field ShoutEvents TArray<FAIShoutEvent>
---@field SpeedOfSoundSq float
UAISense_Shout = {}

---@param WorldContextObject UObject
---@param Shouter AActor
---@param Target AActor
---@param Tag FName
function UAISense_Shout:ReportShoutEvent(WorldContextObject, Shouter, Target, Tag) end


---@class UAISense_Sound : UAISense
---@field SoundEvents TArray<FAISoundEvent>
UAISense_Sound = {}

---@param WorldContextObject UObject
---@param Instigator AActor
---@param Location FVector
---@param Intensity float
---@param Range float
---@param Tag FName
function UAISense_Sound:ReportSoundEvent(WorldContextObject, Instigator, Location, Intensity, Range, Tag) end


---@class UAITargettingComponent : UActorComponent
---@field SuspiciousThreshold float
---@field DangerThreshold float
---@field TargetExpirationTime float
---@field ThreatDecayTime float
---@field DamageThreatModifier float
---@field HearingThreatModifier float
---@field TargetDistanceModifier float
---@field BuildingTargetType EBuildingTargettingType
---@field TargetPriorityType ETargetPriorityType
---@field bTargetsCanExpire boolean
---@field UseRandomTarget boolean
---@field RandomTargetModeSelectInterval float
---@field ProbabilitySelectedRandomModeTarget float
---@field CachedRandomTargetKey TWeakObjectPtr<AActor>
UAITargettingComponent = {}

function UAITargettingComponent:ValidateTargets() end
---@param Actor AActor
---@param Stimulus FAIStimulus
function UAITargettingComponent:OnPerceptionUpdate(Actor, Stimulus) end
---@return AActor
function UAITargettingComponent:GetTargetActor() end
function UAITargettingComponent:CacheRandomOverrideTarget() end
function UAITargettingComponent:CacheCurrentTarget() end


---@class UAITokenManager : UObject
UAITokenManager = {}


---@class UAI_MinimumHeight : UAIEQSParameter
UAI_MinimumHeight = {}


---@class UAI_MovementSpeed : UAIEQSParameter
UAI_MovementSpeed = {}


---@class UAI_WanderRange : UAIEQSParameter
UAI_WanderRange = {}


---@class UAI_WaveSpawnRange : UAIEQSParameter
UAI_WaveSpawnRange = {}


---@class UAI_WaveSpawnSeparation : UAIEQSParameter
UAI_WaveSpawnSeparation = {}


---@class UAbility : UObject
---@field Attack UAttack
UAbility = {}

---@return float
function UAbility:GetCooldownTimeRemaining() end


---@class UAccountLinkWidget : UGameUserWidget
---@field PageSwitchers TArray<UWidgetSwitcher>
UAccountLinkWidget = {}

---@param Visible boolean
function UAccountLinkWidget:UpdatePageWidget(Visible) end
function UAccountLinkWidget:SetSuccessPage() end
function UAccountLinkWidget:SetFailurePage() end
---@param ErrorCode EAccountLinkErrorCode
function UAccountLinkWidget:SetFailureErrorString(ErrorCode) end
---@param URL FString
function UAccountLinkWidget:SetAccountSettingsURL(URL) end
---@param URL FString
function UAccountLinkWidget:SetAccountLinkURL(URL) end
---@param Code FString
function UAccountLinkWidget:SetAccountLinkCode(Code) end
---@param DisplayName FString
function UAccountLinkWidget:SetAccountDisplayName(DisplayName) end
---@param newPage EAccountLinkPage
function UAccountLinkWidget:OnSetPage(newPage) end
---@param Error EAccountLinkErrorCode
function UAccountLinkWidget:OnSetError(Error) end
---@return boolean
function UAccountLinkWidget:GetLinkAttempted() end
---@return EAccountLinkPage
function UAccountLinkWidget:GetCurrentPage() end
---@param page EAccountLinkPage
---@param Visible boolean
function UAccountLinkWidget:ChangePage(page, Visible) end
function UAccountLinkWidget:CancelLinkingProcess() end


---@class UAchievementsComponent : UActorComponent
---@field Achievements TArray<FAchievementStatus>
---@field bShowDebug boolean
UAchievementsComponent = {}

function UAchievementsComponent:ServerRequestAchievementReevaluation() end
---@param PlayerStat UPlayerStatConfig
---@param Value int32
function UAchievementsComponent:OnTotalPartyPlayerStatChanged(PlayerStat, Value) end
function UAchievementsComponent:OnRep_Achievements() end
---@param InPlayerUpgradeComponent UPlayerUpgradeComponent
function UAchievementsComponent:OnPlayerUpgradesChanged(InPlayerUpgradeComponent) end
---@param PlayerStat UPlayerStatConfig
---@param Value int32
function UAchievementsComponent:OnPlayerStatChanged(PlayerStat, Value) end
---@param PlayerState ASurvivalPlayerState
---@param SourceItem UItem
function UAchievementsComponent:OnItemDuplicated(PlayerState, SourceItem) end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param Instigator AActor
function UAchievementsComponent:OnGlobalVariableChanged(GlobalVariableID, VariableValue, Instigator) end
function UAchievementsComponent:OnGameWon() end
function UAchievementsComponent:OnGameModeChanged() end
---@param NewLevel int32
function UAchievementsComponent:OnCozinessLevelAchieved(NewLevel) end
---@param ItemRowHandle FDataTableRowHandle
---@param AcquirerPlayerState ASurvivalPlayerState
function UAchievementsComponent:OnBestiaryUnlocked(ItemRowHandle, AcquirerPlayerState) end
---@param AchievementUnlockTag FString
---@return boolean
function UAchievementsComponent:IsAchievementWithUnlockTagUnlocked(AchievementUnlockTag) end
---@param AchievementStatus FAchievementStatus
---@return boolean
function UAchievementsComponent:IsAchievementUnlocked(AchievementStatus) end
---@param AchievementUnlockTag FString
---@param Progress int32
function UAchievementsComponent:ClientUpdateAchievementProgressOnline(AchievementUnlockTag, Progress) end


---@class UActionWidget : UGameUserWidget
---@field KeyText UTextBlock
---@field ButtonImage UImage
---@field ActionName FName
---@field bAxisPositive boolean
---@field bShowMouseKeyboardControls boolean
---@field bShowGamepadControls boolean
UActionWidget = {}

---@return boolean
function UActionWidget:ShouldShowControl() end
---@param bValue boolean
function UActionWidget:SetShowMouseKeyboardControls(bValue) end
---@param bValue boolean
function UActionWidget:SetShowGamepadControls(bValue) end
---@param InActionName FName
---@param bInAxisPositive boolean
function UActionWidget:SetAction(InActionName, bInAxisPositive) end
function UActionWidget:Refresh() end
---@param bIsUsingGamepad boolean
function UActionWidget:NativeOnUsingGamepadChanged(bIsUsingGamepad) end
---@param Other UActionWidget
---@return boolean
function UActionWidget:IsDisplayingSameButton(Other) end
---@return boolean
function UActionWidget:IsControlBound() end
function UActionWidget:HandleCultureChanged() end
---@param Value FInputAxisKeyMapping
function UActionWidget:HandleAxisMappingChanged(Value) end
---@param Value FInputActionKeyMapping
function UActionWidget:HandleActionMappingChanged(Value) end
---@return FKey
function UActionWidget:GetFirstActionKey() end


---@class UActiveCutscene : UObject
UActiveCutscene = {}

function UActiveCutscene:OnLevelSequenceFinished() end
---@param CameraComponent UCameraComponent
function UActiveCutscene:OnInitialCameraCut(CameraComponent) end


---@class UActorHeaderData : UObject
UActorHeaderData = {}


---@class UActorLiteData : UDataAsset
---@field Classes TArray<TSoftClassPtr<AActor>>
---@field ActorNativeClass TSubclassOf<AActor>
---@field LODActorClass UClass
---@field InitialLifeSpan float
---@field RootComponentMobility EComponentMobility::Type
---@field bMeshComponentSimulatePhysics boolean
---@field Components TArray<UComponentLiteData>
---@field TriggerEvents TArray<FDataTableRowHandle>
---@field TriggerBehaviors TArray<FDataTableRowHandle>
---@field bCachedTriggerData boolean
UActorLiteData = {}

---@param DataClass TSubclassOf<UComponentLiteData>
---@return UComponentLiteData
function UActorLiteData:GetComponentData(DataClass) end


---@class UActorPlacementWindowWidget : UWindowWidget
---@field TriggerEventsBox UVerticalBox
---@field TriggerBehaviorsBox UVerticalBox
UActorPlacementWindowWidget = {}

---@param SelectedItem FDataTableRowHandle
function UActorPlacementWindowWidget:UpdateTriggerEventsAndBehaviors(SelectedItem) end
---@param FoliageData FDataTableRowHandle
function UActorPlacementWindowWidget:ShowAllFoliageOfType(FoliageData) end
---@param LiteDataOrObject UObject
---@param Events TArray<FDataTableRowHandle>
---@param Behaviors TArray<FDataTableRowHandle>
function UActorPlacementWindowWidget:OnEventsAndBehaviorsLoaded(LiteDataOrObject, Events, Behaviors) end
---@param FoliageData FDataTableRowHandle
---@return boolean
function UActorPlacementWindowWidget:IsFoliageItemHidden(FoliageData) end
---@param Data FDataTableRowHandle
---@return boolean
function UActorPlacementWindowWidget:IsFoliageItem(Data) end
---@param FoliageData FDataTableRowHandle
function UActorPlacementWindowWidget:HideAllFoliageOfType(FoliageData) end
---@param Object UObject
---@param Event FDataTableRowHandle
---@return FLocString
function UActorPlacementWindowWidget:GetEventTitleFor(Object, Event) end
---@param Object UObject
---@param Behavior FDataTableRowHandle
---@return FLocString
function UActorPlacementWindowWidget:GetBehaviorTitleFor(Object, Behavior) end


---@class UActorPoolComponent : UActorComponent
---@field BaseObject TSubclassOf<AActor>
---@field PooledInstances TArray<AActor>
UActorPoolComponent = {}

---@param Instance AActor
function UActorPoolComponent:ReleaseInstance(Instance) end
---@return AActor
function UActorPoolComponent:GetInstance() end


---@class UAggregateTickManager : UGameInstanceSubsystem
---@field GameWorld UWorld
UAggregateTickManager = {}



---@class UAmbienceManager : UObject
---@field OnUpdateZoneAmbienceDelegate FAmbienceManagerOnUpdateZoneAmbienceDelegate
---@field QuadAudioBedComponent UQuadAudioBedComponent
---@field ZoneBuckets TArray<UAmbienceZoneBucket>
---@field LocalZoneAudioDataRowHandle FDataTableRowHandle
---@field DefaultZoneTetherTime float
UAmbienceManager = {}

---@param PrevZoneDataTableRowHandle FDataTableRowHandle
---@param NewZoneDataTableRowHandle FDataTableRowHandle
---@param bIsSubmerged boolean
function UAmbienceManager:OnUpdateZone(PrevZoneDataTableRowHandle, NewZoneDataTableRowHandle, bIsSubmerged) end
---@param NewHour int32
---@param NewDay int32
function UAmbienceManager:OnHourChanged(NewHour, NewDay) end
---@param bIsDayTime boolean
function UAmbienceManager:OnDayNightChange(bIsDayTime) end
function UAmbienceManager:HandleEnterNewZoneDeferred() end
---@param ZoneAudioRowHandle FDataTableRowHandle
function UAmbienceManager:HandleEnterNewZone(ZoneAudioRowHandle) end
---@return FDataTableRowHandle
function UAmbienceManager:GetLocalZoneAudioDataRowHandle() end
function UAmbienceManager:DestroyAllZoneBuckets() end
---@param OneShotDataTable UDataTable
function UAmbienceManager:CreateNewZoneBuckets(OneShotDataTable) end


---@class UAmbienceZoneBucket : UObject
---@field ZoneOneShotEntryName FName
---@field ZoneOneShotEntry FZoneOneShotEntry
---@field CurrentTimerHandle FTimerHandle
UAmbienceZoneBucket = {}

function UAmbienceZoneBucket:TryPlayOSAndStartTimer() end
---@param StartHourOfDay int32
---@param EndHourOfDay int32
---@param Probability float
---@return boolean
function UAmbienceZoneBucket:TryPlayingOneShot(StartHourOfDay, EndHourOfDay, Probability) end
function UAmbienceZoneBucket:StartTimer() end
---@param HourToCheck int32
---@return boolean
function UAmbienceZoneBucket:IsHourWithingRange(HourToCheck) end
---@param InZoneOneShotEntryName FName
---@param InZoneOneShotEntry FZoneOneShotEntry
function UAmbienceZoneBucket:Init(InZoneOneShotEntryName, InZoneOneShotEntry) end
function UAmbienceZoneBucket:Cleanup() end


---@class UAnimEffect : UBaseAnimEffect
---@field Anim TSoftObjectPtr<UAnimMontage>
UAnimEffect = {}



---@class UAnimNotifyState_AttackJumpRootMo : UAnimNotifyState_RootMotionScaler
UAnimNotifyState_AttackJumpRootMo = {}


---@class UAnimNotifyState_AttackRootMotion : UAnimNotifyState_RootMotionScaler
UAnimNotifyState_AttackRootMotion = {}


---@class UAnimNotifyState_CustomVisuals : UAnimNotifyState
---@field VisualStateName FGameplayTag
UAnimNotifyState_CustomVisuals = {}



---@class UAnimNotifyState_DisableAttachParentBound : UAnimNotifyState
UAnimNotifyState_DisableAttachParentBound = {}


---@class UAnimNotifyState_DisableBlockers : UAnimNotifyState
UAnimNotifyState_DisableBlockers = {}


---@class UAnimNotifyState_DisableGravity : UAnimNotifyState
UAnimNotifyState_DisableGravity = {}


---@class UAnimNotifyState_DisableTarget : UAnimNotifyState
UAnimNotifyState_DisableTarget = {}


---@class UAnimNotifyState_FaceLastPetter : UAnimNotifyState
UAnimNotifyState_FaceLastPetter = {}


---@class UAnimNotifyState_ForceCameraMode : UAnimNotifyState
---@field ForcedMode ECameraDisplayMode
---@field BlendTime float
UAnimNotifyState_ForceCameraMode = {}



---@class UAnimNotifyState_HideSlot : UAnimNotifyState
---@field ItemSlot EEquipmentSlot
---@field StanceOverride int32
UAnimNotifyState_HideSlot = {}



---@class UAnimNotifyState_HitActive : UAnimNotifyState
---@field AttackTag FName
---@field bOnehitFromAllCollision boolean
UAnimNotifyState_HitActive = {}



---@class UAnimNotifyState_IgnoreFlinch : UAnimNotifyState
UAnimNotifyState_IgnoreFlinch = {}


---@class UAnimNotifyState_IgnoreStagger : UAnimNotifyState
UAnimNotifyState_IgnoreStagger = {}


---@class UAnimNotifyState_JumpRootMotion : UAnimNotifyState_RootMotionScaler
UAnimNotifyState_JumpRootMotion = {}


---@class UAnimNotifyState_LerpToGround : UAnimNotifyState
UAnimNotifyState_LerpToGround = {}


---@class UAnimNotifyState_LerpToInteract : UAnimNotifyState
UAnimNotifyState_LerpToInteract = {}


---@class UAnimNotifyState_LockSplineRotation : UAnimNotifyState
UAnimNotifyState_LockSplineRotation = {}


---@class UAnimNotifyState_MultiHitFrame : UAnimNotifyState
---@field HitFrameType EHitFrameType
---@field ActualAttack UAttack
---@field UseSecondaryDamageData boolean
---@field SecondaryDamageDataIndex int32
UAnimNotifyState_MultiHitFrame = {}



---@class UAnimNotifyState_ReduceFallDamage : UAnimNotifyState
UAnimNotifyState_ReduceFallDamage = {}


---@class UAnimNotifyState_RootMotionScaler : UAnimNotifyState
---@field MaxScale float
UAnimNotifyState_RootMotionScaler = {}



---@class UAnimNotifyState_SetFlying : UAnimNotifyState
UAnimNotifyState_SetFlying = {}


---@class UAnimNotifyState_ShowProp : UAnimNotifyState
UAnimNotifyState_ShowProp = {}


---@class UAnimNotifyState_WeaponTrail : UAnimNotifyState
UAnimNotifyState_WeaponTrail = {}


---@class UAnimNotifyState_WiggleLerp : UAnimNotifyState
---@field bLerpOut boolean
UAnimNotifyState_WiggleLerp = {}



---@class UAnimNotify_DropItem : UAnimNotify
---@field DropSlot EEquipmentSlot
UAnimNotify_DropItem = {}



---@class UAnimNotify_Footstep : UAnimNotify
---@field OverrideFootstepType EFootstepType
UAnimNotify_Footstep = {}



---@class UAnimNotify_HitFrame : UAnimNotify
---@field UseSecondaryDamageData boolean
---@field SecondaryDamageDataIndex int32
UAnimNotify_HitFrame = {}



---@class UAnimNotify_InteractFrame : UAnimNotify
UAnimNotify_InteractFrame = {}


---@class UAnimNotify_InteractShakeDown : UAnimNotify
---@field WiggleAmplitude UCurveFloat
UAnimNotify_InteractShakeDown = {}



---@class UAnimNotify_LadderHandPlant : UAnimNotify
---@field bIsRightHand boolean
UAnimNotify_LadderHandPlant = {}



---@class UAnimNotify_LightFire : UAnimNotify
UAnimNotify_LightFire = {}


---@class UAnimNotify_PlayBiteEffect : UAnimNotify
UAnimNotify_PlayBiteEffect = {}


---@class UAnimNotify_PlayCharacterSound : UAnimNotify
---@field SoundType ECharacterAudioType
---@field SoundTag FGameplayTag
---@field VolumeMultiplier float
---@field PitchMultiplier float
---@field bFollow boolean
---@field AttachName FName
---@field UnderwaterParam FName
---@field AudioData TSoftObjectPtr<UCharacterAudioData>
UAnimNotify_PlayCharacterSound = {}



---@class UAnimNotify_SetMovementMode : UAnimNotify
---@field Mode EMovementMode
UAnimNotify_SetMovementMode = {}



---@class UAnimNotify_ThrowItem : UAnimNotify
UAnimNotify_ThrowItem = {}


---@class UAnimationInteractComponent : UActorComponent
---@field OnInteractAnimation FAnimationInteractComponentOnInteractAnimation
---@field InteractAnimData TMap<EInteractAnimType, FInteractAnimData>
UAnimationInteractComponent = {}



---@class UAppearanceData : UBaseAppearanceData
---@field DefaultMesh TSoftObjectPtr<USkeletalMesh>
---@field FemaleMesh TSoftObjectPtr<USkeletalMesh>
UAppearanceData = {}



---@class UArmorItemLiteData : USpawnedItemLiteData
---@field HeadAppearance UBaseAppearanceData
---@field ChestAppearance UBaseAppearanceData
---@field ArmsAppearance UBaseAppearanceData
---@field LegsAppearance UBaseAppearanceData
UArmorItemLiteData = {}



---@class UAsyncTraceShareComponent : UActorComponent
UAsyncTraceShareComponent = {}


---@class UAttachmentNotifyComponent : USceneComponent
UAttachmentNotifyComponent = {}


---@class UAttack : UObject
---@field OnAttackCancelled FAttackOnAttackCancelled
---@field Owner AActor
---@field AttackHandlerComponent UAttackHandlerComponent
---@field StaminaComponent UStaminaComponent
---@field StatusEffectComponent UStatusEffectComponent
---@field AbilityOwner UAbility
---@field ItemOwner UItem
UAttack = {}

---@param SpawnTransform FTransform
function UAttack:SpawnProjectile(SpawnTransform) end
---@return boolean
function UAttack:ShouldLockRotation() end
---@return boolean
function UAttack:ShouldEndOnHit() end
---@return boolean
function UAttack:ShouldChargeHitOnlyOnCharacter() end
---@param HitResult FHitResult
function UAttack:ResolveAttackForHitResult(HitResult) end
---@param UseSecondaryDamageData boolean
---@param SecondaryDamageDataIndex int32
---@param TrySwapInstances boolean
---@return EAttackResolutionType
function UAttack:ResolveAttack(UseSecondaryDamageData, SecondaryDamageDataIndex, TrySwapInstances) end
---@return boolean
function UAttack:RequiresFacing() end
---@return boolean
function UAttack:IsSummonAttack() end
---@return boolean
function UAttack:IsSelfDestruct() end
---@return boolean
function UAttack:IsSelfAttack() end
---@return boolean
function UAttack:IsRangedAttack() end
---@return boolean
function UAttack:IsProjectileAttack() end
---@return boolean
function UAttack:IsLoopingAttack() end
---@return boolean
function UAttack:IsHostile() end
---@return boolean
function UAttack:IsHazardAttack() end
---@return boolean
function UAttack:IsCharged() end
---@return boolean
function UAttack:IsAOE() end
---@return boolean
function UAttack:HasToSummonBossMobPhase() end
---@return TSoftObjectPtr<UAnimMontage>
function UAttack:GetWeaponAnimMontage() end
---@return int32
function UAttack:GetTier() end
---@return int32
function UAttack:GetStaminaCost() end
---@return float
function UAttack:GetSoundRange() end
---@return float
function UAttack:GetSoundIntensity() end
---@return float
function UAttack:GetPreferredMaxDistance() end
---@return float
function UAttack:GetPreferredHeight() end
---@return float
function UAttack:GetPreferredDistancePostLunge() end
---@return AActor
function UAttack:GetOwner() end
---@return TSoftObjectPtr<UAnimMontage>
function UAttack:GetOverrideDeflectAnim() end
---@return float
function UAttack:GetMinDistance() end
---@return float
function UAttack:GetMaxDuration() end
---@return float
function UAttack:GetMaxDistance() end
---@return UItem
function UAttack:GetItemOwner() end
---@return AController
function UAttack:GetInstigatorController() end
---@return AActor
function UAttack:GetInstigator() end
---@return EAttackHitType
function UAttack:GetHitResolutionType() end
---@return FDataTableRowHandle
function UAttack:GetDeathNotification() end
---@return uint8
function UAttack:GetDamageTypeFlags() end
---@return TSubclassOf<USurvivalDamageType>
function UAttack:GetDamageType() end
---@return float
function UAttack:GetChargeTimer() end
---@return float
function UAttack:GetChargeRatio() end
---@return float
function UAttack:GetChargedAttackRange() end
---@return float
function UAttack:GetAttackRange() end
---@return FDataTableRowHandle
function UAttack:GetAttackDataRowHandle() end
---@return UAnimMontage
function UAttack:GetAnimMontage() end
---@return boolean
function UAttack:FireAttackOnFullCharge() end
---@return boolean
function UAttack:DoesHitFrameLoop() end
---@return boolean
function UAttack:ConsumesStaminaOnHitFrame() end
---@return boolean
function UAttack:CanCharge() end
function UAttack:CancelAttack() end


---@class UAttackAnimEffect : UAnimEffect
---@field AttackMotionType EHitMotionType
---@field bHasHitStops boolean
---@field bHasReload boolean
---@field AttackSpeedTag FGameplayTag
---@field AnimPropClass TSoftClassPtr<AActor>
---@field PropAttachSocket FName
UAttackAnimEffect = {}

---@return FGameplayTag
function UAttackAnimEffect:GetAttackSpeedTag() end


---@class UAttackCapsuleComponent : UCapsuleComponent
---@field AttackType EAttackCapsuleType
---@field ForceValue float
---@field PullAcceptableDistance float
---@field AttackAttachSocket FName
---@field AttacksCapsuleComponents TArray<UAttackCapsuleComponent>
UAttackCapsuleComponent = {}

---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
function UAttackCapsuleComponent:OnEndOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex) end
---@param DamageInfo FDamageInfo
function UAttackCapsuleComponent:OnDeath(DamageInfo) end
---@param OverlappedComponent UPrimitiveComponent
---@param OtherActor AActor
---@param OtherComp UPrimitiveComponent
---@param OtherBodyIndex int32
---@param bFromSweep boolean
---@param SweepResult FHitResult
function UAttackCapsuleComponent:OnBeginOverlap(OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult) end


---@class UAttackCombo : UObject
---@field Attacks TArray<UAttack>
UAttackCombo = {}



---@class UAttackHandlerComponent : UActorComponent
---@field OnHandleAttackEffects FAttackHandlerComponentOnHandleAttackEffects
---@field bPreloadAttacks boolean
UAttackHandlerComponent = {}

---@param AttackDataRowHandle FDataTableRowHandle_NetCrc
---@param HitResult FHitResult
function UAttackHandlerComponent:MulticastHandleEnvironmentHit(AttackDataRowHandle, HitResult) end
---@param EffectsData FBatchedAttackEffectsEnvHit
function UAttackHandlerComponent:MulticastHandleBatchedAttackEffectsEnvHit(EffectsData) end
---@param EffectsData FBatchedAttackEffects
function UAttackHandlerComponent:MulticastHandleBatchedAttackEffects(EffectsData) end
---@param AttackDataRowHandle FDataTableRowHandle_NetCrc
---@param Location FVector
function UAttackHandlerComponent:MulticastHandleAttackStartEffects(AttackDataRowHandle, Location) end
---@param AttackDataRowHandle FDataTableRowHandle_NetCrc
---@param Location FVector
function UAttackHandlerComponent:MulticastHandleAttackLaunchEffects(AttackDataRowHandle, Location) end
---@param AttackDataRowHandle FDataTableRowHandle_NetCrc
function UAttackHandlerComponent:MulticastHandleAttackEndChargeEffects(AttackDataRowHandle) end
---@param AttackDataRowHandle FDataTableRowHandle_NetCrc
---@param Location FVector
---@param bCharged boolean
function UAttackHandlerComponent:MulticastHandleAttackEffects(AttackDataRowHandle, Location, bCharged) end


---@class UAttack_MaxAttackDistance : UAIEQSParameter
UAttack_MaxAttackDistance = {}


---@class UAttack_MinAttackDistance : UAIEQSParameter
UAttack_MinAttackDistance = {}


---@class UAttack_PreferredMaxAttackDistance : UAIEQSParameter
UAttack_PreferredMaxAttackDistance = {}


---@class UAttack_PreferredMaxAttackDistanceWithTargetRadius : UAttack_PreferredMaxAttackDistance
UAttack_PreferredMaxAttackDistanceWithTargetRadius = {}


---@class UAttractionComponent : USceneComponent
---@field AdvertisedActions TArray<UGoapAction>
---@field AreaRadius float
---@field SlotCount int32
---@field RestrictedToColony FGameplayTag
---@field RestrictedToClass TSoftClassPtr<AActor>
---@field RestrictedToClassLiteData UActorLiteData
---@field bProjectToGround boolean
---@field bForceNoTrack boolean
---@field bForceRuntimeActionAlloc boolean
---@field GeneratedLocationType EGeneratedLocationType
UAttractionComponent = {}

---@return FColonyIdentifier
function UAttractionComponent:GetRestrictedToColonyId() end
---@return UClass
function UAttractionComponent:GetLODComponentClass() end
---@return TArray<UGoapAction>
function UAttractionComponent:GetAdvertisedActions() end
---@param ColonyIdentifier FColonyIdentifier
---@return boolean
function UAttractionComponent:CanColonyUse(ColonyIdentifier) end
---@param Character UCharacterLODActor
---@return boolean
function UAttractionComponent:CanCharacterUse(Character) end


---@class UAttractionComponentLiteData : UComponentLiteData
---@field AdvertisedActions TArray<UGoapAction>
---@field bForceRuntimeActionAlloc boolean
---@field bProjectToGround boolean
---@field bForceNoTrack boolean
---@field GeneratedLocationType EGeneratedLocationType
---@field SlotCount int32
---@field RestrictedToColonyTag FGameplayTag
---@field RestrictedToClassLiteData UActorLiteData
UAttractionComponentLiteData = {}



---@class UAttractionLODComponent : USceneLODComponent
---@field ProxyAttractionComponent UProxyAttractionComponent
---@field FullAttractionComponent UAttractionComponent
UAttractionLODComponent = {}

---@return int32
function UAttractionLODComponent:GetSlotCount() end
---@return boolean
function UAttractionLODComponent:GetProjectToGround() end
---@return EGeneratedLocationType
function UAttractionLODComponent:GetGeneratedLocationType() end
---@return TArray<UGoapAction>
function UAttractionLODComponent:GetAdvertisedActions() end
---@param ColonyIdentifier FColonyIdentifier
---@return boolean
function UAttractionLODComponent:CanColonyUse(ColonyIdentifier) end
---@param Character UCharacterLODActor
---@return boolean
function UAttractionLODComponent:CanCharacterUse(Character) end


---@class UAttractionManagerComponent : UActorComponent
UAttractionManagerComponent = {}


---@class UAuraEmitterComponent : UActorComponent
---@field Radius float
---@field AuraTag FGameplayTag
UAuraEmitterComponent = {}

---@param InRadius float
function UAuraEmitterComponent:SetRadius(InRadius) end


---@class UAuraManagerComponent : UActorComponent
---@field SortedEmitters TMap<FGameplayTag, FEmitterList>
---@field Receivers TArray<FAuraReceiverInfo>
UAuraManagerComponent = {}



---@class UAuraReceiverComponent : UActorComponent
---@field bCannotDecreaseInCombat boolean
---@field bCanEverDecrease boolean
---@field AuraTag FGameplayTag
---@field ReplicatedEmitterCount uint16
UAuraReceiverComponent = {}

---@param Character ASurvivalCharacter
---@param bInCombat boolean
function UAuraReceiverComponent:OnCombatChanged(Character, bInCombat) end


---@class UBTDecorator_AttackHasClearance : UBTDecorator_BlackboardBase
---@field AttackKey FBlackboardKeySelector
UBTDecorator_AttackHasClearance = {}



---@class UBTDecorator_AttackIsJump : UBTDecorator
---@field AttackKey FBlackboardKeySelector
UBTDecorator_AttackIsJump = {}



---@class UBTDecorator_AttackRequiresFacing : UBTDecorator
---@field AttackKey FBlackboardKeySelector
UBTDecorator_AttackRequiresFacing = {}



---@class UBTDecorator_BlackboardLocation : UBTDecorator_BlackboardBase
UBTDecorator_BlackboardLocation = {}


---@class UBTDecorator_CanFly : UBTDecorator
UBTDecorator_CanFly = {}


---@class UBTDecorator_CanJump : UBTDecorator
UBTDecorator_CanJump = {}


---@class UBTDecorator_CanMoveOnGround : UBTDecorator
UBTDecorator_CanMoveOnGround = {}


---@class UBTDecorator_CanWallCrawl : UBTDecorator
UBTDecorator_CanWallCrawl = {}


---@class UBTDecorator_Distance : UBTDecorator_BlackboardLocation
---@field Operator EComparisonOperator
---@field Distance float
UBTDecorator_Distance = {}



---@class UBTDecorator_InAttackRange : UBTDecorator_BlackboardBase
---@field AcceptableRadius float
---@field AttackKey FBlackboardKeySelector
UBTDecorator_InAttackRange = {}



---@class UBTDecorator_IsActivePet : UBTDecorator
UBTDecorator_IsActivePet = {}


---@class UBTDecorator_IsBaited : UBTDecorator
UBTDecorator_IsBaited = {}


---@class UBTDecorator_IsClimbable : UBTDecorator_BlackboardBase
---@field Role FGameplayTag
UBTDecorator_IsClimbable = {}



---@class UBTDecorator_IsClimbingFoliage : UBTDecorator
UBTDecorator_IsClimbingFoliage = {}


---@class UBTDecorator_IsInJumpRange : UBTDecorator_BlackboardLocation
UBTDecorator_IsInJumpRange = {}


---@class UBTDecorator_IsJumpClear : UBTDecorator_BlackboardLocation
UBTDecorator_IsJumpClear = {}


---@class UBTDecorator_IsMovementMode : UBTDecorator
---@field MovementMode EMovementMode
---@field CustomMovementMode uint8
UBTDecorator_IsMovementMode = {}



---@class UBTDecorator_IsPetHappiness : UBTDecorator
---@field MinStep int32
---@field MaxStep int32
UBTDecorator_IsPetHappiness = {}



---@class UBTDecorator_IsSoundDetectState : UBTDecorator
---@field SoundDetectionState ESoundDetectionState
UBTDecorator_IsSoundDetectState = {}



---@class UBTDecorator_IsStaticObstacle : UBTDecorator_BlackboardBase
UBTDecorator_IsStaticObstacle = {}


---@class UBTDecorator_IsStationary : UBTDecorator
UBTDecorator_IsStationary = {}


---@class UBTDecorator_IsSwimmingCharacter : UBTDecorator
UBTDecorator_IsSwimmingCharacter = {}


---@class UBTDecorator_IsTameState : UBTDecorator
---@field State ETamedState
UBTDecorator_IsTameState = {}



---@class UBTDecorator_IsVitalValue : UBTDecorator
---@field Semantic FGameplayTag
---@field TargetValue float
UBTDecorator_IsVitalValue = {}



---@class UBTDecorator_Random : UBTDecorator
---@field Probability float
UBTDecorator_Random = {}



---@class UBTDecorator_ShouldCombatStrafe : UBTDecorator
UBTDecorator_ShouldCombatStrafe = {}


---@class UBTDecorator_ShouldFaceActor : UBTDecorator_BlackboardBase
UBTDecorator_ShouldFaceActor = {}


---@class UBTDecorator_ShouldPlayFidget : UBTDecorator
UBTDecorator_ShouldPlayFidget = {}


---@class UBTDecorator_ShouldTryAltMove : UBTDecorator_BlackboardBase
UBTDecorator_ShouldTryAltMove = {}


---@class UBTDecorator_StuckInLocalMinimum : UBTDecorator
UBTDecorator_StuckInLocalMinimum = {}


---@class UBTDecorator_UsesPathFollower : UBTDecorator
UBTDecorator_UsesPathFollower = {}


---@class UBTDecorator_UsesSwimSteeringBehavior : UBTDecorator
UBTDecorator_UsesSwimSteeringBehavior = {}


---@class UBTDecorator_WaitOnWander : UBTDecorator
UBTDecorator_WaitOnWander = {}


---@class UBTService_GameplayFocus : UBTService_DefaultFocus
UBTService_GameplayFocus = {}


---@class UBTService_LockRotation : UBTService
UBTService_LockRotation = {}


---@class UBTService_PerceptionMultiplier : UBTService
---@field PerceptionRangeMultiplier float
UBTService_PerceptionMultiplier = {}



---@class UBTService_PreventDisable : UBTService
UBTService_PreventDisable = {}


---@class UBTService_UpdateCombatState : UBTService
---@field CombatStateKey FBlackboardKeySelector
---@field TargetActorKey FBlackboardKeySelector
---@field DesiredAttackKey FBlackboardKeySelector
UBTService_UpdateCombatState = {}



---@class UBTTask_ActivePetWait : UBTTask_WaitButKeepUp
UBTTask_ActivePetWait = {}


---@class UBTTask_AdvanceWave : UBTTaskNode
UBTTask_AdvanceWave = {}


---@class UBTTask_Attack : UBTTaskNode
---@field AttackKey FBlackboardKeySelector
UBTTask_Attack = {}



---@class UBTTask_Burrow : UBTTaskNode
UBTTask_Burrow = {}


---@class UBTTask_ClearNewPetState : UBTTaskNode
UBTTask_ClearNewPetState = {}


---@class UBTTask_ClearTarget : UBTTask_SetTargetTo
UBTTask_ClearTarget = {}


---@class UBTTask_ClimbSpline : UBTTaskNode
---@field MovementSpeed EMovementSpeed
---@field Direction float
UBTTask_ClimbSpline = {}



---@class UBTTask_CombatMoveTo : UBTTask_MaineMoveTo
---@field ReevaluateTime float
---@field FacingAngleTolerance float
---@field TargetMoveDistanceFail float
UBTTask_CombatMoveTo = {}



---@class UBTTask_CreepyWatson : UBTTaskNode
---@field VisibleWarpDistance float
---@field HiddenWarpDistance float
UBTTask_CreepyWatson = {}



---@class UBTTask_Disabled : UBTTaskNode
UBTTask_Disabled = {}


---@class UBTTask_Emerge : UBTTaskNode
UBTTask_Emerge = {}


---@class UBTTask_FindTransitionLocation : UBTTaskNode
---@field SourceLocationKey FBlackboardKeySelector
---@field TargetLocationKey FBlackboardKeySelector
---@field HeightAboveGround float
UBTTask_FindTransitionLocation = {}



---@class UBTTask_FollowerWait : UBTTask_WaitButKeepUp
UBTTask_FollowerWait = {}


---@class UBTTask_GetFoliageKeyLocation : UBTTaskNode
---@field FoliageBlackboardKey FBlackboardKeySelector
---@field LocationBlackboardKey FBlackboardKeySelector
UBTTask_GetFoliageKeyLocation = {}



---@class UBTTask_Jump : UBTTaskNode
---@field TargetDestinationKey FBlackboardKeySelector
UBTTask_Jump = {}



---@class UBTTask_MaineMoveTo : UBTTask_MoveTo
---@field MovementSpeed EMovementSpeed
---@field MaxMoveDuration float
---@field RandomDeviation float
---@field SprintAfterDistance float
---@field MaxInefficiency float
---@field bAllowBreadcrumbs boolean
---@field bAbortOnInterestChanged boolean
---@field AdditionalRadiusBlackboardKey FBlackboardKeySelector
---@field OutFailReasonBlackboardKey FBlackboardKeySelector
UBTTask_MaineMoveTo = {}



---@class UBTTask_MaineRunEQSQuery : UBTTask_BlackboardBase
---@field EQSRequest UEQSRequest
UBTTask_MaineRunEQSQuery = {}



---@class UBTTask_MarkInterestUnreachable : UBTTaskNode
UBTTask_MarkInterestUnreachable = {}


---@class UBTTask_NoOp : UBTTaskNode
UBTTask_NoOp = {}


---@class UBTTask_NonPlayerAttractor : UBTTaskNode
UBTTask_NonPlayerAttractor = {}


---@class UBTTask_NotifyJumpFailed : UBTTaskNode
UBTTask_NotifyJumpFailed = {}


---@class UBTTask_PlayEmote : UBTTaskNode
---@field OverrideEmoteType FGameplayTag
UBTTask_PlayEmote = {}



---@class UBTTask_PlayFidget : UBTTask_PlayEmote
UBTTask_PlayFidget = {}


---@class UBTTask_Rest : UBTTask_Wait
---@field LerpLocationTime float
---@field LerpRotationTime float
UBTTask_Rest = {}



---@class UBTTask_RotateToAlignBBEntry : UBTTask_RotateToFaceBBEntry
UBTTask_RotateToAlignBBEntry = {}


---@class UBTTask_RunPreActionCombatAnim : UBTTaskNode
---@field AnimKey FBlackboardKeySelector
UBTTask_RunPreActionCombatAnim = {}



---@class UBTTask_SelectCombatAction : UBTTaskNode
---@field TargetActorKey FBlackboardKeySelector
---@field DesiredAttackKey FBlackboardKeySelector
---@field MoveToType FBlackboardKeySelector
---@field FaceTargetType FBlackboardKeySelector
---@field AnimKey FBlackboardKeySelector
UBTTask_SelectCombatAction = {}



---@class UBTTask_SetAttachmentPoint : UBTTaskNode
---@field TargetDestinationKey FBlackboardKeySelector
UBTTask_SetAttachmentPoint = {}



---@class UBTTask_SetBlackboardFloat : UBTTask_BlackboardBase
---@field Value float
UBTTask_SetBlackboardFloat = {}



---@class UBTTask_SetConversationTarget : UBTTask_SetTargetTo
UBTTask_SetConversationTarget = {}


---@class UBTTask_SetDestinationBase : UBTTaskNode
---@field MoveToType FBlackboardKeySelector
---@field TargetDestinationKey FBlackboardKeySelector
UBTTask_SetDestinationBase = {}



---@class UBTTask_SetDestinationOwnLocation : UBTTask_SetDestinationBase
UBTTask_SetDestinationOwnLocation = {}


---@class UBTTask_SetInvestigateLocation : UBTTask_SetDestinationBase
UBTTask_SetInvestigateLocation = {}


---@class UBTTask_SetRandomDestination : UBTTask_SetDestinationBase
---@field DestinationType ERandomDestinationType
UBTTask_SetRandomDestination = {}



---@class UBTTask_SetSoundDetectState : UBTTaskNode
---@field NewSoundDetectionState ESoundDetectionState
UBTTask_SetSoundDetectState = {}



---@class UBTTask_SetTargetActor : UBTTask_SetTargetTo
UBTTask_SetTargetActor = {}


---@class UBTTask_SetTargetInteractable : UBTTaskNode
---@field TargetActor FBlackboardKeySelector
---@field TargetComponent FBlackboardKeySelector
---@field TargetLocation FBlackboardKeySelector
---@field TargetRotation FBlackboardKeySelector
---@field MoveToType FBlackboardKeySelector
---@field FaceTargetType FBlackboardKeySelector
---@field MustLand FBlackboardKeySelector
UBTTask_SetTargetInteractable = {}



---@class UBTTask_SetTargetNPInteraction : UBTTask_SetTargetTo
UBTTask_SetTargetNPInteraction = {}


---@class UBTTask_SetTargetTo : UBTTask_BlackboardBase
---@field MoveToType FBlackboardKeySelector
---@field FaceTargetType FBlackboardKeySelector
UBTTask_SetTargetTo = {}



---@class UBTTask_SetTargetToPetMaster : UBTTask_SetTargetTo
UBTTask_SetTargetToPetMaster = {}


---@class UBTTask_SetWaveDestination : UBTTask_SetDestinationBase
UBTTask_SetWaveDestination = {}


---@class UBTTask_StartClimbing : UBTTask_BlackboardBase
---@field Role FGameplayTag
UBTTask_StartClimbing = {}



---@class UBTTask_SteeringTargeted : UBTTaskNode
UBTTask_SteeringTargeted = {}


---@class UBTTask_SteeringWander : UBTTaskNode
UBTTask_SteeringWander = {}


---@class UBTTask_StopClimbing : UBTTaskNode
---@field DetachReason EDetachSplineReason
UBTTask_StopClimbing = {}



---@class UBTTask_StopPhysMovement : UBTTaskNode
UBTTask_StopPhysMovement = {}


---@class UBTTask_TeleportTo : UBTTask_BlackboardBase
UBTTask_TeleportTo = {}


---@class UBTTask_ToggleFlying : UBTTaskNode
UBTTask_ToggleFlying = {}


---@class UBTTask_ToggleResting : UBTTaskNode
UBTTask_ToggleResting = {}


---@class UBTTask_UseInteractable : UBTTaskNode
---@field TargetInteractableKey FBlackboardKeySelector
UBTTask_UseInteractable = {}



---@class UBTTask_UseWaypoint : UBTTaskNode
UBTTask_UseWaypoint = {}


---@class UBTTask_WaitButKeepUp : UBTTask_Wait
---@field MasterDistanceTolerance float
UBTTask_WaitButKeepUp = {}



---@class UBTTask_WallCrawl : UBTTaskNode
---@field TargetDestinationKey FBlackboardKeySelector
UBTTask_WallCrawl = {}



---@class UBTTask_WanderToTarget : UBTTaskNode
UBTTask_WanderToTarget = {}


---@class UBanterStarterComponent : UActorComponent
---@field ChatterEvent FChatterEventReference
---@field BanterConversation FConversationReference
---@field BanterStartNode int32
---@field bSubscribeAutomatically boolean
---@field bPermitInNormalCombat boolean
---@field bPermitDuringWave boolean
UBanterStarterComponent = {}

---@param Instigator ASurvivalPlayerController
function UBanterStarterComponent:StartBanter(Instigator) end
---@param WorldContextObj UObject
function UBanterStarterComponent:ResetBanterData(WorldContextObj) end
---@param Sender UBaseLookTriggerComponent
---@param Params FLookTriggeredParams
function UBanterStarterComponent:OnLookTriggered(Sender, Params) end


---@class UBaseAnimEffect : UDataAsset
UBaseAnimEffect = {}


---@class UBaseAppearanceData : UDataAsset
UBaseAppearanceData = {}

---@param Params FAppearanceParams
---@return TSoftObjectPtr<USkeletalMesh>
function UBaseAppearanceData:GetMesh(Params) end
---@return TSoftObjectPtr<USkeletalMesh>
function UBaseAppearanceData:GetDefaultMesh() end
---@param Params FAppearanceParams
---@return FName
function UBaseAppearanceData:GetBoneAttachment(Params) end


---@class UBaseBurgleObjective : UBaseObjective
---@field ObjectiveIndex int32
---@field bActive boolean
UBaseBurgleObjective = {}

---@param InParentQuest UBurgleQuestInstance
---@param InObjectiveIndex int32
function UBaseBurgleObjective:Initialize(InParentQuest, InObjectiveIndex) end
---@return int32
function UBaseBurgleObjective:GetObjectiveIndex() end
---@return float
function UBaseBurgleObjective:GetFloatProgress() end
function UBaseBurgleObjective:ActivateObjective() end


---@class UBaseCreditsTextWidget : UUserWidget
---@field LineText UTextBlock
UBaseCreditsTextWidget = {}



---@class UBaseGoapRegionComponent : USceneComponent
---@field RegionTag FGameplayTag
UBaseGoapRegionComponent = {}



---@class UBaseLODActor : UObject
---@field LastFullActorSpawnTime float
---@field StandInActor AProxyStandInActor
---@field FullActor AActor
---@field ProxyActor UProxyActor
---@field LODComponents TArray<UBaseLODComponent>
---@field AttractionLODComponent UAttractionLODComponent
---@field TeamLODComponent UTeamLODComponent
---@field HaulingLODComponent UHaulingLODComponent
---@field LootLODComponent ULootLODComponent
---@field ColonyMemberLODComponent UColonyMemberLODComponent
UBaseLODActor = {}

---@param InLifespan float
function UBaseLODActor:SetLifeSpan(InLifespan) end
---@param CurrentMode EEditMode
---@param NewMode EEditMode
function UBaseLODActor:OnPreEditModeChanged(CurrentMode, NewMode) end
---@param Sender AActor
function UBaseLODActor:OnFullActorPostInitializeComponents(Sender) end
---@return AActor
function UBaseLODActor:K2_GetFullActor() end
---@param BaseType TSoftClassPtr<AActor>
---@return boolean
function UBaseLODActor:IsFullActorTypeSoft(BaseType) end
---@param BaseType UActorLiteData
---@return boolean
function UBaseLODActor:IsFullActorTypeLite(BaseType) end
---@param BaseType TSubclassOf<AActor>
---@return boolean
function UBaseLODActor:IsFullActorType(BaseType) end
function UBaseLODActor:HandleLifetimeExpired() end
---@param Actor AActor
function UBaseLODActor:HandleFullActorDestroyed(Actor) end
---@return float
function UBaseLODActor:GetLifeSpan() end
---@param InClass TSubclassOf<UBaseLODComponent>
---@return UBaseLODComponent
function UBaseLODActor:GetComponentByClass(InClass) end
---@return FTransform
function UBaseLODActor:GetActorTransform() end
---@return FQuat
function UBaseLODActor:GetActorRotation() end
---@return FVector
function UBaseLODActor:GetActorLocation() end
---@return FVector
function UBaseLODActor:GetActorForwardVector() end
---@return TSoftClassPtr<AActor>
function UBaseLODActor:GetActorClassSoft() end
---@return TSubclassOf<AActor>
function UBaseLODActor:GetActorClassHard() end
---@return AActor
function UBaseLODActor:ConvertToFullActorBlocking() end
---@param Tag FName
---@return boolean
function UBaseLODActor:ContainsActorTag(Tag) end
---@param AttachParent AActor
function UBaseLODActor:AttachToActor(AttachParent) end


---@class UBaseLODComponent : UObject
---@field OwnerActor UBaseLODActor
---@field FullComponent UActorComponent
---@field ProxyComponent UProxyComponent
UBaseLODComponent = {}



---@class UBaseLookTriggerComponent : USceneComponent
---@field OnLookTriggered FBaseLookTriggerComponentOnLookTriggered
---@field OnLookEnded FBaseLookTriggerComponentOnLookEnded
---@field GlobalVariableConditionals TArray<FGlobalVariableReferenceConditional>
---@field MaxRange float
---@field AngleRange float
---@field bBlockedByAttachParent boolean
---@field bDisableIfDead boolean
---@field OwnerHealthComponent UHealthComponent
UBaseLookTriggerComponent = {}

---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param Instigator AActor
function UBaseLookTriggerComponent:OnGlobalVariableChangedEvent(GlobalVariableID, VariableValue, Instigator) end
---@param NewHealthState EHealthState
function UBaseLookTriggerComponent:HandleHealthStateChanged(NewHealthState) end


---@class UBaseManagerComponent : UActorComponent
---@field OnWaveRegionRemovedFromBase FBaseManagerComponentOnWaveRegionRemovedFromBase
---@field MinDistForBase float
---@field Buildings TArray<ABuilding>
---@field InstancedBuildingIds TArray<FBuildingGridBuildingId>
---@field Bases TArray<FBase>
UBaseManagerComponent = {}

---@param Targets TArray<AActor>
---@param BaseIndex int32
---@param Distance float
---@return int32
function UBaseManagerComponent:NumTargetsWithinRangeOfTargetBase(Targets, BaseIndex, Distance) end
---@return int32
function UBaseManagerComponent:NumBases() end
---@param Location FVector
---@param TargetBaseIndex int32
---@param FullBase boolean
---@return boolean
function UBaseManagerComponent:IsWithinTargetBase(Location, TargetBaseIndex, FullBase) end
---@param Location FVector
---@param Distance float
---@param FullBase boolean
---@return boolean
function UBaseManagerComponent:IsWithinRangeOfBase(Location, Distance, FullBase) end
---@param Targets TArray<AActor>
---@param Distance float
---@param FullBase boolean
---@return boolean
function UBaseManagerComponent:IsAnyTargetWithinRangeOfBase(Targets, Distance, FullBase) end
---@return boolean
function UBaseManagerComponent:HasBase() end
---@return int32
function UBaseManagerComponent:GetTotalHeat() end
---@return FVector
function UBaseManagerComponent:GetRandomBaseLocation() end
---@param Targets TArray<AActor>
---@param Distance float
---@return int32
function UBaseManagerComponent:GetLargestBaseIndexWithinRangeOfTargetFull(Targets, Distance) end
---@param Targets TArray<AActor>
---@param Distance float
---@return int32
function UBaseManagerComponent:GetLargestBaseIndexWithinRangeOfTarget(Targets, Distance) end
---@param BaseIndex int32
---@return int32
function UBaseManagerComponent:GetHeat(BaseIndex) end
---@param Targets TArray<AActor>
---@return int32
function UBaseManagerComponent:GetClosestBaseIndexToTargets(Targets) end
---@param Location FVector
---@return int32
function UBaseManagerComponent:GetClosestBaseIndex(Location) end
---@param BaseIndex int32
---@return float
function UBaseManagerComponent:GetBaseRadius(BaseIndex) end
---@param BaseIndex int32
---@return FVector
function UBaseManagerComponent:GetBaseLocation(BaseIndex) end


---@class UBaseMapEntryWidget : UGameUserWidget
UBaseMapEntryWidget = {}

---@param IsVisible boolean
function UBaseMapEntryWidget:SetIsVisibleOnMap(IsVisible) end
function UBaseMapEntryWidget:RefreshVisuals() end
---@return boolean
function UBaseMapEntryWidget:IsVisibleOnMap() end
---@return boolean
function UBaseMapEntryWidget:HasWorldPosition() end
---@return FVector2D
function UBaseMapEntryWidget:GetWorldPosition2D() end
---@return EMapEntryType
function UBaseMapEntryWidget:GetMapEntryType() end
---@return FString
function UBaseMapEntryWidget:GetEntryName() end
---@return FSlateBrush
function UBaseMapEntryWidget:GetDescriptionWindowIcon() end
---@return EMapToggleVisibility
function UBaseMapEntryWidget:CanToggleVisibility() end


---@class UBaseNotificationWidget : UGameUserWidget
UBaseNotificationWidget = {}


---@class UBaseObjective : UObject
UBaseObjective = {}

---@return boolean
function UBaseObjective:IsCompleted() end
---@return boolean
function UBaseObjective:IsActive() end
---@return FString
function UBaseObjective:GetVerboseName() end
---@return FString
function UBaseObjective:GetDisplayName() end


---@class UBaseOptionsDropdownAsset : UDataAsset
---@field DefaultSelectedIndex int32
UBaseOptionsDropdownAsset = {}



---@class UBaseQuest : UObject
UBaseQuest = {}

---@return boolean
function UBaseQuest:IsCompleted() end
---@return TArray<UBaseObjective>
function UBaseQuest:GetObjectives() end
---@return FString
function UBaseQuest:GetDisplayName() end
---@return FString
function UBaseQuest:GetDisplayDescription() end


---@class UBaseSettingsWidget : UGameUserWidget
---@field TitleTextBlock ULocalizedTextBlock
---@field DisplayString FLocString
---@field SwitchDisplayOverride FLocString
---@field PlaystationDisplayOverride FLocString
---@field DescString FLocString
---@field ConsoleDescOverride FLocString
---@field SwitchDescOverride FLocString
---@field PlaystationDescOverride FLocString
---@field bShowKeybindingControls boolean
---@field bApplyImmediately boolean
---@field bCacheAndConfirm boolean
---@field PlatformSetting EPlatformToggleSetting
UBaseSettingsWidget = {}

---@param InDisplayString FLocString
---@param InDescString FLocString
function UBaseSettingsWidget:SetLocalizedInfo(InDisplayString, InDescString) end
---@param bState boolean
function UBaseSettingsWidget:SetCacheAndConfirm(bState) end
---@param bState boolean
function UBaseSettingsWidget:SetApplyImmediately(bState) end
function UBaseSettingsWidget:NotifyHovered() end
function UBaseSettingsWidget:NotifyFocused() end
---@return boolean
function UBaseSettingsWidget:IsCacheAndConfirmSetting() end
---@return boolean
function UBaseSettingsWidget:GetShowKeybindingControls() end
---@return FLocString
function UBaseSettingsWidget:GetDescString() end


---@class UBaseSlotDragManager : UObject
UBaseSlotDragManager = {}

---@param bIsDraggingWidget boolean
function UBaseSlotDragManager:SetIsDraggingWidget(bIsDraggingWidget) end
---@param bFocused boolean
---@param ItemSlot UBaseSlotWidget
function UBaseSlotDragManager:OnItemSlotFocusChanged(bFocused, ItemSlot) end
---@param Destination UBaseSlotWidget
function UBaseSlotDragManager:OnDragDrop(Destination) end
---@param SlotCancelledFrom UBaseSlotWidget
---@param bManualCancel boolean
function UBaseSlotDragManager:OnDragCancel(SlotCancelledFrom, bManualCancel) end
---@param Source UBaseSlotWidget
function UBaseSlotDragManager:OnDragBegin(Source) end
---@return boolean
function UBaseSlotDragManager:GetIsDraggingWidget() end


---@class UBaseSlotWidget : UGameUserWidget
---@field OnContextAction FBaseSlotWidgetOnContextAction
---@field HotBarQuickSlotItemTypeKey FHotBarQuickSlotItemTypeKey
---@field DataRowHandle FDataTableRowHandle
---@field bSelected boolean
---@field ItemButton UButton
---@field TooltipAnchor UMenuAnchor
UBaseSlotWidget = {}

---@param OtherItemSlot UBaseSlotWidget
function UBaseSlotWidget:VisuallyOverrideItemData(OtherItemSlot) end
function UBaseSlotWidget:RestoreVisualItemData() end
---@param Item UItem
function UBaseSlotWidget:OnItemRefChanged(Item) end
---@param bIsNewItem boolean
function UBaseSlotWidget:OnIsItemNew(bIsNewItem) end
---@param Source UBaseSlotWidget
---@return boolean
function UBaseSlotWidget:HandleDragDrop(Source) end
---@param bManualCancel boolean
function UBaseSlotWidget:HandleDragCancel(bManualCancel) end
---@param bFromMouseDrag boolean
function UBaseSlotWidget:HandleDragBegin(bFromMouseDrag) end
---@return boolean
function UBaseSlotWidget:GetIsSelected() end
function UBaseSlotWidget:EvaluateSlotOnChange() end
function UBaseSlotWidget:EvaluateItemIsNewVisuals() end


---@class UBaseUndoOperation : UObject
---@field ActorIDs TArray<FGuid>
UBaseUndoOperation = {}

function UBaseUndoOperation:FinalizeInitialization() end


---@class UBaseVitalStat : UDataAsset
---@field Sematics FGameplayTagContainer
---@field StartingRange FFloatRange
---@field ValueCurve UCurveFloat
---@field StartingRangeEnabled uint8
UBaseVitalStat = {}

---@param Damage float
---@param DamageInfo FDamageInfo
---@return float
function UBaseVitalStat:GetDamageResponse(Damage, DamageInfo) end
---@param Core UInterestCore
---@return float
function UBaseVitalStat:GenerateStartingValue(Core) end
---@param Core UInterestCore
---@param Vital float
---@param DeltaHours float
function UBaseVitalStat:AdjustVital(Core, Vital, DeltaHours) end


---@class UBestiaryComponent : UActorComponent
---@field BestiaryStats TArray<FBestiaryStat>
UBestiaryComponent = {}

---@param PlayerStat UPlayerStatConfig
---@param Value int32
function UBestiaryComponent:OnPlayerStatChanged(PlayerStat, Value) end
---@param BestiaryRowHandle FDataTableRowHandle
---@return boolean
function UBestiaryComponent:IsRareDataUnlocked(BestiaryRowHandle) end
---@param TargetCharacter ASurvivalCharacter
---@return FBestiaryUIData
function UBestiaryComponent:GetUIDataCharacter(TargetCharacter) end
---@param BestiaryRowHandle FDataTableRowHandle
---@return FBestiaryUIData
function UBestiaryComponent:GetUIData(BestiaryRowHandle) end
---@param Stat UPlayerStatConfig
---@return int32
function UBestiaryComponent:GetStatValue(Stat) end
---@param BestiaryRowHandle FDataTableRowHandle
---@return float
function UBestiaryComponent:GetBestiaryHealth(BestiaryRowHandle) end
---@param BestiaryRowHandle FDataTableRowHandle
---@return TArray<ESurvivalDamageTypeFlags>
function UBestiaryComponent:GetBestiaryDamageWeaknesses(BestiaryRowHandle) end
---@param BestiaryRowHandle FDataTableRowHandle
---@return TArray<ESurvivalDamageTypeFlags>
function UBestiaryComponent:GetBestiaryDamageResistances(BestiaryRowHandle) end


---@class UBindKeyPopUp : UWindowWidget
---@field KeyboardInstructionsText FLocString
---@field GamepadInstructionsText FLocString
---@field CancelActionName FName
---@field CurrentMapping FAnyControlMapping
---@field bIsGamepad boolean
---@field bPreferAnalogBinding boolean
---@field OnControlBound FBindKeyPopUpOnControlBound
UBindKeyPopUp = {}

---@param Chord FInputChord
function UBindKeyPopUp:SelectControl(Chord) end
---@param Control FAnyControlMapping
---@param bInIsGamepad boolean
function UBindKeyPopUp:InitControlMapping(Control, bInIsGamepad) end
---@return boolean
function UBindKeyPopUp:GetIsMapped() end
---@return FText
function UBindKeyPopUp:GetInstructionsText() end
---@return FAnyControlMappingKey
function UBindKeyPopUp:GetCurrentMappingKey() end
---@return FInputChord
function UBindKeyPopUp:GetCurrentInputChord() end
---@param NewValue FAnyControlMapping
function UBindKeyPopUp:ControlBound__DelegateSignature(NewValue) end


---@class UBindlessDelegateManager : UActorComponent
UBindlessDelegateManager = {}

function UBindlessDelegateManager:RegisterWorldInitializedDelegates() end
---@param AttackState EWaveAttackState
function UBindlessDelegateManager:OnWaveAttackStateChanged(AttackState) end
function UBindlessDelegateManager:OnTriggerGroupVisibilitySettingsChanged() end
---@param GroupIndex uint8
function UBindlessDelegateManager:OnTriggerGroupIndexChanged(GroupIndex) end
---@param OldMode EEditMode
---@param NewMode EEditMode
function UBindlessDelegateManager:OnPreEditModeChanged(OldMode, NewMode) end
function UBindlessDelegateManager:OnPlayerEquipmentChanged() end
function UBindlessDelegateManager:OnPhotoModeExited() end
---@param PhotoPawn APhotoPawn
function UBindlessDelegateManager:OnPhotoModeEntered(PhotoPawn) end
function UBindlessDelegateManager:OnGameModeChanged() end
---@param OldMode EEditMode
---@param NewMode EEditMode
function UBindlessDelegateManager:OnEditModeChanged(OldMode, NewMode) end
---@param bActive boolean
function UBindlessDelegateManager:OnDefensePointOrWaveActive(bActive) end
---@param bActive boolean
function UBindlessDelegateManager:OnDefensePointActiveChanged(bActive) end
---@param IsPlacingConnection boolean
function UBindlessDelegateManager:OnConnectionPlacementModeChanged(IsPlacingConnection) end
---@param Player APlayerController
---@param bIsInBuildMode boolean
function UBindlessDelegateManager:OnBuildModeChanged(Player, bIsInBuildMode) end
function UBindlessDelegateManager:OnBossDeactivated() end
function UBindlessDelegateManager:OnBossActivated() end
---@param PlayerCharacter ASurvivalPlayerCharacter
---@param PlacingConnection boolean
function UBindlessDelegateManager:HandleConnectionPlacementStateChanged(PlayerCharacter, PlacingConnection) end
---@param bIntegrityEnabled boolean
function UBindlessDelegateManager:HandleBuildingIntegritySettingChanged(bIntegrityEnabled) end


---@class UBirdAnimInstance : UAnimInstance
---@field bIsLanded boolean
---@field SpotType EBirdSpotType
UBirdAnimInstance = {}



---@class UBlackboardKeyType_FoliageKey : UBlackboardKeyType
UBlackboardKeyType_FoliageKey = {}


---@class UBlendTriggerTickManager : UActorComponent
---@field Data TArray<FBlendTriggerData>
---@field SharedSettings FBlendTriggerGroupSettings
---@field OverrideSettings TMap<FName, FBlendTriggerGroupSettings>
---@field TriggerGroupStack TArray<FName>
UBlendTriggerTickManager = {}

function UBlendTriggerTickManager:OnWorldBeginPlay() end


---@class UBlockComponent : UActorComponent
---@field bIsManualBlocking boolean
---@field bWantsToBlock boolean
---@field bAlwaysBlocking boolean
---@field DefaultBlockAnim UAnimMontage
---@field BlockAngle float
---@field DefaultBlockDamageMultiplier float
---@field PerfectBlockDamageMultiplier float
---@field PerfectBlockWindow float
---@field PerfectBlockStunRefundPercentage float
---@field PerfectBlockAttackData FDataTableRowHandle
---@field PerfectBlockAttack UAttack
---@field DefaultBlockSound USoundBase
---@field DefaultPerfectBlockSound USoundBase
---@field LowDurabilityBlockSound USoundBase
---@field LowDurabilityThreshold float
---@field BlockEffect UVisualEffect
---@field PerfectBlockEffect UVisualEffect
---@field OffhandBlockEffect UVisualEffect
---@field OffhandPerfectBlockEffect UVisualEffect
UBlockComponent = {}

function UBlockComponent:OnStatusEffectsChanged() end
function UBlockComponent:OnRep_IsBlocking() end
---@param BlockType EBlockType
function UBlockComponent:MulticastPlayBlockEffects(BlockType) end
---@param bIncludePassiveBlocking boolean
---@return boolean
function UBlockComponent:IsBlocking(bIncludePassiveBlocking) end
---@return float
function UBlockComponent:GetMaxBlockMeter() end
---@return float
function UBlockComponent:GetBlockMeter() end
---@return UItem
function UBlockComponent:GetBlockItem() end


---@class UBossComponent : UActorComponent
---@field OnPhaseChanged FBossComponentOnPhaseChanged
---@field OnTimedPhaseChanged FBossComponentOnTimedPhaseChanged
---@field OnScriptedPhaseChanged FBossComponentOnScriptedPhaseChanged
---@field OnAllMobsEncountersKilled FBossComponentOnAllMobsEncountersKilled
---@field Phases TArray<FBossPhase>
---@field TimedPhases TArray<FTimedBossPhase>
---@field bRandomizePhase boolean
---@field ScriptedPhases TArray<FScriptedBossPhase>
---@field CurrentPhaseIndex int32
---@field CurrentTimedPhaseIndex int32
---@field CurrentScriptedPhaseIndex int32
UBossComponent = {}

function UBossComponent:SpawnMobsEncountersPhase() end
---@param ScriptedPhaseIndex int32
function UBossComponent:SetScriptedPhase(ScriptedPhaseIndex) end
---@param NewBossManager ABossManager
function UBossComponent:SetBossManager(NewBossManager) end
---@param SourceHealthComponent UHealthComponent
---@param NewHealth float
---@param OldHealth float
function UBossComponent:OnHealthChanged(SourceHealthComponent, NewHealth, OldHealth) end
---@param Character ASurvivalCharacter
---@param bInCombat boolean
function UBossComponent:OnCombatChanged(Character, bInCombat) end
---@return int32
function UBossComponent:GetCurrentTimedPhaseIndex() end
---@return int32
function UBossComponent:GetCurrentScriptedPhaseIndex() end
---@return int32
function UBossComponent:GetCurrentPhaseIndex() end
function UBossComponent:AllMobsEncounterKilled() end
function UBossComponent:AdvanceToNextTimedPhase() end


---@class UBottomButtonWidget : UGameButtonWidget
UBottomButtonWidget = {}

---@param bEnabled boolean
function UBottomButtonWidget:SetIsValid(bEnabled) end
---@param bEnabled boolean
function UBottomButtonWidget:OnSetIsValid(bEnabled) end
---@return boolean
function UBottomButtonWidget:GetIsValid() end


---@class UBreadcrumbManagerComponent : UActorComponent
---@field BreadcrumbsFlat TArray<UGoapAction>
UBreadcrumbManagerComponent = {}

---@return float
function UBreadcrumbManagerComponent:GetCurrentTimestamp() end


---@class UBreathePointComponent : USceneComponent
UBreathePointComponent = {}


---@class UBuilderMovementComponent : UCharacterMovementComponent
UBuilderMovementComponent = {}


---@class UBuildingFunctionLibrary : UBlueprintFunctionLibrary
UBuildingFunctionLibrary = {}

---@param BuildingData FBaseBuildingData
---@param FilterText FString
---@return boolean
function UBuildingFunctionLibrary:GetBuildingDataFilterMatches(BuildingData, FilterText) end
---@param BuildingData FBaseBuildingData
---@return TSoftClassPtr<AActor>
function UBuildingFunctionLibrary:GetAnyActor(BuildingData) end
---@param From FBuildingGridLocation
---@param Target TSoftClassPtr<ABuilding>
---@param AllowedConnector FGameplayTag
---@param Axis EAxis::Type
---@param bDirectionPositive boolean
---@return ABuilding
function UBuildingFunctionLibrary:FindBuildingLinear(From, Target, AllowedConnector, Axis, bDirectionPositive) end
---@param A TSoftClassPtr<ABuilding>
---@param B TSoftClassPtr<ABuilding>
---@return TSoftClassPtr<ABuilding>
function UBuildingFunctionLibrary:CoalesceSoftBuildingClass(A, B) end


---@class UBuildingGridBuildingIdLibrary : UBlueprintFunctionLibrary
UBuildingGridBuildingIdLibrary = {}

---@param ID FBuildingGridBuildingId
---@return boolean
function UBuildingGridBuildingIdLibrary:IsBuildingIdValid(ID) end
---@return FBuildingGridBuildingId
function UBuildingGridBuildingIdLibrary:GetInvalidBuildingId() end
---@param BuildingGridBuildingId FBuildingGridBuildingId
---@return UBuildingGridComponent
function UBuildingGridBuildingIdLibrary:GetGridForBuildingGridBuildingId(BuildingGridBuildingId) end
---@param ID FBuildingGridBuildingId
---@return UBuildingGridComponent
function UBuildingGridBuildingIdLibrary:GetBuildingGridFromId(ID) end


---@class UBuildingGridComponent : USceneComponent
---@field OnBuildingPreRegister FBuildingGridComponentOnBuildingPreRegister
---@field OnBuildingRegistered FBuildingGridComponentOnBuildingRegistered
---@field OnBuildingBuilt FBuildingGridComponentOnBuildingBuilt
---@field OnBuildingPreUnregister FBuildingGridComponentOnBuildingPreUnregister
---@field OnBuildingUnregistered FBuildingGridComponentOnBuildingUnregistered
---@field BaseIndex int32
---@field bIsDynamicallyCreated boolean
---@field SurfaceType EBuildingGridSurfaceType
---@field InstancedGridBuildings FInstancedGridBuildingData
---@field InstancedFreeBuildings FInstancedFreeBuildingData
---@field ISMs TMap<UClass, FBuildingGridReplicationProxyList>
---@field ISMMetadata TMap<UInstancedStaticMeshComponent, FBuildingGridISMMetadata>
---@field DelayedDestroys TArray<FDelayedDestructionData>
---@field TimeSinceCreation float
---@field LiteGrid FLiteBuildingGrid
---@field LiteGridAsync FLiteBuildingGrid
UBuildingGridComponent = {}

---@param PlacementMode EBuildingPlacementMode
---@param WorldPosition FVector
---@param Offset FVector2D
---@return FIntVector
function UBuildingGridComponent:WorldToGrid(PlacementMode, WorldPosition, Offset) end
---@param PlacementMode EBuildingPlacementMode
---@param WorldPosition FVector
---@param Offset FVector2D
---@return FTransform
function UBuildingGridComponent:SnapToBuildGrid(PlacementMode, WorldPosition, Offset) end
---@param GridLocation FBuildingGridKey
---@param Building ABuilding
function UBuildingGridComponent:RegisterChangedCallback(GridLocation, Building) end
---@param Axis FBuildingGridAxis
---@param Building ABuilding
function UBuildingGridComponent:RegisterAxisChangedCallback(Axis, Building) end
function UBuildingGridComponent:OnRep_TimeSinceCreation() end
function UBuildingGridComponent:OnRep_SurfaceType() end
---@param CurrentMode EEditMode
---@param NewMode EEditMode
function UBuildingGridComponent:OnPreEditModeChange(CurrentMode, NewMode) end
---@param LocalLocation FVector
---@return FVector
function UBuildingGridComponent:LocalToWorld(LocalLocation) end
---@param PlacementMode EBuildingPlacementMode
---@param LocalPosition FVector
---@param Offset FVector2D
---@return FIntVector
function UBuildingGridComponent:LocalToGrid(PlacementMode, LocalPosition, Offset) end
---@param Key FBuildingGridKey
---@return FVector
function UBuildingGridComponent:KeyToWorldLocation(Key) end
---@param Snap FIntVector
---@return boolean
function UBuildingGridComponent:IsSnapOccupied(Snap) end
---@param Key FBuildingGridKey
---@return boolean
function UBuildingGridComponent:IsInBounds(Key) end
---@param GridLocation FBuildingGridKey
---@return boolean
function UBuildingGridComponent:IsBlocked(GridLocation) end
---@param GridLocation FBuildingGridKey
---@param Building ABuilding
---@param BuildingWorldRotation float
---@return boolean
function UBuildingGridComponent:HasOverlappingBuilding(GridLocation, Building, BuildingWorldRotation) end
---@param GridLocation FBuildingGridKey
---@return boolean
function UBuildingGridComponent:HasBuildingPrecise(GridLocation) end
---@param GridLocation FBuildingGridKey
---@param Building ABuilding
---@param BuildingWorldRotation float
---@param Except ABuilding
---@return boolean
function UBuildingGridComponent:HasBuildingAdjacent(GridLocation, Building, BuildingWorldRotation, Except) end
---@param GridLocation FBuildingGridKey
---@return boolean
function UBuildingGridComponent:HasBuilding(GridLocation) end
---@param Position FIntVector
---@param LocalOffset FVector
---@return FTransform
function UBuildingGridComponent:GridToWorld(Position, LocalOffset) end
---@param Position FIntVector
---@return FVector
function UBuildingGridComponent:GridToLocal(Position) end
---@param WorldRotation float
---@param bAllowDiagonal boolean
---@return EBuildingGridSlot
function UBuildingGridComponent:GetWallSlot(WorldRotation, bAllowDiagonal) end
---@return boolean
function UBuildingGridComponent:GetUseBuildingIntegrity() end
---@return EBuildingGridSurfaceType
function UBuildingGridComponent:GetSurfaceType() end
---@param RelativeTo FTransform
---@param OriginSlot FBuildingGridKey
---@param Building ABuilding
---@param BuildingWorldRotation float
---@return TArray<FBuildingGridKey>
function UBuildingGridComponent:GetSupportsSlots(RelativeTo, OriginSlot, Building, BuildingWorldRotation) end
---@param RelativeTo FTransform
---@param OriginSlot FBuildingGridKey
---@param Building ABuilding
---@param BuildingWorldRotation float
---@return TArray<FBuildingGridKey>
function UBuildingGridComponent:GetSupportedBySlots(RelativeTo, OriginSlot, Building, BuildingWorldRotation) end
---@return FVector
function UBuildingGridComponent:GetSubdivisionOffset() end
---@return int32
function UBuildingGridComponent:GetSubdivisionCountZ() end
---@return int32
function UBuildingGridComponent:GetSubdivisionCountY() end
---@return int32
function UBuildingGridComponent:GetSubdivisionCountX() end
---@return FIntVector
function UBuildingGridComponent:GetSubdivisionCount() end
---@param OriginSlot FBuildingGridKey
---@param Building ABuilding
---@param BuildingWorldRotation float
---@return TArray<FBuildingGridKey>
function UBuildingGridComponent:GetSubdividedBaseFootprint(OriginSlot, Building, BuildingWorldRotation) end
---@param RelativeTo FTransform
---@param OriginSlot FBuildingGridKey
---@param Building ABuilding
---@param BuildingWorldRotation float
---@return TArray<FBuildingGridKey>
function UBuildingGridComponent:GetSoftSlots(RelativeTo, OriginSlot, Building, BuildingWorldRotation) end
---@return FVector
function UBuildingGridComponent:GetSnapOffset() end
---@param OriginSlot FBuildingGridKey
---@param Flags EGetCellFlags
---@return TArray<FBuildingGridKey>
function UBuildingGridComponent:GetRawSubdivisions(OriginSlot, Flags) end
---@return FIntVector
function UBuildingGridComponent:GetMinCell() end
---@return FIntVector
function UBuildingGridComponent:GetMaxCell() end
---@param OriginSlot FBuildingGridKey
---@param Building ABuilding
---@param BuildingWorldRotation float
---@return TArray<FBuildingGridKey>
function UBuildingGridComponent:GetFlatFootprint(OriginSlot, Building, BuildingWorldRotation) end
---@param BuildingBuffer TSet<ABuilding>
---@param bAllowDesignated boolean
---@return int32
function UBuildingGridComponent:GetCollapseCountMulti(BuildingBuffer, bAllowDesignated) end
---@param BuildingId FBuildingGridBuildingId
---@return int32
function UBuildingGridComponent:GetCollapseCountAsync(BuildingId) end
---@param Building ABuilding
---@return int32
function UBuildingGridComponent:GetCollapseCount(Building) end
---@return FVector
function UBuildingGridComponent:GetCellSize() end
---@return FVector
function UBuildingGridComponent:GetCellExtents() end
---@return FVector
function UBuildingGridComponent:GetBaseCellSize() end


---@class UBuildingGridKeyLibrary : UBlueprintFunctionLibrary
UBuildingGridKeyLibrary = {}

---@param A FBuildingGridKey
---@param B FIntVector
---@return FBuildingGridKey
function UBuildingGridKeyLibrary:Subtract_BuildingGridKeyIntVector(A, B) end
---@param A FBuildingGridKey
---@param B FIntVector
---@return FBuildingGridKey
function UBuildingGridKeyLibrary:Add_BuildingGridKeyIntVector(A, B) end


---@class UBuildingGridLocationLibrary : UBlueprintFunctionLibrary
UBuildingGridLocationLibrary = {}

---@param A FBuildingGridLocation
---@param B FIntVector
---@return FBuildingGridLocation
function UBuildingGridLocationLibrary:Subtract_BuildingGridLocationIntVector(A, B) end
---@param Building ABuilding
---@param Location FBuildingGridLocation
---@param ActualWorldRotation float
---@return boolean
function UBuildingGridLocationLibrary:IsEaveBlockedAt(Building, Location, ActualWorldRotation) end
---@param Building ABuilding
---@param Location FBuildingGridLocation
---@param ActualWorldRotation float
---@return boolean
function UBuildingGridLocationLibrary:IsCrenellationBlockedAt(Building, Location, ActualWorldRotation) end
---@param Location FBuildingGridLocation
---@return boolean
function UBuildingGridLocationLibrary:IsBuildingGridLocationValid(Location) end
---@param A FBuildingGridLocation
---@param B FIntVector
---@return FBuildingGridLocation
function UBuildingGridLocationLibrary:Add_BuildingGridLocationIntVector(A, B) end


---@class UBuildingHealthWidget : UGameUserWidget
---@field HealthHolder UCanvasPanel
---@field HealthBar UProgressBar
---@field HideDelay float
---@field TargetActor AActor
---@field HealthComponent UHealthComponent
---@field bShowingBar boolean
UBuildingHealthWidget = {}

function UBuildingHealthWidget:ShowBar() end
function UBuildingHealthWidget:HideBar() end
---@param HealthRatio float
---@return FLinearColor
function UBuildingHealthWidget:GetHealthBarColor(HealthRatio) end
---@param FragileRatio float
---@return FLinearColor
function UBuildingHealthWidget:GetFragileBarColor(FragileRatio) end


---@class UBuildingLODActor : UBaseLODActor
UBuildingLODActor = {}

---@return boolean
function UBuildingLODActor:IsUnderConstruction() end
---@return boolean
function UBuildingLODActor:IsPlaced() end
---@return boolean
function UBuildingLODActor:IsBuilt() end
---@return boolean
function UBuildingLODActor:IsBeingPlaced() end


---@class UBuildingLiteData : UActorLiteData
---@field BuildingTags FGameplayTagContainer
---@field StructureWeightClass FGameplayTag
---@field StructureSturdinessClass FGameplayTag
---@field BlueprintMesh TSoftObjectPtr<UStreamableRenderAsset>
---@field BlueprintMaterials TArray<TSoftObjectPtr<UMaterialInterface>>
UBuildingLiteData = {}



---@class UBuildingManagerComponent : UActorComponent
---@field OnBuilingUnderConstruction FBuildingManagerComponentOnBuilingUnderConstruction
---@field OnBuilingNotUnderConstruction FBuildingManagerComponentOnBuilingNotUnderConstruction
UBuildingManagerComponent = {}



---@class UBuildingMaterialAssetUserData : UAssetUserData
---@field Ingredient FDataTableRowHandle
UBuildingMaterialAssetUserData = {}



---@class UBuildingPlacementComponent : UActorComponent
---@field OnBuildingCompleteDelegate FBuildingPlacementComponentOnBuildingCompleteDelegate
---@field OnAlternatePlacementModeChangedDelegate FBuildingPlacementComponentOnAlternatePlacementModeChangedDelegate
---@field OnAlternatePlacementModeToggleChangedDelegate FBuildingPlacementComponentOnAlternatePlacementModeToggleChangedDelegate
---@field OnRepeatPlacementModeChangedDelegate FBuildingPlacementComponentOnRepeatPlacementModeChangedDelegate
---@field OnFlipPlacementModeChangedDelegate FBuildingPlacementComponentOnFlipPlacementModeChangedDelegate
---@field OnGroundSnapChangedDelegate FBuildingPlacementComponentOnGroundSnapChangedDelegate
---@field OnAxisChanged FBuildingPlacementComponentOnAxisChanged
---@field OnZoopSizeChanged FBuildingPlacementComponentOnZoopSizeChanged
---@field OnZoopingChanged FBuildingPlacementComponentOnZoopingChanged
---@field OnBuildingRelocateStart FBuildingPlacementComponentOnBuildingRelocateStart
---@field OnBuildingRelocateCancel FBuildingPlacementComponentOnBuildingRelocateCancel
---@field OnBuildingRelocateComplete FBuildingPlacementComponentOnBuildingRelocateComplete
---@field OnBuildingErrorChanged FBuildingPlacementComponentOnBuildingErrorChanged
---@field OnBuildingVariantChanged FBuildingPlacementComponentOnBuildingVariantChanged
---@field OnPendingClassChanged FBuildingPlacementComponentOnPendingClassChanged
---@field OnEditModeActorPlaced FBuildingPlacementComponentOnEditModeActorPlaced
---@field bIsPlacingActor boolean
---@field SnapPool UActorPoolComponent
---@field BaseSnapObject TSubclassOf<AActor>
---@field PendingActor AActor
---@field LocalAllocatedActor AActor
---@field RotationHandles APlacementRotationHandles
---@field ZoopTriggerHoldTime float
---@field ZoopMaxDimension int32
---@field ZoopSoftMaxDimension int32
---@field ZoopedBuildings TArray<ABuilding>
---@field PlacementData FBuildingPlacementReplicatedData
---@field ZoopUpdatedLocation FBuildingGridLocation
---@field SpawnedZoopGrid UBuildingGridComponent
---@field PendingRelocate AActor
---@field DesiredRelocate FRereplicatedActor
---@field PendingDataRowHandle FDataTableRowHandle
---@field BuildingActor TSubclassOf<AActor>
---@field BuildingActorFlipped TSubclassOf<AActor>
---@field BuildingActorDiagonal TSubclassOf<AActor>
---@field BuildingActorDiagonalFlipped TSubclassOf<AActor>
---@field BuildingActorWall TSubclassOf<AActor>
---@field BuildingActorCeiling TSubclassOf<AActor>
---@field ActiveSnaps TArray<AActor>
---@field PlacedBuildingLocationLerpTime float
---@field PlacedBuildingRotationLerpTime float
---@field LerpCurve UCurveFloat
---@field FreeBuildingGroundDistance float
---@field FreeBuildingGroundRatio float
---@field FreePlacementDistance float
---@field WallMountPlacementDistance float
---@field CeilingMountPlacementDistance float
---@field DistanceScoreCurve UCurveFloat
---@field PerpendicularDistanceScoreCurve UCurveFloat
---@field SocketMatchScoreCurve UCurveFloat
---@field PersistentSnapMatchScoreCurve UCurveFloat
---@field ValidSlotScore float
---@field BuildingRotateSpeed float
---@field GroundSnapDistance int32
---@field WallMaxTranslateCells int32
---@field RelocateVisuals TSubclassOf<AActor>
---@field RelocateVisualsInstance USplineMeshComponent
---@field BuildingRelocateSuccessEffect UVisualEffect
---@field BuildingRelocateSuccesAudio USoundCue
---@field DummyCharacterActor TSubclassOf<ADummyCharacterActor>
---@field BuildModePlacementRangeMultiplier float
---@field PermittedScaleMin float
---@field PermittedScaleMax float
---@field MaxPlacementDistance float
---@field PlacementScaleSensitivity float
---@field PlacementDistanceSensitivity float
---@field PlacementElevationSensitivity float
---@field PlacementDistanceRatio float
---@field PlacementElevationRatio float
---@field PlacementScaleRatio float
---@field HoldControlTime float
---@field PlaceableCopyData FPlaceableCopyData
UBuildingPlacementComponent = {}

function UBuildingPlacementComponent:ToggleGroundSnap() end
function UBuildingPlacementComponent:ToggleAlternatePlacement() end
function UBuildingPlacementComponent:ServerStopZoop() end
---@param WorldLocation FVector
---@param GridLocation FBuildingGridLocation
---@param ZoopStartYaw float
---@param InValidity FPlacementValidity
---@param InSurfaceType EBuildingGridSurfaceType
---@param PlacementStartMode EBuildingPlacementMode
function UBuildingPlacementComponent:ServerStartZoop(WorldLocation, GridLocation, ZoopStartYaw, InValidity, InSurfaceType, PlacementStartMode) end
---@param bSnapMode boolean
function UBuildingPlacementComponent:ServerSetSnapToGround(bSnapMode) end
---@param bRepeatMode boolean
function UBuildingPlacementComponent:ServerSetRepeatPlacementMode(bRepeatMode) end
---@param Ratio float
function UBuildingPlacementComponent:ServerSetPlacementScaleRatio(Ratio) end
---@param InPendingRotation FQuat
---@param InActualWorldRotation FRotator
function UBuildingPlacementComponent:ServerSetPlacementRotation(InPendingRotation, InActualWorldRotation) end
---@param Ratio float
function UBuildingPlacementComponent:ServerSetPlacementElevationRatio(Ratio) end
---@param Ratio float
function UBuildingPlacementComponent:ServerSetPlacementDistanceRatio(Ratio) end
---@param bFlipMode boolean
function UBuildingPlacementComponent:ServerSetFlipPlacementMode(bFlipMode) end
---@param bAlternateMode boolean
function UBuildingPlacementComponent:ServerSetAlternatePlacementModeToggle(bAlternateMode) end
---@param bAlternateMode boolean
function UBuildingPlacementComponent:ServerSetAlternatePlacementMode(bAlternateMode) end
function UBuildingPlacementComponent:ServerResetAllAxes() end
---@param TargetLocation FBuildingGridLocation
function UBuildingPlacementComponent:ServerHandleAcceptZoop(TargetLocation) end
---@param InPendingLocation FBuildingGridLocation
---@param InPendingRotation FQuat
---@param InActualWorldRotation FRotator
---@param InScaleRatio float
---@param InDistanceRatio float
---@param InElevationRatio float
function UBuildingPlacementComponent:ServerHandleAcceptPlacement(InPendingLocation, InPendingRotation, InActualWorldRotation, InScaleRatio, InDistanceRatio, InElevationRatio) end
---@param bSuccess boolean
function UBuildingPlacementComponent:ServerExitPlacement(bSuccess) end
---@param BuildingId FBuildingGridBuildingId
---@param Flags EBuildingPlacementFlags
function UBuildingPlacementComponent:ServerEnterPlacementModeCopyInstance(BuildingId, Flags) end
---@param FoliageKey FFoliageKey
---@param Flags EBuildingPlacementFlags
function UBuildingPlacementComponent:ServerEnterPlacementModeCopyFoliage(FoliageKey, Flags) end
---@param BuildingData FDataTableRowHandle_NetCrc
---@param Flags EBuildingPlacementFlags
---@param CopyFrom AActor
function UBuildingPlacementComponent:ServerEnterPlacementMode(BuildingData, Flags, CopyFrom) end
---@param NewType FDataTableRowHandle
function UBuildingPlacementComponent:ServerChangeActorType(NewType) end
---@return boolean
function UBuildingPlacementComponent:PermitFloatingPlacement() end
function UBuildingPlacementComponent:OnRep_PlacementData() end
function UBuildingPlacementComponent:OnRep_PendingRelocate() end
function UBuildingPlacementComponent:OnRep_PendingActor() end
function UBuildingPlacementComponent:OnRep_IsPlacingActor() end
function UBuildingPlacementComponent:OnRep_DesiredRelocate() end
---@param CurrentMode EEditMode
---@param NewMode EEditMode
function UBuildingPlacementComponent:OnPreEditModeChanged(CurrentMode, NewMode) end
---@param Controller AController
function UBuildingPlacementComponent:OnControllerChanged(Controller) end
---@param Actor AActor
---@param InTransform FTransform
function UBuildingPlacementComponent:MulticastSetActorTransform(Actor, InTransform) end
---@param Location FVector
function UBuildingPlacementComponent:MulticastHandleRelocationSuccessEffects(Location) end
---@param bSuccess boolean
function UBuildingPlacementComponent:MulticastExitPlacement(bSuccess) end
---@param Actor AActor
function UBuildingPlacementComponent:MulticastClearCustomizationCameraView(Actor) end
---@return boolean
function UBuildingPlacementComponent:IsZooping() end
---@return boolean
function UBuildingPlacementComponent:IsRelocatingActor() end
---@return boolean
function UBuildingPlacementComponent:IsPlacementModeValid() end
---@return boolean
function UBuildingPlacementComponent:IsPendingActorDiagonal() end
---@param Axis EPlacementAxis
---@return boolean
function UBuildingPlacementComponent:IsAxisPermitted(Axis) end
---@return boolean
function UBuildingPlacementComponent:IsActorPlacement() end
---@return FIntVector
function UBuildingPlacementComponent:GetZoopSizeBuildings() end
---@return int32
function UBuildingPlacementComponent:GetZoopBuildingNum() end
---@return boolean
function UBuildingPlacementComponent:GetSnapToGroundState() end
---@return FIntVector
function UBuildingPlacementComponent:GetRotatedBuildingSize() end
---@return float
function UBuildingPlacementComponent:GetResetAxesHoldTimer() end
---@return float
function UBuildingPlacementComponent:GetResetAxesHoldTimeMax() end
---@return boolean
function UBuildingPlacementComponent:GetRepeatPlacementMode() end
---@return FDataTableRowHandle
function UBuildingPlacementComponent:GetPendingRowHandle() end
---@return ABuilding
function UBuildingPlacementComponent:GetPendingBuilding() end
---@return boolean
function UBuildingPlacementComponent:GetPendingActorHasUnlockedVariants() end
---@return AActor
function UBuildingPlacementComponent:GetPendingActor() end
---@return boolean
function UBuildingPlacementComponent:GetIsResetAxesHeld() end
---@return boolean
function UBuildingPlacementComponent:GetIsPlacingActor() end
---@return boolean
function UBuildingPlacementComponent:GetFlipPlacementMode() end
---@return FIntVector
function UBuildingPlacementComponent:GetDisplayZoopSizeBuildings() end
---@return EBuildingPlacementMode
function UBuildingPlacementComponent:GetDefaultBuildingPlacementMode() end
---@return boolean
function UBuildingPlacementComponent:GetCurrentPlacementHasFlipMode() end
---@return boolean
function UBuildingPlacementComponent:GetCurrentPlacementHasAlternativeMode() end
---@return FString
function UBuildingPlacementComponent:GetCurrentPlacementErrorString() end
---@return int32
function UBuildingPlacementComponent:GetCurrentPlacementError() end
---@return EPlacementAxis
function UBuildingPlacementComponent:GetCurrentAxis() end
---@return EBuildingPlacementMode
function UBuildingPlacementComponent:GetBuildingPlacementMode() end
---@return boolean
function UBuildingPlacementComponent:GetAlternatePlacementMode() end
---@param bSuccess boolean
function UBuildingPlacementComponent:ExitPlacementMode(bSuccess) end
---@param Target AActor
function UBuildingPlacementComponent:EnterRelocateMode(Target) end
---@param InData FDataTableRowHandle
---@param bAutoAddIngredients boolean
---@param bDeployable boolean
---@param bIsActorPlacement boolean
function UBuildingPlacementComponent:EnterPlacementMode(InData, bAutoAddIngredients, bDeployable, bIsActorPlacement) end
function UBuildingPlacementComponent:ClientWarnRelocateCancelled() end
function UBuildingPlacementComponent:ClientWarnPlacementCanceledByCombat() end
---@return boolean
function UBuildingPlacementComponent:CanZoop() end
---@return boolean
function UBuildingPlacementComponent:CanChangeSnapToGround() end
---@return boolean
function UBuildingPlacementComponent:CanChangeMaterial() end


---@class UBuildingPlacementManager : UActorComponent
UBuildingPlacementManager = {}


---@class UBuildingPlacementWidget : UGameUserWidget
UBuildingPlacementWidget = {}

---@param IsConnectingTrigger boolean
function UBuildingPlacementWidget:OnTriggerConnectionModeChanged(IsConnectingTrigger) end
---@param Controller APlayerController
---@param IsInBuildMode boolean
function UBuildingPlacementWidget:OnBuildModeStateChanged(Controller, IsInBuildMode) end
---@param Sender UBuildingPlacementComponent
function UBuildingPlacementWidget:HandleZoopSizeChanged(Sender) end
---@param Sender UBuildingPlacementComponent
---@param Axis EPlacementAxis
function UBuildingPlacementWidget:HandlePlacementAxisChanged(Sender, Axis) end
---@param Sender UBuildingPlacementComponent
---@param PendingActor AActor
function UBuildingPlacementWidget:HandlePendingBuildingClassChanged(Sender, PendingActor) end
---@param Sender UBuildingPlacementComponent
---@param bAlternateMode boolean
function UBuildingPlacementWidget:HandleIsZoopingChanged(Sender, bAlternateMode) end
---@param Sender UBuildingPlacementComponent
---@param bAlternateModeToggleState boolean
function UBuildingPlacementWidget:HandleAlternatePlacementModeToggleChanged(Sender, bAlternateModeToggleState) end
---@param Sender UBuildingPlacementComponent
---@param bAlternateMode boolean
function UBuildingPlacementWidget:HandleAlternatePlacementModeChanged(Sender, bAlternateMode) end
---@return UBuildingPlacementComponent
function UBuildingPlacementWidget:GetBuildingPlacementComponent() end


---@class UBuildingRecipeDataLibrary : UBlueprintFunctionLibrary
UBuildingRecipeDataLibrary = {}

---@param Data FBuildingRecipeData
---@return FDataTableRowHandle
function UBuildingRecipeDataLibrary:GetBuildingRecipePrimaryMaterial(Data) end


---@class UBuildingReplicationManager : UActorComponent
---@field AlwaysRelevantBuildingCap int32
---@field RegisteredProxies TSet<ABuildingGridReplicationProxy>
---@field RegisteredPlayers TSet<ASurvivalPlayerController>
UBuildingReplicationManager = {}



---@class UBuildingShape : UDataAsset
---@field OverrideSupportedBy UBuildingShape
---@field AppendSupportedBy TArray<FBuildingGridKey>
---@field RemoveSupportedBy TArray<FBuildingGridKey>
---@field SoftCells TArray<FBuildingGridKey>
---@field OverrideSnaps TArray<FIntVector>
---@field ManualPlacementLocations TArray<FVector>
---@field AppendAdjacencySources TArray<FBuildingGridKey>
---@field OverrideFullCells TArray<FBuildingGridKey>
---@field OverrideCells TArray<FBuildingGridKey>
---@field OverrideCellsAdvanced TArray<FBuildingGridKey>
---@field BlockFullCells TArray<FBuildingGridKey>
---@field BlockCells TArray<FBuildingGridKey>
---@field BlockCellsAdvanced TArray<FBuildingGridKey>
UBuildingShape = {}

---@param Key FBuildingGridKey
---@param Flags EGetCellFlags
---@return boolean
function UBuildingShape:IsCell(Key, Flags) end
---@param AngleZ float
---@return TArray<FBuildingGridKey>
function UBuildingShape:GetSupportsOrSupportedByCells(AngleZ) end
---@param AngleZ float
---@return TArray<FBuildingGridKey>
function UBuildingShape:GetSupportsCells(AngleZ) end
---@param AngleZ float
---@return TArray<FBuildingGridKey>
function UBuildingShape:GetSupportedByCellsExpanded(AngleZ) end
---@param AngleZ float
---@return TArray<FBuildingGridKey>
function UBuildingShape:GetSupportedByCells(AngleZ) end
---@param AngleZ float
---@return TArray<FBuildingGridKey>
function UBuildingShape:GetSoftCells(AngleZ) end
---@return FIntVector
function UBuildingShape:GetSizeCellsGeometric() end
---@return FIntVector
function UBuildingShape:GetSizeCells() end
---@param AngleZ float
---@param Flags EGetCellFlags
---@return TArray<FBuildingGridKey>
function UBuildingShape:GetCells(AngleZ, Flags) end
---@return TArray<FBuildingGridKey>
function UBuildingShape:GetAdjacentCells() end


---@class UBurgleObjectiveProgress : UBaseBurgleObjective
---@field ProgressCount int32
---@field MaxProgress int32
UBurgleObjectiveProgress = {}

---@param NewProgress int32
function UBurgleObjectiveProgress:SetProgressIfLarger(NewProgress) end
---@param InTarget int32
function UBurgleObjectiveProgress:SetMaxProgress(InTarget) end
---@param InParentQuest UBurgleQuestInstance
---@param InObjectiveIndex int32
---@param InMaxProgress int32
function UBurgleObjectiveProgress:InitializeProgress(InParentQuest, InObjectiveIndex, InMaxProgress) end
---@return int32
function UBurgleObjectiveProgress:GetProgress() end
---@return int32
function UBurgleObjectiveProgress:GetMaxProgress() end
---@param NewProgress int32
function UBurgleObjectiveProgress:ForceSetProgress(NewProgress) end
---@param Progress int32
function UBurgleObjectiveProgress:AddProgress(Progress) end


---@class UBurgleObjectiveSimple : UBaseBurgleObjective
---@field bIsComplete boolean
UBurgleObjectiveSimple = {}

function UBurgleObjectiveSimple:CompleteObjective() end


---@class UBurgleQuest2Build : UBurgleQuestInstance
---@field BuildingsLogicalOr TArray<FDataTableRowHandle>
UBurgleQuest2Build = {}

---@param Building ABuilding
function UBurgleQuest2Build:HandleBuildingBuilt(Building) end


---@class UBurgleQuest2Craft : UBurgleQuestInstance
---@field ItemsLogicalOr TArray<FDataTableRowHandle>
---@field CraftQty int32
UBurgleQuest2Craft = {}

---@param ItemHandle FDataTableRowHandle
---@param InstigatorPlayerState ASurvivalPlayerState
function UBurgleQuest2Craft:HandleItemCrafted(ItemHandle, InstigatorPlayerState) end


---@class UBurgleQuest2CustomEvent : UBurgleQuestInstance
---@field ListenEvent UBurgleQuestCustomEvent
---@field CallCount int32
UBurgleQuest2CustomEvent = {}

---@param TriggeredEvent UBurgleQuestCustomEvent
function UBurgleQuest2CustomEvent:HandleCustomEventTriggered(TriggeredEvent) end


---@class UBurgleQuest2Equipment : UBurgleQuestInstance
---@field EquippedLogicalAnd TArray<FDataTableRowHandle>
UBurgleQuest2Equipment = {}

---@param PartyComp UPartyComponent
---@param Player ASurvivalPlayerCharacter
function UBurgleQuest2Equipment:RegisterEquipChangeWithPlayer(PartyComp, Player) end
---@param EquipComp UEquipmentComponent
function UBurgleQuest2Equipment:HandleEquipmentChanged(EquipComp) end


---@class UBurgleQuest2Global : UBurgleQuestInstance
---@field CompletedCondition FGlobalVariableReferenceConditional
---@field bReusable boolean
UBurgleQuest2Global = {}

---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param GlobalInstigator AActor
function UBurgleQuest2Global:HandleGlobalChanged(GlobalVariableID, VariableValue, GlobalInstigator) end


---@class UBurgleQuest2ItemUpgrade : UBurgleQuestInstance
---@field TargetTotalUpgradeLevel int32
---@field BonusTagsLogicOr FGameplayTagContainer
UBurgleQuest2ItemUpgrade = {}

---@param UpgItem UItem
---@param BonusTag FGameplayTag
function UBurgleQuest2ItemUpgrade:HandleItemUpgrade(UpgItem, BonusTag) end


---@class UBurgleQuest2Kill : UBurgleQuestInstance
---@field CreatureTag FGameplayTag
---@field CreatureDisplayName FLocString
---@field KillQty uint8
---@field bRequireDeathByWeakness boolean
UBurgleQuest2Kill = {}

---@param Character AActor
---@param Damage FDamageInfo
function UBurgleQuest2Kill:HandleActorKilledWithAttack(Character, Damage) end


---@class UBurgleQuest2MarkActor : UBurgleQuestInstance
---@field ActorGuid FGuid
---@field ActorDisplayName FLocString
---@field HudMarkerDisplayType EHUDMarkerType
UBurgleQuest2MarkActor = {}

---@param QuestObject FGuid
function UBurgleQuest2MarkActor:HandleBurgleQuestObjectMarked(QuestObject) end


---@class UBurgleQuest2Stat : UBurgleQuestInstance
---@field StatToCheck UPlayerStatConfig
---@field StatChangeAmt int32
---@field ObjectiveDisplay FLocString
---@field bCheckRawStatValue boolean
UBurgleQuest2Stat = {}

---@param PartyComp UPartyComponent
---@param Player ASurvivalPlayerCharacter
function UBurgleQuest2Stat:RegisterStatChangeWithPlayer(PartyComp, Player) end
---@param PlayerStat UPlayerStatConfig
---@param Value int32
function UBurgleQuest2Stat:HandlePlayerStatChanged(PlayerStat, Value) end
---@param PlayerStat UPlayerStatConfig
---@param Value int32
function UBurgleQuest2Stat:HandlePartyStatChanged(PlayerStat, Value) end


---@class UBurgleQuestCollection : UDataAsset
---@field Collection TArray<TSubclassOf<UBurgleQuestInstance>>
UBurgleQuestCollection = {}



---@class UBurgleQuestCustomEvent : UDataAsset
---@field Guid FGuid
---@field Description FString
UBurgleQuestCustomEvent = {}



---@class UBurgleQuestFunctionLibrary : UBlueprintFunctionLibrary
UBurgleQuestFunctionLibrary = {}

---@param Message FString
function UBurgleQuestFunctionLibrary:LogBurgleQuestWarning(Message) end
---@param Message FString
function UBurgleQuestFunctionLibrary:LogBurgleQuestLog(Message) end
---@param Message FString
function UBurgleQuestFunctionLibrary:LogBurgleQuestError(Message) end
---@param WorldContextObject UObject
---@param Progress float
---@return boolean
function UBurgleQuestFunctionLibrary:IsBurgleQuestProgressAtLeast(WorldContextObject, Progress) end
---@param WorldContextObject UObject
---@param Tag FGameplayTag
---@return ABurgleQuestOptionActor
function UBurgleQuestFunctionLibrary:GetRandomQuestOption(WorldContextObject, Tag) end
---@param ParentQuest UBurgleQuestInstance
---@param ObjectiveIndex int32
---@return UBurgleObjectiveSimple
function UBurgleQuestFunctionLibrary:CreateBurgleQuestSimpleObjective(ParentQuest, ObjectiveIndex) end
---@param ParentQuest UBurgleQuestInstance
---@param ObjectiveIndex int32
---@param MaxProgress int32
---@return UBurgleObjectiveProgress
function UBurgleQuestFunctionLibrary:CreateBurgleQuestProgressObjective(ParentQuest, ObjectiveIndex, MaxProgress) end
---@param WorldContextObject UObject
---@param AvailableProgressRange FFloatRange
---@param MinCount int32
---@param MaxCount int32
---@param MaxCountAt float
---@return int32
function UBurgleQuestFunctionLibrary:CalculateBurgleQuestTargetCount(WorldContextObject, AvailableProgressRange, MinCount, MaxCount, MaxCountAt) end


---@class UBurgleQuestInstance : UBaseQuest
---@field Objectives TArray<UBaseObjective>
---@field DisplayType EBurgleQuestTagType
---@field TitleString FLocString
---@field ObjectiveFormatString FLocString
---@field RawScienceReward int32
---@field RequiredNumEpicQuestsCompleted int32
---@field RequiredCompleteEpicQuests TArray<TSubclassOf<UBurgleQuestInstance>>
---@field bPerformedComplete boolean
---@field bHideProgressiveNumbers boolean
---@field bHideQuestUpdateNotifications boolean
---@field CurrentObjectiveIndex uint8
UBurgleQuestInstance = {}

function UBurgleQuestInstance:SetComplete() end
function UBurgleQuestInstance:RemoveObjectiveMarkers() end
function UBurgleQuestInstance:PerformComplete() end
function UBurgleQuestInstance:OnRep_Objectives() end
function UBurgleQuestInstance:NotifyQuestStart() end
function UBurgleQuestInstance:NotifyQuestComplete() end
function UBurgleQuestInstance:NotifyAbandonQuest() end
function UBurgleQuestInstance:InitializeStarted() end
---@return boolean
function UBurgleQuestInstance:HasPerformedComplete() end
---@return FString
function UBurgleQuestInstance:GetTitle() end
---@return int32
function UBurgleQuestInstance:GetScienceReward() end
---@return float
function UBurgleQuestInstance:GetQuestProgressPercent() end
---@return FString
function UBurgleQuestInstance:GetQuestDescription() end
---@param ObjectiveIndex int32
---@return FString
function UBurgleQuestInstance:GetObjectiveText(ObjectiveIndex) end
---@param Index int32
---@return UBurgleObjectiveSimple
function UBurgleQuestInstance:GetObjectiveAsSimple(Index) end
---@param Index int32
---@return UBurgleObjectiveProgress
function UBurgleQuestInstance:GetObjectiveAsProgress(Index) end
---@param Index int32
---@return UBaseBurgleObjective
function UBurgleQuestInstance:GetObjective(Index) end
---@return boolean
function UBurgleQuestInstance:GetGenerationFailed() end
---@return int32
function UBurgleQuestInstance:GetExternalScienceReward() end
---@return FString
function UBurgleQuestInstance:GetCurrentObjectiveText() end
---@return UBaseBurgleObjective
function UBurgleQuestInstance:GetCurrentObjective() end
function UBurgleQuestInstance:GenerateParameters() end
function UBurgleQuestInstance:FailGeneration() end
function UBurgleQuestInstance:CreateObjectiveMarkers() end
function UBurgleQuestInstance:CleanUpQuest() end
---@return boolean
function UBurgleQuestInstance:CanAbandon() end
---@param Objective UBaseBurgleObjective
function UBurgleQuestInstance:AddObjective(Objective) end
function UBurgleQuestInstance:Activated() end


---@class UBurgleQuestInstanceBurgleChip : UBurgleQuestInstanceSingleOptAct
UBurgleQuestInstanceBurgleChip = {}


---@class UBurgleQuestInstanceCoziness : UBurgleQuestInstance
---@field CozinessLevel int32
UBurgleQuestInstanceCoziness = {}

---@param Sender UPartyComponent
---@param NewLevel int32
---@param Achiever ASurvivalPlayerState
function UBurgleQuestInstanceCoziness:OnCozinessLevelAchieved(Sender, NewLevel, Achiever) end


---@class UBurgleQuestInstanceCraft : UBurgleQuestInstanceSingleRow
UBurgleQuestInstanceCraft = {}


---@class UBurgleQuestInstanceKillGroup : UBurgleQuestInstance
---@field CreatureTag FGameplayTag
UBurgleQuestInstanceKillGroup = {}

---@param Creature ASurvivalCharacter
---@param Player ASurvivalPlayerState
function UBurgleQuestInstanceKillGroup:OnPartyCreatureKill(Creature, Player) end


---@class UBurgleQuestInstanceMarkPoint : UBurgleQuestInstanceSingleOptAct
---@field DesignatedBuilding ABuilding
UBurgleQuestInstanceMarkPoint = {}



---@class UBurgleQuestInstanceSingleOptAct : UBurgleQuestInstance
---@field LocationOption ABurgleQuestOptionActor
UBurgleQuestInstanceSingleOptAct = {}



---@class UBurgleQuestInstanceSingleRow : UBurgleQuestInstance
---@field RowHandle FDataTableRowHandle
UBurgleQuestInstanceSingleRow = {}

---@param InRowHandle FDataTableRowHandle
function UBurgleQuestInstanceSingleRow:SetRowHandle(InRowHandle) end


---@class UBurgleQuestManagerComponent : UActorComponent
---@field ConditionWhenQuestsUnlocked FGlobalVariableReferenceConditional
---@field OnQuestStarted FBurgleQuestManagerComponentOnQuestStarted
---@field OnQuestComplete FBurgleQuestManagerComponentOnQuestComplete
---@field OnObjectiveUpdated FBurgleQuestManagerComponentOnObjectiveUpdated
---@field OnObjectiveComplete FBurgleQuestManagerComponentOnObjectiveComplete
---@field OnActiveQuestsChanged FBurgleQuestManagerComponentOnActiveQuestsChanged
---@field OnAvailableQuestsChanged FBurgleQuestManagerComponentOnAvailableQuestsChanged
---@field OnQuestsRefilled FBurgleQuestManagerComponentOnQuestsRefilled
---@field OnBurgleQuestObjectMarked FBurgleQuestManagerComponentOnBurgleQuestObjectMarked
---@field OnCustomBurgleQuestEvent FBurgleQuestManagerComponentOnCustomBurgleQuestEvent
---@field OnKillWithAttack FBurgleQuestManagerComponentOnKillWithAttack
---@field OnQuestCountsChanged FBurgleQuestManagerComponentOnQuestCountsChanged
---@field MaxSimultaneousQuests int32
---@field MaxNumEpicQuests int32
---@field NumEpicCompleteChecksPerFrame int32
---@field CompletedQuestProgressWeight float
---@field DayProgressWeight float
---@field EpicQuestsOrder UBurgleQuestCollection
---@field DailyQuestsPool UBurgleQuestCollection
---@field LastDayGenerated int32
---@field AvailableQuests FBurgleQuestInstanceArray
---@field ActiveQuests TArray<UBurgleQuestInstance>
---@field CompletedEpicQuestCount int32
---@field QuestSlotsAvailableCount int32
---@field bIsSystemActive boolean
UBurgleQuestManagerComponent = {}

---@param Instigator ASurvivalPlayerController
---@return boolean
function UBurgleQuestManagerComponent:TryRerollDailyQuests(Instigator) end
---@param Instigator ASurvivalPlayerController
function UBurgleQuestManagerComponent:TryRequestRefillQuests(Instigator) end
---@param CustomEvent UBurgleQuestCustomEvent
function UBurgleQuestManagerComponent:TriggerCustomQuestEvent(CustomEvent) end
function UBurgleQuestManagerComponent:OnRep_CountsChanged() end
function UBurgleQuestManagerComponent:OnRep_AvailableQuests() end
function UBurgleQuestManagerComponent:OnRep_ActiveQuests() end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param GlobalInstigator AActor
function UBurgleQuestManagerComponent:OnGlobalVariableChanged(GlobalVariableID, VariableValue, GlobalInstigator) end
---@param Quest UBurgleQuestInstance
function UBurgleQuestManagerComponent:MulticastStartQuest(Quest) end
function UBurgleQuestManagerComponent:MulticastQuestsRefilled() end
---@param Quest UBurgleQuestInstance
---@param Objective UBaseObjective
function UBurgleQuestManagerComponent:MulticastObjectiveUpdated(Quest, Objective) end
---@param Quest UBurgleQuestInstance
function UBurgleQuestManagerComponent:MulticastCompleteQuest(Quest) end
---@param ObsIdComponent UObsidianIDComponent
function UBurgleQuestManagerComponent:MarkQuestObjectWithId(ObsIdComponent) end
---@param Quest UBurgleQuestInstance
---@return boolean
function UBurgleQuestManagerComponent:IsQuestDaily(Quest) end
---@param Quest UBurgleQuestInstance
---@return boolean
function UBurgleQuestManagerComponent:IsQuestActive(Quest) end
---@param GuidToCheck FGuid
---@return boolean
function UBurgleQuestManagerComponent:IsGuidMarked(GuidToCheck) end
---@return float
function UBurgleQuestManagerComponent:GetProgressRating() end
---@return int32
function UBurgleQuestManagerComponent:GetNumQuestSlotsFree() end
---@return float
function UBurgleQuestManagerComponent:GetHoursUntilRerollTime() end
---@param Quest UBurgleQuestInstance
---@return int32
function UBurgleQuestManagerComponent:GetEpicNumberForQuest(Quest) end
---@return int32
function UBurgleQuestManagerComponent:GetCompletedQuestCount() end
---@return TArray<UBurgleQuestInstance>
function UBurgleQuestManagerComponent:GetAvailableQuests() end
---@return TArray<UBurgleQuestInstance>
function UBurgleQuestManagerComponent:GetAllQuests() end
---@return TArray<UBurgleQuestInstance>
function UBurgleQuestManagerComponent:GetActiveQuests() end
function UBurgleQuestManagerComponent:ForceRegenerateQuests() end
---@param Count int32
function UBurgleQuestManagerComponent:DebugSetCompletedQuestCount(Count) end
---@param NeededEpicQuestCompleteCount int32
---@param NeededEpicQuestCompleted TArray<TSubclassOf<UBurgleQuestInstance>>
---@return boolean
function UBurgleQuestManagerComponent:AreQuestRequirementsMet(NeededEpicQuestCompleteCount, NeededEpicQuestCompleted) end
---@return boolean
function UBurgleQuestManagerComponent:AreBurgleQuestsActive() end
---@return boolean
function UBurgleQuestManagerComponent:AreAllEpicQuestsCompleted() end
---@param Quest UBurgleQuestInstance
function UBurgleQuestManagerComponent:AbandonQuest(Quest) end


---@class UBurgleQuestTemplate : UDataAsset
UBurgleQuestTemplate = {}


---@class UBurgleQuestTemplateCoziness : UBurgleQuestTemplate
UBurgleQuestTemplateCoziness = {}


---@class UBurgleQuestTemplateKillGroup : UBurgleQuestTemplate
---@field Configs TArray<FBurgleQuestInstanceKillConfiguration>
---@field Rewards TArray<FBurgleQuestKillGroupRewardConfig>
UBurgleQuestTemplateKillGroup = {}

---@param CreatureTag FGameplayTag
---@return int32
function UBurgleQuestTemplateKillGroup:GetSciencePerKill(CreatureTag) end


---@class UBurgleQuestTemplateSingleOptAct : UBurgleQuestTemplate
---@field OptionTag FGameplayTag
UBurgleQuestTemplateSingleOptAct = {}



---@class UBurrowCharacterAnimInstance : UCharacterAnimInstance
---@field IsBurrowed boolean
---@field BurrowState EBurrowState
UBurrowCharacterAnimInstance = {}



---@class UBurrowComponent : UActorComponent
---@field OnBurrowStateChanged FBurrowComponentOnBurrowStateChanged
---@field BurrowStatusEffects TArray<FDataTableRowHandle>
---@field BurrowCooldown float
---@field BurrowTime float
---@field UnburrowTime float
---@field bDisableWhileUnburrowed boolean
---@field bCombatTogglesBurrow boolean
---@field bClearThreatOnBurrow boolean
---@field bBurrowAtBeginPlay boolean
---@field bHasBurrowedTimeToStop boolean
---@field BurrowedTimeToStop float
---@field bDestroyAfterBurrowing boolean
---@field bCheckMaterialWhenBurrowing boolean
---@field BurrowState EBurrowState
UBurrowComponent = {}

function UBurrowComponent:UnBurrow() end
function UBurrowComponent:OnRep_BurrowState() end
---@param OldMode EEditMode
---@param CurrentMode EEditMode
function UBurrowComponent:OnEditModeChanged(OldMode, CurrentMode) end
---@param DamageInfo FDamageInfo
function UBurrowComponent:OnDeath(DamageInfo) end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function UBurrowComponent:OnDamaged(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@param Character ASurvivalCharacter
---@param InCombat boolean
function UBurrowComponent:OnCombatChange(Character, InCombat) end
---@return boolean
function UBurrowComponent:IsBurrowed() end
---@return EBurrowState
function UBurrowComponent:GetBurrowState() end
function UBurrowComponent:Burrow() end


---@class UBurrowComponentLiteData : UComponentLiteData
UBurrowComponentLiteData = {}


---@class UBurrowLODComponent : UBaseLODComponent
UBurrowLODComponent = {}


---@class UCDOFunctionLibrary : UBlueprintFunctionLibrary
UCDOFunctionLibrary = {}

---@param Object UObject
---@return boolean
function UCDOFunctionLibrary:IsDefaultObject(Object) end
---@param Actor AActor
---@return USceneComponent
function UCDOFunctionLibrary:GetRootComponent(Actor) end
---@param Component UActorComponent
---@return UActorComponent
function UCDOFunctionLibrary:GetDefaultComponent(Component) end
---@param Actor AActor
---@param ComponentClass TSubclassOf<UActorComponent>
---@return TArray<UActorComponent>
function UCDOFunctionLibrary:FindDefaultComponentsByClass(Actor, ComponentClass) end
---@param Actor AActor
---@param ComponentName FName
---@return UActorComponent
function UCDOFunctionLibrary:FindDefaultComponentByName(Actor, ComponentName) end
---@param Actor AActor
---@param ComponentClass TSubclassOf<UActorComponent>
---@return UActorComponent
function UCDOFunctionLibrary:FindDefaultComponentByClass(Actor, ComponentClass) end


---@class UCVarManagerComponent : UActorComponent
---@field CVarStack TArray<FCVarStackFrame>
UCVarManagerComponent = {}

---@param CVar FString
---@param Value int32
---@param Predicate ECVarCapturePredicate
function UCVarManagerComponent:SetCVarInt(CVar, Value, Predicate) end
---@param CVar FString
---@param Value float
---@param Predicate ECVarCapturePredicate
function UCVarManagerComponent:SetCVarFloat(CVar, Value, Predicate) end
---@param CVar FString
---@param Value boolean
function UCVarManagerComponent:SetCVarBool(CVar, Value) end
---@param Name FName
function UCVarManagerComponent:PushFrame(Name) end
---@param Name FName
function UCVarManagerComponent:PopFrame(Name) end


---@class UCalendarComponent : UActorComponent
---@field OnMinuteChanged FCalendarComponentOnMinuteChanged
---@field OnHourChanged FCalendarComponentOnHourChanged
---@field OnDayChanged FCalendarComponentOnDayChanged
---@field OnDayNightChange FCalendarComponentOnDayNightChange
---@field StartGameDay int32
---@field StartGameHour int32
---@field StartGameMinute int32
---@field PlaygroundStartGameDay int32
---@field PlaygroundStartGameHour int32
---@field PlaygroundStartGameMinute int32
---@field SecondsPerMinute int32
---@field MinutesPerHour int32
---@field HoursPerDay int32
---@field DaytimeStartHour int32
---@field DaytimeEndHour int32
---@field CurrentTime double
---@field GameToRealTimeRatio float
---@field TimeMultiplier float
---@field SurvivalModeManager USurvivalModeManagerComponent
UCalendarComponent = {}

---@param Multiplier float
function UCalendarComponent:SetTimeSpeedMultiplier(Multiplier) end
---@param PreviousValue double
function UCalendarComponent:OnRep_CurrentTime(PreviousValue) end
---@param TimeToSync float
function UCalendarComponent:MulticastSyncTimeOfDay(TimeToSync) end
---@param Time ETimeOfDay
---@return boolean
function UCalendarComponent:IsTimeOfDay(Time) end
---@return boolean
function UCalendarComponent:IsNightTime() end
---@return boolean
function UCalendarComponent:IsDayTime() end
---@param Day float
---@param DayHour float
---@return float
function UCalendarComponent:GetTotalHour(Day, DayHour) end
---@return float
function UCalendarComponent:GetTotalGameHoursPassed() end
---@return FString
function UCalendarComponent:GetTimeString() end
---@return float
function UCalendarComponent:GetTimeSpeedMultiplier() end
---@return int32
function UCalendarComponent:GetSecondsPerHour() end
---@return int32
function UCalendarComponent:GetSecondsPerDay() end
---@return float
function UCalendarComponent:GetNormalizedTime() end
---@param DayHour float
---@return float
function UCalendarComponent:GetNextDayHourTotalHour(DayHour) end
---@return int32
function UCalendarComponent:GetMinutesPerHour() end
---@return int32
function UCalendarComponent:GetMinute() end
---@param TargetHour float
---@return float
function UCalendarComponent:GetHoursUntilHour(TargetHour) end
---@param Hours float
---@return FText
function UCalendarComponent:GetHoursString(Hours) end
---@return int32
function UCalendarComponent:GetHoursPerDay() end
---@return float
function UCalendarComponent:GetHourFloat() end
---@return int32
function UCalendarComponent:GetHour() end
---@return float
function UCalendarComponent:GetGameToRealTimeRatio() end
---@return int32
function UCalendarComponent:GetGameStartMinute() end
---@return int32
function UCalendarComponent:GetGameStartHour() end
---@return int32
function UCalendarComponent:GetGameStartDay() end
---@return int32
function UCalendarComponent:GetDaytimeStart() end
---@return int32
function UCalendarComponent:GetDaytimeEnd() end
---@return int32
function UCalendarComponent:GetDay() end
---@return float
function UCalendarComponent:GetCurrentTimeHours() end
---@return float
function UCalendarComponent:GetCurrentTime() end
---@param Hours float
---@return FText
function UCalendarComponent:GetClockFormat(Hours) end
---@param TargetDay int32
---@param TargetHour int32
function UCalendarComponent:ForceSetTimeOfDay(TargetDay, TargetHour) end
---@param Hours float
---@return FString
function UCalendarComponent:DeltaHoursToTimestamp(Hours) end


---@class UCharacterAnimInstance : UAnimInstance
---@field IsChangingCameraDisplayMode boolean
---@field IsEnteringOrEnteredPhotoMode boolean
---@field IsShadowAnim boolean
---@field AimPitch float
---@field Speed float
---@field SplineDirection float
---@field Velocity FVector
---@field Heading float
---@field IsMoving boolean
---@field IsInAir boolean
---@field IsFlying boolean
---@field IsSwimming boolean
---@field IsSitting boolean
---@field GlidingStyle EGlidingStyle
---@field bIsZiplining boolean
---@field bIsAscendingZipline boolean
---@field bIsDescendingZipline boolean
---@field IsCrouching boolean
---@field IsSprinting boolean
---@field IsClimbingSpline boolean
---@field IsAttacking boolean
---@field IsBlocking boolean
---@field IsThrowing boolean
---@field IsInCombat boolean
---@field IsDead boolean
---@field IsIncapacitated boolean
---@field IsReviving boolean
---@field IsUnderwater boolean
---@field IsFirstPerson boolean
---@field HasWeapon boolean
---@field HasOffhand boolean
---@field IsHauling boolean
---@field IsTurning boolean
---@field IsEquipping boolean
---@field IsAuthorityOrLocallyControlled boolean
---@field ActivityMode ECreatureActivityMode
---@field TurnDelta float
---@field TurnDeltaSmoothed float
---@field Stance int32
---@field OffhandStance int32
---@field LookAtPoint FVector
---@field LookAtDistance float
---@field bBigHeadMode boolean
---@field bIKEnabled boolean
---@field bStartDead boolean
---@field bHasFlipperTag boolean
---@field RelevanceIKMode ERelevanceIKMode
---@field FlipperTag FGameplayTag
---@field VitalTag FGameplayTag
---@field VitalValue float
---@field Character ASurvivalCharacter
---@field PlayerCharacter ASurvivalPlayerCharacter
---@field MovementComponent UMaineCharMovementComponent
---@field HaulingComponent UHaulingComponent
---@field EquipmentComponent UEquipmentComponent
---@field HealthComponent UHealthComponent
---@field VitalVisualsComponent UVitalVisualsComponent
UCharacterAnimInstance = {}

---@param InSpeed float
function UCharacterAnimInstance:SetSpeed(InSpeed) end
---@param bValue boolean
function UCharacterAnimInstance:SetIsDescendingZipline(bValue) end
---@param bValue boolean
function UCharacterAnimInstance:SetIsAscendingZipline(bValue) end
---@return float
function UCharacterAnimInstance:GetSpeed() end
---@return boolean
function UCharacterAnimInstance:GetIsMoving() end


---@class UCharacterAudioData : UDataAsset
---@field TaggedSounds TMap<FGameplayTag, USoundBase>
UCharacterAudioData = {}

---@param SoundTag FGameplayTag
---@return USoundBase
function UCharacterAudioData:GetSoundForTag(SoundTag) end


---@class UCharacterLODActor : UBaseLODActor
---@field StartedAction FGoapActionInstance
UCharacterLODActor = {}

---@param TimelapseActive boolean
function UCharacterLODActor:OnTimelapseChange(TimelapseActive) end
---@return boolean
function UCharacterLODActor:IsSwimming() end
---@return boolean
function UCharacterLODActor:IsResting() end
---@return boolean
function UCharacterLODActor:IsMoving() end
---@return boolean
function UCharacterLODActor:IsFlying() end
---@return UInterestCore
function UCharacterLODActor:GetInterestCore() end
---@return FLocString
function UCharacterLODActor:GetCharacterTypeName() end
---@param bFilter boolean
---@return FString
function UCharacterLODActor:GetCharacterInstanceName(bFilter) end
---@return FVector
function UCharacterLODActor:GetBlackboardTargetLocation() end
---@return AActor
function UCharacterLODActor:GetBlackboardTargetActor() end
---@return boolean
function UCharacterLODActor:CanFly() end


---@class UCharacterLoadGroup : UGameUserWidget
---@field SkipWidgets UHorizontalBox
---@field ProgressBarOne UProgressBar
---@field ProgressBarTwo UProgressBar
---@field ProgressBarThree UProgressBar
---@field ProgressBarFour UProgressBar
---@field SizeBoxOne USizeBox
---@field SizeBoxTwo USizeBox
---@field SizeBoxThree USizeBox
---@field SizeBoxFour USizeBox
---@field CharacterImages TArray<UTexture2D>
UCharacterLoadGroup = {}

function UCharacterLoadGroup:OnPlayerIdentitiesChanged() end
---@param Player APlayerState
---@param BarrierName FName
---@param ShouldExecuteBarrier boolean
function UCharacterLoadGroup:OnPlayerArrivedInGame(Player, BarrierName, ShouldExecuteBarrier) end


---@class UCharacterMotionEaterComponent : USceneComponent
---@field BlockX boolean
---@field BlockY boolean
---@field MaxSpeed float
---@field OnEaterMoved FCharacterMotionEaterComponentOnEaterMoved
---@field OnCharacterAttached FCharacterMotionEaterComponentOnCharacterAttached
---@field OnCharacterDetached FCharacterMotionEaterComponentOnCharacterDetached
---@field AttachedCharacters TArray<ASurvivalCharacter>
UCharacterMotionEaterComponent = {}

---@param PreviousCharacters TArray<ASurvivalCharacter>
function UCharacterMotionEaterComponent:OnRep_AttachedCharacters(PreviousCharacters) end
---@param Sender AActor
function UCharacterMotionEaterComponent:HandleAttachedCharacterDestroyed(Sender) end


---@class UCharacterProgressGroup : UGameUserWidget
---@field SkipWidgets UHorizontalBox
---@field ProgressBarOne UProgressBar
---@field ProgressBarTwo UProgressBar
---@field ProgressBarThree UProgressBar
---@field ProgressBarFour UProgressBar
---@field SkipButton UGameUserWidget
---@field ShowSkipWidgets UWidgetAnimation
---@field ShowProgressBarOne UWidgetAnimation
---@field ShowProgressBarTwo UWidgetAnimation
---@field ShowProgressBarThree UWidgetAnimation
---@field ShowProgressBarFour UWidgetAnimation
---@field ShowSkipButton UWidgetAnimation
---@field CharacterImages TArray<UTexture2D>
---@field FadeTimeMax float
UCharacterProgressGroup = {}

---@param Registered boolean
function UCharacterProgressGroup:SetSkipComponentRegistration(Registered) end
function UCharacterProgressGroup:OnSkipStatusUpdate() end
---@param Player APlayerState
function UCharacterProgressGroup:OnPlayerCanceledSkip(Player) end
function UCharacterProgressGroup:OnAllPlayersSkipped() end


---@class UCharacterSelectWidget : UGameUserWidget
UCharacterSelectWidget = {}


---@class UChatBoxWidget : UGameUserWidget
UChatBoxWidget = {}

---@param Message FChatBoxMessage
function UChatBoxWidget:HandleChatMessageReceived(Message) end


---@class UClassMemoryStatsCommandlet : UCommandlet
UClassMemoryStatsCommandlet = {}


---@class UClimbableSplineComponent : USplineComponent
---@field ClimbableBy FGameplayTagContainer
---@field Role FGameplayTag
---@field OverrideAnims TArray<FClimbableSplineAnimSegment>
---@field LadderAnim UAnimMontage
---@field MoveSpeedMultiplier float
---@field RungSize float
---@field RungOffset float
---@field bLerpOnAttach boolean
---@field bAllowSlidingCollision boolean
UClimbableSplineComponent = {}



---@class UCollectibleLiteData : UActorLiteData
---@field DisplayName FLocString
UCollectibleLiteData = {}



---@class UColonyConfiguration : UDataAsset
---@field PopulationCurve UCurveFloat
UColonyConfiguration = {}



---@class UColonyManagerComponent : UActorComponent
---@field EditorColonyData TArray<FPredefinedColonyData>
UColonyManagerComponent = {}

function UColonyManagerComponent:DebugDumpColonies() end


---@class UColonyMemberComponent : UActorComponent
---@field DefaultColony FGameplayTag
UColonyMemberComponent = {}

---@param DamageInfo FDamageInfo
function UColonyMemberComponent:OnDeathCallback(DamageInfo) end
---@param Identifier FColonyIdentifier
---@return boolean
function UColonyMemberComponent:IsMemberOf(Identifier) end
---@return FColonyIdentifier
function UColonyMemberComponent:GetColonyIdentifier() end


---@class UColonyMemberComponentLiteData : UComponentLiteData
---@field DefaultColonyTag FGameplayTag
UColonyMemberComponentLiteData = {}



---@class UColonyMemberLODComponent : UBaseLODComponent
UColonyMemberLODComponent = {}

---@param ColonyId FColonyIdentifier
---@return boolean
function UColonyMemberLODComponent:IsMemberOf(ColonyId) end
---@return FColonyIdentifier
function UColonyMemberLODComponent:GetColonyIdentifier() end


---@class UColorCollectibleLODActor : UBaseLODActor
UColorCollectibleLODActor = {}


---@class UCombinedMeshAssetUserData : UAssetUserData
---@field CombinedMesh UStaticMesh
UCombinedMeshAssetUserData = {}



---@class UComponentHeaderData : UObject
UComponentHeaderData = {}


---@class UComponentLiteData : UObject
UComponentLiteData = {}


---@class UCompositeUndoOperation : UBaseUndoOperation
---@field Operations TArray<UBaseUndoOperation>
UCompositeUndoOperation = {}



---@class UConditionalToggleComponent : UActorComponent
---@field OnConditionalStateChanged FConditionalToggleComponentOnConditionalStateChanged
---@field OnConditionalStateChangedEx FConditionalToggleComponentOnConditionalStateChangedEx
---@field bEnabled boolean
---@field StartHour int32
---@field EndHour int32
---@field NewGamePlusConditional ENewGamePlusConditional
---@field GlobalVariableConditionals TArray<FGlobalVariableReferenceConditional>
---@field ConditionalLogic ELogicalOperator
---@field bToggleVisibility boolean
---@field bToggleCollision boolean
---@field DefaultCollisionType ECollisionEnabled::Type
UConditionalToggleComponent = {}

function UConditionalToggleComponent:OnRep_Enabled() end
---@param NewGamePlusVersion int32
function UConditionalToggleComponent:OnNewGamePlusChanged(NewGamePlusVersion) end
---@param NewHour int32
---@param NewDay int32
function UConditionalToggleComponent:OnHourChanged(NewHour, NewDay) end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param Instigator AActor
function UConditionalToggleComponent:OnGlobalVariableChanged(GlobalVariableID, VariableValue, Instigator) end
---@return boolean
function UConditionalToggleComponent:IsEnabled() end


---@class UConditionals : UConditionalLibrary
UConditionals = {}

---@return boolean
function UConditionals:TechChipAvailableForSpeaker() end
---@param Operator EComparisonOperator
---@param Count int32
---@return boolean
function UConditionals:SuperTechChipsTurnedIn(Operator, Count) end
---@param Operator EComparisonOperator
---@param Count int32
---@return boolean
function UConditionals:SuperTechChipsAvailableForTurnIn(Operator, Count) end
---@param Operator EComparisonOperator
---@param Count int32
---@return boolean
function UConditionals:RegularTechChipsTurnedIn(Operator, Count) end
---@param Operator EComparisonOperator
---@param Count int32
---@return boolean
function UConditionals:RegularTechChipsAvailableForTurnIn(Operator, Count) end
---@param Operator EComparisonOperator
---@param Count int32
---@return boolean
function UConditionals:NumInGameDaysPast(Operator, Count) end
---@return boolean
function UConditionals:IsWendellNearOwner() end
---@param Time ETimeOfDay
---@return boolean
function UConditionals:IsTimeOfDay(Time) end
---@param Operator EComparisonOperator
---@param Size int32
---@return boolean
function UConditionals:IsPartySize(Operator, Size) end
---@return boolean
function UConditionals:IsOwnerTheSpeaker() end
---@param ChipId ESuperChipId
---@return boolean
function UConditionals:IsLastSuperChipTurnedIn(ChipId) end
---@param CharacterA FGuid
---@param CharacterB EPlayerCharacterIdentity
---@return boolean
function UConditionals:IsInSpeakingRange(CharacterA, CharacterB) end
---@param Character EPlayerCharacterIdentity
---@return boolean
function UConditionals:IsInParty(Character) end
---@param Character EPlayerCharacterIdentity
---@return boolean
function UConditionals:IsInConversation(Character) end
---@return boolean
function UConditionals:IsInCombat() end
---@return boolean
function UConditionals:IsBuildDevBranch() end
---@return boolean
function UConditionals:IsBanterSourceTame() end
---@param Character FGuid
---@return boolean
function UConditionals:IsAnyPartyMemberInSpeakingRange(Character) end
---@return boolean
function UConditionals:HasPartyOrPersonalUpgradeBeenCollected() end
---@return boolean
function UConditionals:HasPartyDiscoveredRockCandy() end


---@class UContentFadeWidget : UGameUserWidget
---@field FadePanel UImage
---@field OnContentFadeComplete FContentFadeWidgetOnContentFadeComplete
---@field FadeTimeMax float
---@field StartFadedOut boolean
UContentFadeWidget = {}

function UContentFadeWidget:OnFadeComplete() end
---@param bFadeIn boolean
function UContentFadeWidget:BeginFade(bFadeIn) end


---@class UContextMenuEntryWidget : UGameUserWidget
---@field Button UButton
---@field Image UImage
---@field LocString FLocString
UContextMenuEntryWidget = {}

---@param bEnabled boolean
function UContextMenuEntryWidget:SetIsValid(bEnabled) end
---@param bEnabled boolean
function UContextMenuEntryWidget:OnSetIsValid(bEnabled) end


---@class UContextMenuWidget : UGameUserWidget
---@field OnOptionSelected FContextMenuWidgetOnOptionSelected
---@field ContextContainer UVerticalBox
---@field ContextMenuClass TSubclassOf<UContextMenuEntryWidget>
UContextMenuWidget = {}

function UContextMenuWidget:SetFocusFirst() end
---@param Action FGameplayTag
function UContextMenuWidget:NotifyOptionSelected(Action) end
---@param Data FContextEntry
---@return UContextMenuEntryWidget
function UContextMenuWidget:AddEntry(Data) end


---@class UControlMetadataLibrary : UBlueprintFunctionLibrary
UControlMetadataLibrary = {}

---@param MetaData FControlMetadata
---@param bDisplayingForGamepad boolean
---@return FLocString
function UControlMetadataLibrary:GetControlDisplayName(MetaData, bDisplayingForGamepad) end
---@param MetaData FControlMetadata
---@return int32
function UControlMetadataLibrary:GetConflictCategoryMask(MetaData) end
---@param InMapping FInputAxisKeyMapping
---@return FAnyControlMapping
function UControlMetadataLibrary:AxisMappingToAnyMapping(InMapping) end
---@param InMapping FInputActionKeyMapping
---@return FAnyControlMapping
function UControlMetadataLibrary:ActionMappingToAnyMapping(InMapping) end


---@class UControlOptions : UObject
---@field ControlSet EControlSet
UControlOptions = {}

function UControlOptions:UnbindGame() end
---@param bNewSprintToggle boolean
function UControlOptions:SetSprintToggle(bNewSprintToggle) end
---@param NewSensitivity float
function UControlOptions:SetSensitivityY(NewSensitivity) end
---@param NewSensitivity float
function UControlOptions:SetSensitivityX(NewSensitivity) end
---@param NewSensitivity FVector2D
function UControlOptions:SetSensitivity(NewSensitivity) end
---@param NewInvertY boolean
function UControlOptions:SetInvertY(NewInvertY) end
---@param NewInvertX boolean
function UControlOptions:SetInvertX(NewInvertX) end
---@param bNewGlideToggle boolean
function UControlOptions:SetGlideToggle(bNewGlideToggle) end
function UControlOptions:SetDefaults() end
---@param bNewCrouchToggle boolean
function UControlOptions:SetCrouchToggle(bNewCrouchToggle) end
function UControlOptions:Save() end
function UControlOptions:Load() end
---@return boolean
function UControlOptions:GetSprintToggle() end
---@return FVector2D
function UControlOptions:GetSensitivity() end
---@return boolean
function UControlOptions:GetInvertY() end
---@return boolean
function UControlOptions:GetInvertX() end
---@return boolean
function UControlOptions:GetGlideToggle() end
---@return boolean
function UControlOptions:GetCrouchToggle() end
function UControlOptions:BindGame() end


---@class UControllerDisconnectedWidget : UWindowWidget
UControllerDisconnectedWidget = {}


---@class UConversationComponent : UWidgetInteractComponent
---@field Conversation FConversationReference
---@field StartNode int32
UConversationComponent = {}

---@param InstigatedBy AActor
function UConversationComponent:StartInteractConversation(InstigatedBy) end
---@param InConversation FConversationReference
---@param InStartNode int32
---@param InstigatedBy AActor
---@param DisplayStyle EConversationNodeDisplayStyle
function UConversationComponent:StartConversation(InConversation, InStartNode, InstigatedBy, DisplayStyle) end
---@param InstigatedBy AActor
function UConversationComponent:EndConversation(InstigatedBy) end


---@class UConversationNavigatorComponent : UActorComponent
---@field OnConversationNodeShowEarly FConversationNavigatorComponentOnConversationNodeShowEarly
---@field OnConversationNodeShow FConversationNavigatorComponentOnConversationNodeShow
---@field OnConversationNodeHide FConversationNavigatorComponentOnConversationNodeHide
---@field OnConversationStart FConversationNavigatorComponentOnConversationStart
---@field OnConversationComplete FConversationNavigatorComponentOnConversationComplete
UConversationNavigatorComponent = {}

---@param OwnerActor AActor
---@param ConversationId FGuid
---@param NodeId int32
function UConversationNavigatorComponent:StartLocalConversation(OwnerActor, ConversationId, NodeId) end
---@return boolean
function UConversationNavigatorComponent:ShowConversation() end
---@param ConversationId FGuid
---@param Priority EConversationPlayPriority
---@return boolean
function UConversationNavigatorComponent:ShouldQueue(ConversationId, Priority) end
---@param ConversationId FGuid
---@param Priority EConversationPlayPriority
---@return boolean
function UConversationNavigatorComponent:ShouldInterrupt(ConversationId, Priority) end
---@param OwnerActor AActor
---@param ConversationId FGuid
---@param NodeId int32
---@param Priority EConversationPlayPriority
---@param DisplayStyle EConversationNodeDisplayStyle
function UConversationNavigatorComponent:ServerStartConversation(OwnerActor, ConversationId, NodeId, Priority, DisplayStyle) end
---@param Owner AActor
---@param ResponseNodeID int32
function UConversationNavigatorComponent:ServerSelectPlayerResponse(Owner, ResponseNodeID) end
---@param Owner AActor
function UConversationNavigatorComponent:ServerEndPlayerDrivenConversation(Owner) end
---@param ConversationId FGuid
function UConversationNavigatorComponent:ServerEndConversation(ConversationId) end
---@param Owner AActor
function UConversationNavigatorComponent:ServerAdvancePlayerDrivenConversation(Owner) end
---@param ConversationId FGuid
function UConversationNavigatorComponent:ServerAdvanceConversation(ConversationId) end
function UConversationNavigatorComponent:ServerAbortConversations() end
---@param Owner AActor
function UConversationNavigatorComponent:RemovePlayerDrivenConversation(Owner) end
---@param OwnerActor AActor
---@param ConversationId FGuid
---@param NodeId int32
---@param Priority EConversationPlayPriority
---@param DisplayStyle EConversationNodeDisplayStyle
function UConversationNavigatorComponent:QueueConversation(OwnerActor, ConversationId, NodeId, Priority, DisplayStyle) end
---@param ConversationId FGuid
---@param DisplayStyle EConversationNodeDisplayStyle
function UConversationNavigatorComponent:OnPausedConversationEnded(ConversationId, DisplayStyle) end
---@param ConversationId FGuid
---@param DisplayStyle EConversationNodeDisplayStyle
function UConversationNavigatorComponent:MulticastStartConversation(ConversationId, DisplayStyle) end
---@param OwnerActor ASurvivalCharacter
---@param NodeId int32
function UConversationNavigatorComponent:MulticastPlayChatterNode(OwnerActor, NodeId) end
---@param ConversationId FGuid
function UConversationNavigatorComponent:MulticastEndConversation(ConversationId) end
---@param OwnerActor AActor
---@param PlayerResponseLocString FLocString
---@param ConversationId FGuid
---@param NodeId int32
---@param ReadNodes FBitArrayWrapper
---@param ValidPlayerResponseNodeIds TArray<int32>
---@param DisplayStyle EConversationNodeDisplayStyle
function UConversationNavigatorComponent:MulticastAdvanceConversation(OwnerActor, PlayerResponseLocString, ConversationId, NodeId, ReadNodes, ValidPlayerResponseNodeIds, DisplayStyle) end
function UConversationNavigatorComponent:MulticastAbortChatter() end
---@param DisplayStyle EConversationNodeDisplayStyle
---@param ConversationNavigatorID FGuid
---@return boolean
function UConversationNavigatorComponent:IsPlayerDrivenNode(DisplayStyle, ConversationNavigatorID) end
---@return boolean
function UConversationNavigatorComponent:IsPlayerDrivenConversationAudioPlaying() end
---@param DisplayStyle EConversationNodeDisplayStyle
---@return boolean
function UConversationNavigatorComponent:IsPlayerDrivenConversation(DisplayStyle) end
---@param OwnerActor AActor
---@param ConversationId FGuid
---@return boolean
function UConversationNavigatorComponent:IsLocalConversationPlaying(OwnerActor, ConversationId) end
---@param Character ASurvivalCharacter
---@return boolean
function UConversationNavigatorComponent:IsCharacterSpeaking(Character) end
---@param Character ASurvivalCharacter
---@return USoundBase
function UConversationNavigatorComponent:GetSpeakingCharactersSound(Character) end
---@param Character ASurvivalCharacter
---@return UAudioComponent
function UConversationNavigatorComponent:GetSpeakingCharactersAudioComponent(Character) end
---@return TArray<FConversationPlayData>
function UConversationNavigatorComponent:GetConversationQueue() end
---@param OwnerActor AActor
---@param ConversationId FGuid
function UConversationNavigatorComponent:EndLocalConversation(OwnerActor, ConversationId) end
---@param ConversationId FGuid
---@param bViaStartNewConversation boolean
function UConversationNavigatorComponent:EndConversation(ConversationId, bViaStartNewConversation) end
function UConversationNavigatorComponent:EndActiveLocalConversation() end
---@param OwnerActor AActor
---@param PlayerResponse FLocString
---@param ConversationId FGuid
---@param NodeId int32
---@param DisplayStyle EConversationNodeDisplayStyle
function UConversationNavigatorComponent:AdvanceConversationAndUpdateReadNodes(OwnerActor, PlayerResponse, ConversationId, NodeId, DisplayStyle) end
---@param OwnerActor AActor
---@param PlayerResponseLocString FLocString
---@param ConversationId FGuid
---@param NodeId int32
---@param DisplayStyle EConversationNodeDisplayStyle
function UConversationNavigatorComponent:AdvanceConversation(OwnerActor, PlayerResponseLocString, ConversationId, NodeId, DisplayStyle) end
---@param Convo FActiveConversationData
function UConversationNavigatorComponent:AddPlayerDrivenConversation(Convo) end


---@class UConversationReferenceFuncLibrary : UBlueprintFunctionLibrary
UConversationReferenceFuncLibrary = {}

---@param Reference FConversationReference
---@return boolean
function UConversationReferenceFuncLibrary:IsValid(Reference) end
---@param ConversationId FGuid
---@param NodeId int32
---@param OwnerActor AActor
---@return FString
function UConversationReferenceFuncLibrary:BuildConversationString(ConversationId, NodeId, OwnerActor) end


---@class UConversationWidget : UInteractionWidget
---@field ConversationId FGuid
UConversationWidget = {}

---@param ResponseIndex int32
function UConversationWidget:SelectPlayerResponse(ResponseIndex) end
---@return TArray<FPlayerResponseData>
function UConversationWidget:GetPlayerResponses() end
function UConversationWidget:EndConversation() end
function UConversationWidget:ContinueConversation() end


---@class UConvoCameraComponent : UActorComponent
---@field HasCustomLookAtLocation boolean
---@field CustomLookAtLocationWS FVector
---@field DesiredCameraDistance float
---@field DesiredCameraAngleVertical float
---@field LookAtOffsetVertical float
---@field DesiredCameraAngleHorizontalFar float
---@field DesiredCameraAngleHorizontalNear float
---@field NearDistance float
---@field FarDistance float
---@field CameraCollisionInsetDistance float
UConvoCameraComponent = {}

---@return FVector
function UConvoCameraComponent:GetCameraInterestLocation() end


---@class UCozinessEvaluatorComponent : UActorComponent
---@field OnCozinessLevelChanged FCozinessEvaluatorComponentOnCozinessLevelChanged
---@field OnCozinessValueChanged FCozinessEvaluatorComponentOnCozinessValueChanged
---@field CozinessValue int32
---@field StructuralValue int32
UCozinessEvaluatorComponent = {}

---@param OldValue int32
function UCozinessEvaluatorComponent:OnRep_StructuralValue(OldValue) end
---@param OldValue int32
function UCozinessEvaluatorComponent:OnRep_CozinessValue(OldValue) end
---@return int32
function UCozinessEvaluatorComponent:GetCozinessValue() end
---@return int32
function UCozinessEvaluatorComponent:GetCozinessLevel() end


---@class UCraftingInterfaceWidget : UGameUserWidget
---@field WorkbenchTab UUserWidget
---@field ModelViewer UUserWidget
---@field CraftingRequirements UUserWidget
---@field WarningContainer UHorizontalBox
---@field CraftEquip UBottomButtonWidget
---@field Craft UBottomButtonWidget
---@field CraftMany UBottomButtonWidget
---@field PlaceBlueprint UBottomButtonWidget
---@field ActivateBuilderPawn UBottomButtonWidget
---@field HotCraft UBottomButtonWidget
---@field HotCraftMany UBottomButtonWidget
---@field JumpToEntry UBottomButtonWidget
---@field JumpToEntryRecipe UBottomButtonWidget
---@field ItemCount UTextBlock
---@field ItemDescriptionBox UGameUserWidget
---@field KnownRecipesUsedIn UGameUserWidget
---@field DangerLoopImage UImage
---@field CraftingRecipes UDataTable
---@field SelectedCraftingRecipe FDataTableRowHandle
---@field SelectedBuildingRecipe FDataTableRowHandle
---@field SelectedResource FDataTableRowHandle
---@field SelectedCraftingRequirement FDataTableRowHandle
---@field SelectedKnownRecipeUsedIn FDataTableRowHandle
---@field CraftingBuildingType FGameplayTag
UCraftingInterfaceWidget = {}

function UCraftingInterfaceWidget:OnSelectionChanged() end
function UCraftingInterfaceWidget:OnPageOpened() end


---@class UCreateLinkUndoOperation : UPlaceNewActorUndoOperation
UCreateLinkUndoOperation = {}


---@class UCreateLobbyWidget : UWindowWidget
UCreateLobbyWidget = {}


---@class UCreatureLODActor : UCharacterLODActor
---@field OnTameStateChanged FCreatureLODActorOnTameStateChanged
UCreatureLODActor = {}

---@return boolean
function UCreatureLODActor:IsTame() end
---@param Sender UTamedCreatureData
---@param NewState ETamedState
function UCreatureLODActor:HandleTameStateChanged(Sender, NewState) end
---@param DamageInfo FDamageInfo
function UCreatureLODActor:HandleSelfDeath(DamageInfo) end
---@return ETamedState
function UCreatureLODActor:GetTamedState() end
---@return UTamedCreatureData
function UCreatureLODActor:GetTamedCreatureData() end
---@return float
function UCreatureLODActor:GetHappinessNormalized() end
---@return TArray<FDataTableRowHandle>
function UCreatureLODActor:GetActivePetPassiveEffects() end


---@class UCreditsData : UDataAsset
---@field CreditGroups TArray<FCreditsGroup>
---@field CreditsBrushes TMap<FString, FSlateBrush>
---@field StringTableName FName
---@field CreditsFormattingData UCreditsFormattingData
UCreditsData = {}



---@class UCreditsFormattingData : UDataAsset
---@field TextHeaderLevels TArray<TSubclassOf<UBaseCreditsTextWidget>>
---@field ImageSpacing int32
---@field InitialSpacing int32
---@field PostSpacing int32
UCreditsFormattingData = {}



---@class UCreditsWidget : UWindowWidget
---@field CreditsClosedDelegate FCreditsWidgetCreditsClosedDelegate
---@field FadePanel UContentFadeWidget
---@field CancelAction FName
---@field AccelerateAction FName
---@field ScrollSpeed float
---@field AcceleratedScrollSpeed float
---@field WidgetsPerSecond int32
---@field CreditsAsset UCreditsData
---@field CreditsScrollBox UScrollBox
---@field CreditsVerticalBox UVerticalBox
---@field ProgressGroup UCharacterProgressGroup
---@field CreditsMusicGlobalVariable FGlobalVariableReference
---@field OnCreditsStartGlobalVariableValue int32
---@field OnCreditsSkippedGlobalVariableValue int32
---@field OnCreditsEndedGlobalVariableValue int32
---@field CreditsAssetToUse UCreditsData
UCreditsWidget = {}

---@param bForced boolean
function UCreditsWidget:StopCredits(bForced) end
function UCreditsWidget:StartCredits() end
---@param Player APlayerState
function UCreditsWidget:OnPlayerSkipped(Player) end
---@param bFadeIn boolean
function UCreditsWidget:OnFadeComplete(bFadeIn) end
function UCreditsWidget:OnCreditsStarted() end
function UCreditsWidget:OnCreditsEnded() end
function UCreditsWidget:OnAllPlayersSkipped() end
---@return boolean
function UCreditsWidget:IsPlaying() end


---@class UCustomBehaviorSelector : UGameUserWidget
---@field ComboBox UPhotoModeComboBoxBase
---@field CustomizingIndicator UWidget
---@field CustomizeBehaviorButton UGameUserWidget
---@field NoBehaviorString FLocString
---@field Options TArray<FDataTableRowHandle>
---@field SelectedBehavior FDataTableRowHandle
UCustomBehaviorSelector = {}

---@param BehaviorIndex int32
function UCustomBehaviorSelector:SetTitle(BehaviorIndex) end
---@param Selected boolean
function UCustomBehaviorSelector:SetSelectedElementVisibility(Selected) end
---@param IsCustomizing boolean
function UCustomBehaviorSelector:SetIsBeingCustomized(IsCustomizing) end
function UCustomBehaviorSelector:SetInputStyles() end
---@param Visible boolean
function UCustomBehaviorSelector:SetHoveredFocusedElementVisibility(Visible) end
---@param CanCustomize boolean
function UCustomBehaviorSelector:SetCustomizeElementState(CanCustomize) end
---@param SelectedItem FString
---@param SelectionType ESelectInfo::Type
function UCustomBehaviorSelector:OnSettingChangedComboBox(SelectedItem, SelectionType) end
---@param FocusedOrHovered boolean
function UCustomBehaviorSelector:OnFocusedHoveredChanged(FocusedOrHovered) end
function UCustomBehaviorSelector:OnCustomizeBehaviorInputReceived() end
---@return boolean
function UCustomBehaviorSelector:DoesCurrentSelectedBehaviorHaveCustomizations() end
---@param Broadcast boolean
function UCustomBehaviorSelector:ClearBehaviorSelection(Broadcast) end


---@class UCustomBehaviorsWindowWidget : UInteractionWidget
---@field CustomizationSubWidget UWidget
---@field CustomizationTitleText UWidget
---@field CustomizationTitleBackground UWidget
---@field CustomPropertiesWidget UCustomPropertiesGameWidget
---@field EventTitleText UPhotoModeTextBlock
---@field SettingsBox UVerticalBox
---@field AddInteractionButton UGameButtonWidget
---@field RemoveInteractionButton UGameButtonWidget
---@field AllEvents TArray<FDataTableRowHandle>
---@field AllBehaviors TArray<FDataTableRowHandle>
---@field ValidBehaviors TArray<FDataTableRowHandle>
---@field BehaviorSelectorWidgetClass TSubclassOf<UCustomBehaviorSelector>
---@field LastFocusedBehavior UCustomBehaviorSelector
---@field Connection TScriptInterface<ITriggerConnectionInterface>
---@field CurrentBehaviorCustomValues TArray<FCustomizedValue>
---@field CurrentEvent FDataTableRowHandle
UCustomBehaviorsWindowWidget = {}

function UCustomBehaviorsWindowWidget:ShowCustomizationsForSelectedBehavior() end
---@param Visible boolean
function UCustomBehaviorsWindowWidget:SetEventNextPreviousButtonsVisibility(Visible) end
function UCustomBehaviorsWindowWidget:RemoveLastFocusedBehaviorSlot() end
---@param PropertyName FName
---@param PropertyValue float
function UCustomBehaviorsWindowWidget:OnPropertyChanged(PropertyName, PropertyValue) end
---@param OldMode EEditMode
---@param NewMode EEditMode
function UCustomBehaviorsWindowWidget:OnEditModeChanged(OldMode, NewMode) end
---@param DestroyedConnection AActor
function UCustomBehaviorsWindowWidget:OnConnectionDestroyed(DestroyedConnection) end
---@param Widget UCustomBehaviorSelector
---@param Focused boolean
function UCustomBehaviorsWindowWidget:OnBehaviorFocusChanged(Widget, Focused) end
---@param Widget UCustomBehaviorSelector
function UCustomBehaviorsWindowWidget:OnBehaviorCustomizeInputPressed(Widget) end
---@param Widget UCustomBehaviorSelector
---@param SelectedIndex int32
---@param PreviousBehavior FDataTableRowHandle
---@param SelectedBehavior FDataTableRowHandle
function UCustomBehaviorsWindowWidget:OnBehaviorChanged(Widget, SelectedIndex, PreviousBehavior, SelectedBehavior) end
function UCustomBehaviorsWindowWidget:K2_InitializeWidget() end
function UCustomBehaviorsWindowWidget:HideCustomizations() end
function UCustomBehaviorsWindowWidget:GoToPreviousEvent() end
function UCustomBehaviorsWindowWidget:GoToNextEvent() end
---@return boolean
function UCustomBehaviorsWindowWidget:DoesCurrentSelectedBehaviorHaveCustomizations() end
---@return boolean
function UCustomBehaviorsWindowWidget:CanRemoveFocusedBehaviorSlot() end
---@return boolean
function UCustomBehaviorsWindowWidget:CanAddBehaviorSlot() end
---@param InitialIndex int32
---@param AddToConnection boolean
---@return UCustomBehaviorSelector
function UCustomBehaviorsWindowWidget:AddBehaviorSlot(InitialIndex, AddToConnection) end


---@class UCustomPropertiesGameWidget : UGameUserWidget
---@field SettingsBox UVerticalBox
---@field CustomPropertyWidgetClass TSubclassOf<UCustomPropertyWidget>
---@field OnCustomPropertyChanged FCustomPropertiesGameWidgetOnCustomPropertyChanged
---@field CachedInterface TScriptInterface<ICustomPropertyInterface>
UCustomPropertiesGameWidget = {}

---@param PropertyName FName
---@param PropertyValue float
function UCustomPropertiesGameWidget:OnInputChanged(PropertyName, PropertyValue) end
---@param Property FName
---@return UCustomPropertyWidget
function UCustomPropertiesGameWidget:GetWidgetForProperty(Property) end


---@class UCustomPropertiesWindowWidget : UWindowWidget
---@field container UCanvasPanel
---@field SettingsBox UVerticalBox
---@field CustomPropertyWidgetClass TSubclassOf<UCustomPropertyWidget>
---@field OnCustomPropertyChanged FCustomPropertiesWindowWidgetOnCustomPropertyChanged
UCustomPropertiesWindowWidget = {}

function UCustomPropertiesWindowWidget:ResetToDefaults() end
function UCustomPropertiesWindowWidget:Preview() end
function UCustomPropertiesWindowWidget:OnPropertiesCopied() end
---@param PropertyName FName
---@param PropertyValue float
function UCustomPropertiesWindowWidget:OnInputChanged(PropertyName, PropertyValue) end
---@param OldMode EEditMode
---@param NewMode EEditMode
function UCustomPropertiesWindowWidget:OnEditModeChanged(OldMode, NewMode) end
---@param Property FName
---@return UCustomPropertyWidget
function UCustomPropertiesWindowWidget:GetWidgetForProperty(Property) end


---@class UCustomPropertyBehaviorBase : UObject
UCustomPropertyBehaviorBase = {}


---@class UCustomPropertyBehavior_ModifyExecution_RunEveryXSlider : UCustomPropertyBehaviorBase
UCustomPropertyBehavior_ModifyExecution_RunEveryXSlider = {}


---@class UCustomPropertyBehavior_Poses_Pose : UCustomPropertyBehaviorBase
UCustomPropertyBehavior_Poses_Pose = {}


---@class UCustomPropertyBehavior_Poses_PoseTimeSlider : UCustomPropertyBehaviorBase
UCustomPropertyBehavior_Poses_PoseTimeSlider = {}


---@class UCustomPropertyBehavior_TriggerGate_ComparisonSlider : UCustomPropertyBehaviorBase
UCustomPropertyBehavior_TriggerGate_ComparisonSlider = {}


---@class UCustomPropertyComponent : UActorComponent
---@field CustomizationPoseSet UPhotoModePoseData
---@field HasCustomLookAtLocation boolean
---@field CustomLookAtLocationWS FVector
---@field OnCustomPropertyValueChanged FCustomPropertyComponentOnCustomPropertyValueChanged
---@field OnPreview FCustomPropertyComponentOnPreview
---@field OnEndPreview FCustomPropertyComponentOnEndPreview
---@field OnUserInterfaceInitialized FCustomPropertyComponentOnUserInterfaceInitialized
---@field OnIsCustomizingChanged FCustomPropertyComponentOnIsCustomizingChanged
---@field CustomPropertyData UCustomPropertyDataAsset
---@field CustomizedValuesArray TArray<FCustomizedValue>
---@field IsInUse boolean
---@field CustomizingPlayer ASurvivalPlayerCharacter
---@field CanPreview boolean
---@field DesiredCameraDistance float
---@field AcceptableCameraDistance float
---@field DesiredCameraAngleVertical float
---@field CameraCollisionInsetDistance float
UCustomPropertyComponent = {}

---@param InCustomizingPlayer ASurvivalPlayerCharacter
---@param InUse boolean
function UCustomPropertyComponent:SetIsInUse(InCustomizingPlayer, InUse) end
---@param Widget UCustomPropertiesWindowWidget
function UCustomPropertyComponent:OnUIReady(Widget) end
function UCustomPropertyComponent:OnRep_IsInUseCustomizingPlayer() end
---@param PreviousCustomizedValuesArray TArray<FCustomizedValue>
function UCustomPropertyComponent:OnRep_CustomizedValuesArray(PreviousCustomizedValuesArray) end
---@param OldMode EEditMode
---@param NewMode EEditMode
function UCustomPropertyComponent:OnEditModeChanged(OldMode, NewMode) end
---@param PropertyName FName
---@param PropertyValue float
function UCustomPropertyComponent:NativeOnPropertyChanged(PropertyName, PropertyValue) end
---@param Property FName
---@return boolean
function UCustomPropertyComponent:IsPropertyCustomized(Property) end
---@return boolean
function UCustomPropertyComponent:HasVisibleProperties() end
---@param PropertyName FName
---@return boolean
function UCustomPropertyComponent:HasProperty(PropertyName) end
---@return boolean
function UCustomPropertyComponent:HasCustomProperties() end
---@return boolean
function UCustomPropertyComponent:GetIsInUse() end
---@param PropertyName FName
---@param AsFloat float
---@param AsInt int32
---@param AsBool boolean
function UCustomPropertyComponent:GetCustomPropertyValue(PropertyName, AsFloat, AsInt, AsBool) end
---@param PropertyName FName
---@return UDataTable
function UCustomPropertyComponent:GetCustomPropertyDropdownData(PropertyName) end
---@return FVector
function UCustomPropertyComponent:GetCameraInterestLocation() end
---@return boolean
function UCustomPropertyComponent:CanPreviewProperties() end
---@return boolean
function UCustomPropertyComponent:CanModifyAnyProperties() end
---@param PropertyName FName
---@return boolean
function UCustomPropertyComponent:CanCopyProperty(PropertyName) end


---@class UCustomPropertyComponentLiteData : UComponentLiteData
UCustomPropertyComponentLiteData = {}


---@class UCustomPropertyDataAsset : UDataAsset
---@field CustomProperties TArray<FCustomProperty>
---@field CustomPropertyRowHandle FDataTableRowHandle
---@field AssociatedPoseData UPhotoModePoseData
UCustomPropertyDataAsset = {}



---@class UCustomPropertyLODComponent : UBaseLODComponent
UCustomPropertyLODComponent = {}


---@class UCustomPropertyWidget : UGameUserWidget
---@field Overlay UOverlay
---@field container UHorizontalBox
---@field SettingTitleText UPhotoModeTextBlock
---@field Slider UPhotoModeSliderBase
---@field CheckBoxSizeBox USizeBox
---@field CheckBox UPhotoModeCheckBoxBase
---@field ComboBox UPhotoModeComboBoxBase
---@field ValueText UTextBlock
---@field CachedPropertyInfo FCustomProperty
---@field CachedInterface TScriptInterface<ICustomPropertyInterface>
UCustomPropertyWidget = {}

---@param State ECustomPropertyWidgetState
function UCustomPropertyWidget:UpdateWidgetState(State) end
---@param InputType ECustomPropertyInputType
function UCustomPropertyWidget:SetInputStyles(InputType) end
---@param Enabled boolean
function UCustomPropertyWidget:SetEnabledState(Enabled) end
---@param InOptions TArray<FLocString>
function UCustomPropertyWidget:SetComboBoxOptions(InOptions) end
function UCustomPropertyWidget:ResetToDefaults() end
---@param Value float
function UCustomPropertyWidget:OnSliderValueChanged(Value) end
---@param Value float
function UCustomPropertyWidget:OnSettingChangedSlider(Value) end
---@param SelectedItem FString
---@param SelectionType ESelectInfo::Type
function UCustomPropertyWidget:OnSettingChangedComboBox(SelectedItem, SelectionType) end
---@param bChecked boolean
function UCustomPropertyWidget:OnSettingChangedCheckBox(bChecked) end
---@param Enabled boolean
function UCustomPropertyWidget:OnEnabledChanged(Enabled) end
---@param InValue float
---@return float
function UCustomPropertyWidget:GetAdjustedSliderValue(InValue) end


---@class UCustomizeInteractionComponent : UActorComponent
---@field WidgetClass TSubclassOf<UCustomPropertiesWindowWidget>
---@field BehaviorsWidgetClass TSubclassOf<UCustomBehaviorsWindowWidget>
---@field OnPropertiesCopied FCustomizeInteractionComponentOnPropertiesCopied
UCustomizeInteractionComponent = {}

---@param CustomPropertyComponent UCustomPropertyComponent
function UCustomizeInteractionComponent:ShowCustomizationUI(CustomPropertyComponent) end
---@param Connection TScriptInterface<ITriggerConnectionInterface>
function UCustomizeInteractionComponent:ShowBehaviorCustomizationUI(Connection) end
---@param CustomizingPlayer ASurvivalPlayerCharacter
---@param Component UCustomPropertyComponent
---@param InUse boolean
function UCustomizeInteractionComponent:ServerSetCustomPropertyComponentInUse(CustomizingPlayer, Component, InUse) end
---@param CustomizingPlayer ASurvivalPlayerCharacter
---@param Connection AActor
---@param InUse boolean
function UCustomizeInteractionComponent:ServerSetConnectionInUse(CustomizingPlayer, Connection, InUse) end
---@param Component UCustomPropertyComponent
---@param Values TArray<FCustomizedValue>
---@param PropertyName FName_NetCrc
function UCustomizeInteractionComponent:ServerPasteTo(Component, Values, PropertyName) end
---@param Connection TScriptInterface<ITriggerConnectionInterface>
---@param Values TArray<FSelectedEventBehaviorData>
function UCustomizeInteractionComponent:ServerPasteBehaviorsTo(Connection, Values) end
---@param CustomPropertyComponent UCustomPropertyComponent
---@param PropertyName FName_NetCrc
---@param PropertyValue float
function UCustomizeInteractionComponent:ServerOnCustomPropertyComponentChanged(CustomPropertyComponent, PropertyName, PropertyValue) end
---@param Component UCustomPropertyComponent
---@param PropertyName FName
function UCustomizeInteractionComponent:PasteTo(Component, PropertyName) end
---@param Connection TScriptInterface<ITriggerConnectionInterface>
function UCustomizeInteractionComponent:PasteBehaviorsTo(Connection) end
---@param CustomPropertyComponent UCustomPropertyComponent
---@param PropertyName FName
---@param PropertyValue float
function UCustomizeInteractionComponent:OnCustomPropertyComponentChanged(CustomPropertyComponent, PropertyName, PropertyValue) end
---@param WindowWidget UWindowWidget
function UCustomizeInteractionComponent:OnCustomizeUIClosed(WindowWidget) end
---@return TScriptInterface<ITriggerConnectionInterface>
function UCustomizeInteractionComponent:GetCustomizingConnection() end
---@return UCustomPropertyComponent
function UCustomizeInteractionComponent:GetCustomizingComponent() end
---@param Component UCustomPropertyComponent
function UCustomizeInteractionComponent:CopyFrom(Component) end
---@param Connection TScriptInterface<ITriggerConnectionInterface>
function UCustomizeInteractionComponent:CopyBehaviorsFrom(Connection) end
---@param Connection TScriptInterface<ITriggerConnectionInterface>
---@return boolean
function UCustomizeInteractionComponent:CanPasteBehaviors(Connection) end
---@param Component UCustomPropertyComponent
---@param PropertyName FName
---@return boolean
function UCustomizeInteractionComponent:CanPaste(Component, PropertyName) end


---@class UCutsceneComponent : UActorComponent
---@field OnCutsceneEndServer FCutsceneComponentOnCutsceneEndServer
---@field OnSessionCutsceneStateChanged FCutsceneComponentOnSessionCutsceneStateChanged
---@field OnCutsceneCameraCut FCutsceneComponentOnCutsceneCameraCut
---@field OnCutsceneRequestBlendTriggerOverride FCutsceneComponentOnCutsceneRequestBlendTriggerOverride
---@field OnCutsceneRequestDefaultBlendTrigger FCutsceneComponentOnCutsceneRequestDefaultBlendTrigger
---@field OnCutsceneRequestTimeOfDayOverride FCutsceneComponentOnCutsceneRequestTimeOfDayOverride
---@field IsCutsceneActive boolean
---@field MovieWidget TSoftClassPtr<UMaineMovieWidget>
---@field MovieSoundMix USoundMix
---@field ActiveMovieWidget UMaineMovieWidget
---@field ActiveCutscenes TArray<UActiveCutscene>
---@field CustomSoundMixes TArray<USoundMix>
---@field MovieLanguageTrackIndex TMap<ESpokenLanguageSetting, int32>
UCutsceneComponent = {}

---@param CutsceneData UCutsceneDataAsset
---@param TriggerActor AActor
function UCutsceneComponent:StartCutscene(CutsceneData, TriggerActor) end
function UCutsceneComponent:ResumeActiveCutscenes() end
---@param Enabled boolean
---@param TimeOfDay float
function UCutsceneComponent:RequestTimeOfDayOverride(Enabled, TimeOfDay) end
---@param Enabled boolean
function UCutsceneComponent:RequestDefaultBlendTrigger(Enabled) end
---@param Enabled boolean
---@param BlendAttributes FCutsceneBlendTriggerAttributes
function UCutsceneComponent:RequestBlendTriggerOverride(Enabled, BlendAttributes) end
---@param InSoundMixModifier USoundMix
function UCutsceneComponent:PushCustomSoundMix(InSoundMixModifier) end
---@param InSoundMixModifier USoundMix
function UCutsceneComponent:PopCustomSoundMix(InSoundMixModifier) end
---@param InMediaObject UObject
---@param Delay float
function UCutsceneComponent:PlayMovie(InMediaObject, Delay) end
function UCutsceneComponent:PauseActiveCutscenes() end
function UCutsceneComponent:OnRep_IsCutsceneActive() end
---@param Sender UWindowWidget
function UCutsceneComponent:OnMovieWidgetClosed(Sender) end
---@param bWasSkipped boolean
function UCutsceneComponent:OnMovieFinished(bWasSkipped) end
---@param Camera UCameraComponent
function UCutsceneComponent:OnCutsceneCameraChange(Camera) end
---@param CutsceneData UCutsceneDataAsset
---@param TriggerActor AActor
function UCutsceneComponent:MulticastStartCutscene(CutsceneData, TriggerActor) end
---@return ALevelSequenceActor
function UCutsceneComponent:GetCurrentSequence() end


---@class UCutsceneDataAsset : UDataAsset
---@field LevelSequencePath FSoftObjectPath
---@field TargetType ECutsceneTargetType
---@field bProvideInitialFOV boolean
---@field InitialFOV float
---@field bHidePlayerCharacters boolean
---@field SoundMix USoundMix
UCutsceneDataAsset = {}



---@class UDamageInfoBlueprintFunction : UBlueprintFunctionLibrary
UDamageInfoBlueprintFunction = {}

---@param DamageInfo FDamageInfo
---@param Flag EDamageInfoFlags
---@return boolean
function UDamageInfoBlueprintFunction:HasDamageFlag(DamageInfo, Flag) end
---@param DamageInfo FDamageInfo
---@return UBaseLODActor
function UDamageInfoBlueprintFunction:GetLODActorDamageSource(DamageInfo) end
---@param OwnerPlayerState APlayerState
---@param DeathInfo FDeathInfo
---@param OutText FString
---@param bForceDeathMessage boolean
function UDamageInfoBlueprintFunction:GetDeathMessage(OwnerPlayerState, DeathInfo, OutText, bForceDeathMessage) end
---@param DamageInfo FDamageInfo
---@return AActor
function UDamageInfoBlueprintFunction:GetActorDamageSource(DamageInfo) end


---@class UDeathCountdownWidget : UGameUserWidget
---@field RenarrateInterval float
UDeathCountdownWidget = {}

function UDeathCountdownWidget:NotifyElementDeactivated() end
function UDeathCountdownWidget:NotifyElementActivated() end


---@class UDefensePointComponent : UActorComponent
---@field OnDefensePointActivated FDefensePointComponentOnDefensePointActivated
---@field OnChargeValueChanged FDefensePointComponentOnChargeValueChanged
---@field OnDefensePointComplete FDefensePointComponentOnDefensePointComplete
---@field OnDefensePointStateChanged FDefensePointComponentOnDefensePointStateChanged
---@field OnDefensePointBuildingHealthChanged FDefensePointComponentOnDefensePointBuildingHealthChanged
---@field InteractText FLocString
---@field ProgressText FLocString
---@field SuccessText FLocString
---@field CreaturesStillActiveText FLocString
---@field RepairsNeededText FLocString
---@field FailsConditionalsText FLocString
---@field DisplayUniqueName FLocString
---@field DisplayDifficulty EDefensePointDifficulty
---@field DisplayedEnemyIcons TArray<FDefensePointEnemyType>
---@field DisplayScienceReward int32
---@field DefensePoints TArray<FDefensePointTarget>
---@field WaveEncounters TArray<FDefensePointWave>
---@field bQuestCritical boolean
---@field DeinstanceRadius float
---@field ChargeFailType EDefensePointChargeFailType
---@field ChargeInterval float
---@field ChargePerTarget float
---@field MaxCharge float
---@field CurrentCharge float
---@field GlobalVariableConditional FGlobalVariableReferenceConditional
---@field CompletionGlobalVariable FGlobalVariableReference
---@field CompletionValue int32
---@field OverrideMusicTrackMild UMusicTrackData
---@field OverrideMusicTrackIntense UMusicTrackData
---@field ChargePercentageToStartMusicTrackIntense float
---@field UnderAttackChatterDelay float
---@field CurrentState EDefensePointState
---@field TotalActiveCreatures int32
---@field CurrentActiveCreatures int32
---@field bPassesConditionals boolean
---@field RewardData FDataTableRowHandle
---@field RepairScienceDeltaReward int32
---@field AttackAreas TArray<ADefensePointPingVolume>
UDefensePointComponent = {}

---@param PreviousState EDefensePointState
function UDefensePointComponent:OnRep_CurrentState(PreviousState) end
function UDefensePointComponent:OnRep_CurrentCharge() end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param Instigator AActor
function UDefensePointComponent:OnGlobalVariableChanged(GlobalVariableID, VariableValue, Instigator) end
function UDefensePointComponent:OnEncounterSpawnKilled() end
function UDefensePointComponent:OnEncounterSpawnDestroyed() end
---@param DamageSource AActor
function UDefensePointComponent:OnEncounterComplete(DamageSource) end
---@param OldMode EEditMode
---@param NewMode EEditMode
function UDefensePointComponent:OnEditModeChanged(OldMode, NewMode) end
---@param SourceHealthComponent UHealthComponent
---@param NewHealth float
---@param OldHealth float
function UDefensePointComponent:OnDefensePointHealthChanged(SourceHealthComponent, NewHealth, OldHealth) end
function UDefensePointComponent:OnDeactivated() end
function UDefensePointComponent:OnActivated() end
---@return boolean
function UDefensePointComponent:IsQuestCritical() end
---@param TargetBuilding ABuilding
---@return boolean
function UDefensePointComponent:IsDefensePointValid(TargetBuilding) end
---@return float
function UDefensePointComponent:GetEnemyProgress() end
---@return EDefensePointState
function UDefensePointComponent:GetDefensePointState() end
---@return TArray<FDefensePointTarget>
function UDefensePointComponent:GetDefensePoints() end
---@return float
function UDefensePointComponent:GetChargeRatio() end
function UDefensePointComponent:DeactivateEncounter() end
---@return boolean
function UDefensePointComponent:CanActivateEncounter() end
---@param Instigator AActor
---@return boolean
function UDefensePointComponent:ActivateEncounter(Instigator) end


---@class UDefenseScalingData : UDataAsset
---@field MaxHealthMultipliers TArray<float>
---@field MaxStunMultipliers TArray<float>
---@field StunDurationMultipliers TArray<float>
---@field DamageResistanceMultipliers TArray<float>
UDefenseScalingData = {}

---@param PlayerCount int32
---@return float
function UDefenseScalingData:GetStunDurationMultiplier(PlayerCount) end
---@param PlayerCount int32
---@return float
function UDefenseScalingData:GetMaxStunMultiplier(PlayerCount) end
---@param PlayerCount int32
---@return float
function UDefenseScalingData:GetMaxHealthMultiplier(PlayerCount) end
---@param PlayerCount int32
---@return float
function UDefenseScalingData:GetDamageResistanceMultiplier(PlayerCount) end


---@class UDestroyActorUndoOperation : UBaseUndoOperation
UDestroyActorUndoOperation = {}


---@class UDestroyLinkUndoOperation : UDestroyActorUndoOperation
UDestroyLinkUndoOperation = {}


---@class UDirectionalAnimEffect : UBaseAnimEffect
---@field DirectionalAnims TMap<EHitMotionType, TSoftObjectPtr<UAnimMontage>>
---@field AngleThreshold float
UDirectionalAnimEffect = {}



---@class UDropletContentsComponent : UActorComponent
---@field bOverrideVolume boolean
---@field Volume float
---@field bOverrideMaxDimension boolean
---@field MaxDimension float
---@field OnAbsorbedByDroplet FDropletContentsComponentOnAbsorbedByDroplet
---@field OnEjectedFromDroplet FDropletContentsComponentOnEjectedFromDroplet
UDropletContentsComponent = {}



---@class UDurabilityFillWidget : UGameUserWidget
---@field DurabilityBar UProgressBar
---@field DurafillInner UImage
---@field DurabilityPercentage float
---@field MinStepPercentage float
UDurabilityFillWidget = {}

function UDurabilityFillWidget:UpdateBarFillColorNative() end
---@param Value float
function UDurabilityFillWidget:SetDurabilityValueNative(Value) end


---@class UDynamicMaterialCache : UObject
---@field DynamicColorMap TMap<FDynamicMaterialColorKey, UMaterialInstanceDynamic>
UDynamicMaterialCache = {}

---@param BaseMaterial UMaterialInterface
---@param ParameterName FName
---@param Color FLinearColor
---@return UMaterialInstanceDynamic
function UDynamicMaterialCache:GetDynamicMaterialWithColor(BaseMaterial, ParameterName, Color) end
---@param BaseMaterial UMaterialInterface
---@param ParameterName FName
---@param Color FLinearColor
---@param Component UMeshComponent
---@param MaterialIndex int32
---@return UMaterialInstanceDynamic
function UDynamicMaterialCache:AssignDynamicMaterialWithColor(BaseMaterial, ParameterName, Color, Component, MaterialIndex) end


---@class UEQSRequest : UDataAsset
---@field QueryConfigDynamicOverrides TArray<FAIDynamicParam_Maine>
---@field QueryTemplate UEnvQuery
---@field QueryConfig TArray<FAIDynamicParam_Maine>
---@field RunMode EEnvQueryRunMode::Type
UEQSRequest = {}



---@class UEditModeManagerComponent : UActorComponent
---@field OnReturnToEditModeRequested FEditModeManagerComponentOnReturnToEditModeRequested
---@field OnPreEditModeChanged FEditModeManagerComponentOnPreEditModeChanged
---@field OnEditModeChanged FEditModeManagerComponentOnEditModeChanged
---@field IsTakingThumbnail boolean
---@field PlaygroundsPlayerCount EPlaygroundsPlayerCount
---@field PlaygroundsGenreTags TArray<EPlaygroundsGenreTag>
---@field PlaygroundsAllowUserEditing boolean
---@field PlaygroundsDescription FString
---@field PlaygroundsDescriptionFiltered FString
---@field ThumbnailWidth int32
---@field ThumbnailHeight int32
---@field JPGQuality int32
---@field ThumbnailImage UTexture2D
---@field UndoHistoryCapacity int32
---@field SetEditModeDelaySeconds float
---@field EditMode EEditMode
---@field PendingChangeData FPendingEditModeChangeData
---@field EditModeSaveData FEditModeSaveLoadData
---@field UndoHistory TArray<UBaseUndoOperation>
UEditModeManagerComponent = {}

---@param Description FString
function UEditModeManagerComponent:SetPlaygroundsDescription(Description) end
---@param PlayerCount EPlaygroundsPlayerCount
function UEditModeManagerComponent:SetPlayerCount(PlayerCount) end
---@param Value boolean
function UEditModeManagerComponent:SetIsTakingThumbnail(Value) end
---@param Tags TArray<EPlaygroundsGenreTag>
function UEditModeManagerComponent:SetGenreTags(Tags) end
---@param Mode EEditMode
---@param Instigator ASurvivalPlayerState
function UEditModeManagerComponent:SetEditMode(Mode, Instigator) end
---@param Allow boolean
function UEditModeManagerComponent:SetAllowUserEditing(Allow) end
---@param GameMode AGameModeBase
---@param NewPlayer APlayerController
function UEditModeManagerComponent:ServerOnPostLogin(GameMode, NewPlayer) end
---@param NewPawn APawn
function UEditModeManagerComponent:ServerOnPlayerPossessedPawn(NewPawn) end
---@param Player AActor
---@param Target AEquipmentDisplayBuilding
---@return FUndoInitializationHandle
function UEditModeManagerComponent:RecordUndoEquipmentDisplay(Player, Target) end
---@param Operation UBaseUndoOperation
function UEditModeManagerComponent:PopIfEmpty(Operation) end
---@param OldMode EEditMode
function UEditModeManagerComponent:OnRep_EditMode(OldMode) end
---@param Actor AActor
---@param InTransform FTransform
function UEditModeManagerComponent:MulticastUndoRelocation(Actor, InTransform) end
---@param Value boolean
function UEditModeManagerComponent:MulticastSetIsTakingThumbnail(Value) end
function UEditModeManagerComponent:MulticastNotifyEditModePending() end
---@param Instigator ASurvivalPlayerState
---@param NewMode EEditMode
function UEditModeManagerComponent:MulticastNotifyEditModeChanged(Instigator, NewMode) end
---@param Tag EPlaygroundsGenreTag
---@return boolean
function UEditModeManagerComponent:HasGenreTag(Tag) end
---@return boolean
function UEditModeManagerComponent:HasAssignedGenreTag() end
---@return UTexture2D
function UEditModeManagerComponent:GetPlaygroundThumbnail() end
---@return FString
function UEditModeManagerComponent:GetPlaygroundsDescriptionUnfiltered() end
---@return FString
function UEditModeManagerComponent:GetPlaygroundsDescription() end
---@return EPlaygroundsPlayerCount
function UEditModeManagerComponent:GetPlayerCount() end
---@return boolean
function UEditModeManagerComponent:GetIsTakingThumbnail() end
---@return TArray<EPlaygroundsGenreTag>
function UEditModeManagerComponent:GetGenreTags() end
---@return EEditMode
function UEditModeManagerComponent:GetEditMode() end
---@return boolean
function UEditModeManagerComponent:GetAllowUserEditing() end
function UEditModeManagerComponent:CreateTexture() end
---@param Tag EPlaygroundsGenreTag
function UEditModeManagerComponent:AddGenreTag(Tag) end


---@class UEncounterComponent : USceneComponent
UEncounterComponent = {}


---@class UEncounterManagerComponent : UActorComponent
UEncounterManagerComponent = {}


---@class UEnemyHealthWidget : UGameUserWidget
---@field Show UWidgetAnimation
---@field HealthBar UProgressBar
---@field PipPanel UCanvasPanel
---@field HpSizer USizeBox
---@field BossNugget UImage
---@field HealthPipWidgetClass TSubclassOf<UUserWidget>
---@field TargetActor ASurvivalCharacter
---@field HealthComponent UHealthComponent
---@field bIsFading boolean
---@field bShowing boolean
---@field HideDelay float
---@field CachedMaxHealth float
---@field MaxPipCount int32
UEnemyHealthWidget = {}

function UEnemyHealthWidget:ShowBarNative() end
---@param SurvivalCharacter ASurvivalCharacter
---@return boolean
function UEnemyHealthWidget:ShouldShowHealthBarNative(SurvivalCharacter) end
function UEnemyHealthWidget:RefreshHealthWidthAndPipsNative() end
function UEnemyHealthWidget:HideBarNative() end
---@param SurvivalCharacter ASurvivalCharacter
---@return int32
function UEnemyHealthWidget:GetTargetPriorityNative(SurvivalCharacter) end
function UEnemyHealthWidget:EvaluateVisibilityNative() end


---@class UEnvQueryContext_QuerierLocation : UEnvQueryContext
UEnvQueryContext_QuerierLocation = {}


---@class UEnvQueryGenerator_FoliageKeys : UEnvQueryGenerator
---@field SearchRadius FAIDataProviderFloatValue
---@field SearchCenter TSubclassOf<UEnvQueryContext>
UEnvQueryGenerator_FoliageKeys = {}



---@class UEnvQueryGenerator_Sphere : UEnvQueryGenerator_ProjectedPoints
---@field InnerRadius FAIDataProviderFloatValue
---@field OuterRadius FAIDataProviderFloatValue
---@field NumberOfRings FAIDataProviderIntValue
---@field PointsPerRing FAIDataProviderIntValue
---@field ArcAngle FAIDataProviderFloatValue
---@field Center TSubclassOf<UEnvQueryContext>
UEnvQueryGenerator_Sphere = {}



---@class UEnvQueryItemType_FoliageKey : UEnvQueryItemType_VectorBase
UEnvQueryItemType_FoliageKey = {}


---@class UEnvQueryTest_AllowableHeight : UEnvQueryTest
UEnvQueryTest_AllowableHeight = {}


---@class UEnvQueryTest_BaseDistance : UEnvQueryTest
---@field bCheckWaveTargetBase boolean
---@field bCheckAllBases boolean
UEnvQueryTest_BaseDistance = {}



---@class UEnvQueryTest_Height : UEnvQueryTest
---@field DistanceTo TSubclassOf<UEnvQueryContext>
UEnvQueryTest_Height = {}



---@class UEnvQueryTest_IsClimbable : UEnvQueryTest
---@field ClimbingSizeProvider FAIDataProviderStructValue
UEnvQueryTest_IsClimbable = {}



---@class UEnvQueryTest_IsClimbingRole : UEnvQueryTest
---@field Role FGameplayTag
UEnvQueryTest_IsClimbingRole = {}



---@class UEnvQueryTest_IsInJumpRange : UEnvQueryTest
---@field From TSubclassOf<UEnvQueryContext>
---@field To TSubclassOf<UEnvQueryContext>
UEnvQueryTest_IsInJumpRange = {}



---@class UEnvQueryTest_IsJumpClear : UEnvQueryTest
---@field From TSubclassOf<UEnvQueryContext>
---@field To TSubclassOf<UEnvQueryContext>
UEnvQueryTest_IsJumpClear = {}



---@class UEnvQueryTest_PartyDistance : UEnvQueryTest
---@field TestMode EPartyDistanceType
UEnvQueryTest_PartyDistance = {}



---@class UEnvQueryTest_WalkWaveReachable : UEnvQueryTest
---@field IsFlyingCreatureWave FAIDataProviderBoolValue
---@field bUseVolumes boolean
---@field PondLocation FVector
---@field PondRightVector FVector
---@field PondMinMaxY FVector2D
UEnvQueryTest_WalkWaveReachable = {}



---@class UEnvQueryTest_WaveHeightBand : UEnvQueryTest
---@field IsFlyingCreatureWave FAIDataProviderBoolValue
UEnvQueryTest_WaveHeightBand = {}



---@class UEquipmentComponent : UActorComponent
---@field OnEquipmentChanged FEquipmentComponentOnEquipmentChanged
---@field OnEquipmentChangedSelf FEquipmentComponentOnEquipmentChangedSelf
---@field OnEquipmentItemChanged FEquipmentComponentOnEquipmentItemChanged
---@field OnEquipmentItemEnhanced FEquipmentComponentOnEquipmentItemEnhanced
---@field OnEquipmentVisualsChanged FEquipmentComponentOnEquipmentVisualsChanged
---@field OnItemBroken FEquipmentComponentOnItemBroken
---@field OnItemPowerChanged FEquipmentComponentOnItemPowerChanged
---@field OnItemPowerDepleted FEquipmentComponentOnItemPowerDepleted
---@field OnEquipmentChangeFailureFromFullInventory FEquipmentComponentOnEquipmentChangeFailureFromFullInventory
---@field OnEquipmentSlotChanged FEquipmentComponentOnEquipmentSlotChanged
---@field bHasMainHand boolean
---@field bHasOffHand boolean
---@field bHasHead boolean
---@field bHasChest boolean
---@field bHasArms boolean
---@field bHasLegs boolean
---@field bHasGlider boolean
---@field MainHand UItem
---@field OffHand UItem
---@field Head UItem
---@field Chest UItem
---@field Arms UItem
---@field Legs UItem
---@field Glider UItem
---@field PreviousMainHandItem UItem
---@field PreviousOffHandItem UItem
---@field OwnerCharacter ASurvivalCharacter
---@field InventoryComponent UInventoryComponent
---@field HaulingComponent UHaulingComponent
---@field SerializedEquippedItems TArray<UItem>
UEquipmentComponent = {}

---@param Handle FHideSlotHandle
function UEquipmentComponent:UnhideSlot(Handle) end
---@param Item UItem
---@param Socket FName
---@param Priority EItemVisualsPriority
function UEquipmentComponent:SpawnVisuals(Item, Socket, Priority) end
---@param Slot EEquipmentSlot
---@param ReaddToInventory boolean
---@param TargetInventorySlot int32
---@param bForceUnequip boolean
function UEquipmentComponent:ServerUnequipItemSlot(Slot, ReaddToInventory, TargetInventorySlot, bForceUnequip) end
---@param Equippable UItem
---@param ReaddToInventory boolean
---@param TargetInventorySlot int32
---@param bForceUnequip boolean
function UEquipmentComponent:ServerUnequipItem(Equippable, ReaddToInventory, TargetInventorySlot, bForceUnequip) end
---@param Item UItem
---@param Count int32
function UEquipmentComponent:ServerRemoveItem(Item, Count) end
function UEquipmentComponent:ServerEquipPreviousMainHand() end
---@param Equippable UItem
---@param Slot EEquipmentSlot
function UEquipmentComponent:ServerEquipItemToSlot(Equippable, Slot) end
---@param Equippable UItem
---@param bCheckInventory boolean
function UEquipmentComponent:ServerEquipItem(Equippable, bCheckInventory) end
---@param Item UItem
function UEquipmentComponent:ServerDumpItem(Item) end
---@param Item UItem
---@param Count int32
function UEquipmentComponent:ServerDropItem(Item, Count) end
function UEquipmentComponent:ServerDisarmWeapon() end
---@param RowData FDataTableRowHandle
function UEquipmentComponent:ServerCreateAndEquipItemData(RowData) end
---@param IsUnderwater boolean
function UEquipmentComponent:OnUnderwaterChanged(IsUnderwater) end
---@param LastEquippable UItem
function UEquipmentComponent:OnRep_OffHand(LastEquippable) end
---@param LastEquippable UItem
function UEquipmentComponent:OnRep_MainHand(LastEquippable) end
---@param LastEquippable UItem
function UEquipmentComponent:OnRep_Legs(LastEquippable) end
---@param LastEquippable UItem
function UEquipmentComponent:OnRep_Head(LastEquippable) end
---@param LastEquippable UItem
function UEquipmentComponent:OnRep_Glider(LastEquippable) end
---@param LastEquippable UItem
function UEquipmentComponent:OnRep_Chest(LastEquippable) end
---@param LastEquippable UItem
function UEquipmentComponent:OnRep_Arms(LastEquippable) end
function UEquipmentComponent:OnItemEnhanced() end
function UEquipmentComponent:OnItemChanged() end
---@param HealthState EHealthState
function UEquipmentComponent:OnHealthStateChanged(HealthState) end
---@param Sender UHaulingComponent
function UEquipmentComponent:OnHaulEnd(Sender) end
---@param Sender UHaulingComponent
function UEquipmentComponent:OnHaulBegin(Sender) end
function UEquipmentComponent:OnGameModeChanged() end
---@param Item UItem
---@param bIsBroken boolean
function UEquipmentComponent:OnEquippedItemBroken(Item, bIsBroken) end
---@param DisplayMode ECameraDisplayMode
function UEquipmentComponent:OnCameraModeChanged(DisplayMode) end
---@param Slot EEquipmentSlot
---@param ReaddToInventory boolean
---@param TargetInventorySlot int32
---@param ToFromInventory UInventoryComponent
---@param bForceUnequip boolean
---@return UItem
function UEquipmentComponent:LocalUnequipItemInSlot(Slot, ReaddToInventory, TargetInventorySlot, ToFromInventory, bForceUnequip) end
---@param Equippable UItem
---@param ReaddToInventory boolean
---@param TargetInventorySlot int32
---@param ToFromInventory UInventoryComponent
---@param bForceUnequip boolean
---@return UItem
function UEquipmentComponent:LocalUnequipItem(Equippable, ReaddToInventory, TargetInventorySlot, ToFromInventory, bForceUnequip) end
---@param Equippable UItem
---@param Slot EEquipmentSlot
---@param ToFromInventory UInventoryComponent
---@param Flags EEquipItemFlags
function UEquipmentComponent:LocalEquipItemToSlot(Equippable, Slot, ToFromInventory, Flags) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UEquipmentComponent:IsItemRowHandleEquipped(ItemRowHandle) end
---@param Item UItem
---@return boolean
function UEquipmentComponent:IsItemEquipped(Item) end
---@param Handle FHideSlotHandle
---@param Slot EEquipmentSlot
function UEquipmentComponent:HideSlot(Handle, Slot) end
---@param Slot EEquipmentSlot
---@return boolean
function UEquipmentComponent:HasSlot(Slot) end
---@return boolean
function UEquipmentComponent:HasAnyItemEquipped() end
---@return UItem
function UEquipmentComponent:GetWeapon() end
---@return int32
function UEquipmentComponent:GetStance() end
---@param Slot EEquipmentSlot
---@return UItem
function UEquipmentComponent:GetPreviousItemInSlot(Slot) end
---@return int32
function UEquipmentComponent:GetOffhandStance() end
---@param Item UItem
---@return EEquipmentSlot
function UEquipmentComponent:GetItemSlot(Item) end
---@param Slot EEquipmentSlot
---@return UItem
function UEquipmentComponent:GetItemInSlot(Slot) end
---@param ItemRowHandle FDataTableRowHandle
---@return EEquipmentSlot
function UEquipmentComponent:GetItemHandleSlot(ItemRowHandle) end
---@param ItemRowHandle FDataTableRowHandle
---@return int32
function UEquipmentComponent:GetItemCount(ItemRowHandle) end
---@return TArray<EEquipmentSlot>
function UEquipmentComponent:GetEquipmentSlots() end
---@return float
function UEquipmentComponent:GetAverageEquippedTier() end
---@return TArray<FDataTableRowHandle>
function UEquipmentComponent:GetActiveItemSetStatusEffects() end
---@param RowData FDataTableRowHandle
---@return boolean
function UEquipmentComponent:EquipItemData(RowData) end
---@param Item UItem
---@return boolean
function UEquipmentComponent:DestroyVisuals(Item) end
---@param Item UItem
function UEquipmentComponent:ClientNotifyItemPowerDepleted(Item) end
---@param Item UItem
---@param ItemDroppedInWorld boolean
function UEquipmentComponent:ClientNotifyItemBroken(Item, ItemDroppedInWorld) end
---@param FailureStimulus EEquipmentChangeFailureFromFullInventoryStimulus
function UEquipmentComponent:ClientNotifyEquipmentChangeFailureFromFullInventory(FailureStimulus) end


---@class UEquipmentComponentLiteData : UComponentLiteData
---@field HasEquipmentSlots FEquipmentSlotsFlags
UEquipmentComponentLiteData = {}



---@class UEquipmentDisplayUndoOperation : UBaseUndoOperation
UEquipmentDisplayUndoOperation = {}


---@class UEquipmentLODComponent : UBaseLODComponent
---@field SerializedEquippedItems TArray<UItem>
---@field ProxyEquipmentComponent UProxyEquipmentComponent
---@field FullEquipmentComponent UEquipmentComponent
UEquipmentLODComponent = {}

---@param Slot EEquipmentSlot
---@return boolean
function UEquipmentLODComponent:HasSlot(Slot) end
---@param Slot EEquipmentSlot
---@return UItem
function UEquipmentLODComponent:GetItemInSlot(Slot) end
---@return TArray<EEquipmentSlot>
function UEquipmentLODComponent:GetEquipmentSlots() end


---@class UEquippedAccessoryWidget : UGameUserWidget
---@field UI_DurabilityFill UDurabilityFillWidget
---@field Item UItem
---@field ItemMeterType EItemMeterType
UEquippedAccessoryWidget = {}

---@return float
function UEquippedAccessoryWidget:GetMeterValueNative() end


---@class UEventAttackComponent : UActorComponent
---@field StatusEffects TArray<FDataTableRowHandle>
---@field AttacksToCheck TArray<FDataTableRowHandle>
---@field DamageEventType EDamageEventComponentType
---@field HealthToLoseForApplyingEffect float
UEventAttackComponent = {}

function UEventAttackComponent:ResetValues() end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function UEventAttackComponent:OnDamagedCharacter(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@param Attack UAttack
function UEventAttackComponent:OnAttack(Attack) end
---@param Attack UAttack
function UEventAttackComponent:EndAttack(Attack) end
function UEventAttackComponent:ApplyEffects() end


---@class UFPCOverlayComponent : UActorComponent
---@field OverlayRootComponent USceneComponent
---@field OverlayRootComponentDefaultForwardOffset float
---@field ConfigData UFPCOverlayConfigDataAsset
---@field CurrentConfigName FName
UFPCOverlayComponent = {}

function UFPCOverlayComponent:UpdatePositionForDynamicFOVChange() end
function UFPCOverlayComponent:UpdatePositionForAspectRatioChange() end
---@param ConfigName FName
---@param MeshVariant int32
function UFPCOverlayComponent:SetOverlay(ConfigName, MeshVariant) end
function UFPCOverlayComponent:RemoveOverlay() end


---@class UFPCOverlayConfigDataAsset : UDataAsset
---@field OverlayConfigs TMap<FName, FFPCOverlayConfig>
UFPCOverlayConfigDataAsset = {}



---@class UFaucetSpawnerComponent : UActorComponent
---@field SpawnData FFaucetItemSpawnData
---@field bHasSpawnedItems boolean
UFaucetSpawnerComponent = {}

---@param CurrentMode EEditMode
---@param NewMode EEditMode
function UFaucetSpawnerComponent:OnPreEditModeChange(CurrentMode, NewMode) end
---@param Sender UTrackedItemSpawnGroup
function UFaucetSpawnerComponent:HandleTrackedSpawnsChanged(Sender) end


---@class UFauxCharacterAnimInstance : UAnimInstance
---@field IsDead boolean
---@field bStartDead boolean
---@field IsIncapacitated boolean
---@field IsReviving boolean
---@field LookAtRotator FRotator
UFauxCharacterAnimInstance = {}



---@class UFocusRerouteWidget : UUserWidget
---@field ReroutePriorityList TArray<UWidget>
---@field DisallowFocusFromList TArray<UWidget>
---@field ChildInterationStyle EFocusRerouterChildIterationStyle
---@field bUseCustomBlueprintLogic boolean
UFocusRerouteWidget = {}

function UFocusRerouteWidget:OnCustomFocusLogic() end


---@class UFoliageDisplacerComponent : USceneComponent
---@field Radius float
---@field RegisterRadius float
---@field VelocityCompensationMultiplier float
---@field MaxVelocityCompensation float
---@field SpeedAudioSmoothingSpeed float
---@field EnergyAudioSmoothingSpeed float
---@field SwapLevel EFoliageSwapLevel
UFoliageDisplacerComponent = {}

---@param AttackState EWaveAttackState
function UFoliageDisplacerComponent:OnWaveAttackStateChanged(AttackState) end
---@param bActive boolean
function UFoliageDisplacerComponent:OnDefensePointActiveChanged(bActive) end


---@class UFoliageManagerComponent : UActorComponent
---@field RemovedFoliageItems FReplicatedFoliageSet
---@field AddedFoliageItems FReplicatedFoliageSet
---@field UserPlacedFoliageActor AUserPlacedFoliageActor
---@field DefaultRemovedISMs TArray<UInstancedStaticMeshComponent>
---@field HiddenFoliageData TArray<FDataTableRowHandle_NetCrc>
---@field bDisabledForWave boolean
---@field OnFoliageDamaged FFoliageManagerComponentOnFoliageDamaged
---@field SecondaryGroups TArray<TSoftClassPtr<ARespawnableInstancedMeshGroup>>
UFoliageManagerComponent = {}

---@param Key FFoliageKey
---@param Actor UBaseLODActor
function UFoliageManagerComponent:SetSwappedActor(Key, Actor) end
---@param FoliageKey FFoliageKey
function UFoliageManagerComponent:SetFoliageInstanceDefaultState(FoliageKey) end
---@param FoliageKey FFoliageKey
---@param Flags EFoliageSwapFlags
---@return UBaseLODActor
function UFoliageManagerComponent:ReplaceFoliageMeshWithBlueprintActor(FoliageKey, Flags) end
---@param FoliageKey FFoliageKey
---@param Flags EFoliageOperationFlags
function UFoliageManagerComponent:RemoveFoliageInstance(FoliageKey, Flags) end
---@param FoliageKey FFoliageKey
---@param Flags EFoliageOperationFlags
function UFoliageManagerComponent:ReaddFoliageInstance(FoliageKey, Flags) end
---@param RestDuration float
function UFoliageManagerComponent:OnRest(RestDuration) end
function UFoliageManagerComponent:OnRep_RemovedFoliageItems() end
---@param Previous TArray<FDataTableRowHandle_NetCrc>
function UFoliageManagerComponent:OnRep_HiddenFoliageData(Previous) end
function UFoliageManagerComponent:OnRep_AddedFoliageItems() end
---@param SpawnTransforms TArray<FTransform>
---@param FoliageKey FFoliageKey
function UFoliageManagerComponent:MulticastPlayFoliageInteractEffects(SpawnTransforms, FoliageKey) end
---@param FoliageKey FFoliageKey
---@return boolean
function UFoliageManagerComponent:IsRemovedFoliageInstance(FoliageKey) end
---@param FoliageKey FFoliageKey
---@return boolean
function UFoliageManagerComponent:IsFullyRemovedFoliage(FoliageKey) end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param Instigator AActor
function UFoliageManagerComponent:HandleGlobalVariableChanged(GlobalVariableID, VariableValue, Instigator) end
---@param FoliageKey FFoliageKey
---@param Transform FTransform
---@param bWorldSpace boolean
---@return boolean
function UFoliageManagerComponent:GetVisibleTransform(FoliageKey, Transform, bWorldSpace) end
---@param Types TArray<UFoliageType_InstancedStaticMesh>
---@param Center FVector
---@return FFoliageKey
function UFoliageManagerComponent:GetNearestInstanceOfType(Types, Center) end
---@param Type UFoliageType_InstancedStaticMesh
---@param Center FVector
---@param Radius float
---@param bSphereInWorldSpace boolean
---@return TArray<FFoliageKey>
function UFoliageManagerComponent:GetInstancesOverlappingSphereOfType(Type, Center, Radius, bSphereInWorldSpace) end
---@param Center FVector
---@param Radius float
---@param bSphereInWorldSpace boolean
---@return TArray<FFoliageKey>
function UFoliageManagerComponent:GetInstancesOverlappingSphere(Center, Radius, bSphereInWorldSpace) end
---@param Box FBox
---@param bBoxInWorldSpace boolean
---@return TArray<FFoliageKey>
function UFoliageManagerComponent:GetInstancesOverlappingBox(Box, bBoxInWorldSpace) end
---@param FoliageKey FFoliageKey
---@param ClimberTag FGameplayTag
---@return boolean
function UFoliageManagerComponent:GetFoliageIsClimbable(FoliageKey, ClimberTag) end
---@param FoliageKey FFoliageKey
---@param RoleTag FGameplayTag
---@return boolean
function UFoliageManagerComponent:GetFoliageHasClimbRole(FoliageKey, RoleTag) end
---@param FoliageKey FFoliageKey
---@param Transform FTransform
---@param bWorldSpace boolean
---@return boolean
function UFoliageManagerComponent:GetCurrentTransform(FoliageKey, Transform, bWorldSpace) end
---@param FoliageKey FFoliageKey
---@return UBaseLODActor
function UFoliageManagerComponent:GetBlueprintInstance(FoliageKey) end
---@param Location FVector
---@param Radius float
---@param BoundingBox FBox
function UFoliageManagerComponent:ClearGroundFoliage(Location, Radius, BoundingBox) end


---@class UFootstepData : UDataAsset
---@field DefaultEffect FFootstepEntry
---@field OverrideEffects TArray<FFootstepEntry>
UFootstepData = {}



---@class UFreeCamControlsWidget : UGameUserWidget
---@field SpeedPips UPipsWidget
UFreeCamControlsWidget = {}

---@return float
function UFreeCamControlsWidget:GetBuildModeSpeed() end


---@class UFriendsList : UGameUserWidget
UFriendsList = {}

---@param Friend FBlueprintFriendResult
function UFriendsList:ViewPlayerProfileFromFriendStruct(Friend) end
---@param Value boolean
function UFriendsList:SetWaitingForTask(Value) end
function UFriendsList:RefreshFriends() end
---@param Value boolean
function UFriendsList:OnWaitingForTaskChanged(Value) end
---@return boolean
function UFriendsList:GetWaitingForTask() end
---@param FriendName FString
function UFriendsList:DeleteFriend(FriendName) end
---@param FriendName FString
function UFriendsList:AddFriend(FriendName) end


---@class UFriendsMenu : UWindowWidget
UFriendsMenu = {}


---@class UGameButtonWidget : UGameUserWidget
UGameButtonWidget = {}


---@class UGameInterfaceNarrationLibrary : UBlueprintFunctionLibrary
UGameInterfaceNarrationLibrary = {}

---@param WorldContextObject UObject
function UGameInterfaceNarrationLibrary:NarrateFromWindowReEvaluation(WorldContextObject) end
---@param ActionName FName
---@param bAxisPositive boolean
---@param bUsingGamepad boolean
---@return FInputChord
function UGameInterfaceNarrationLibrary:GetFirstChordHelper(ActionName, bAxisPositive, bUsingGamepad) end
---@param Widget UNarratableUserWidget
---@param Chunks TArray<FNarrationChunk>
---@param bVerbose boolean
function UGameInterfaceNarrationLibrary:AddWidgetChunks(Widget, Chunks, bVerbose) end
---@param Chunks TArray<FNarrationChunk>
---@param Widget UWidget
---@param ActionName1 FName
---@param bAxisPositive1 boolean
---@param ActionName2 FName
---@param bAxisPositive2 boolean
---@param ActionDisplayName FString
---@param bOnlyIfChanged boolean
---@param bVerbose boolean
function UGameInterfaceNarrationLibrary:AddDoubleControlChunk(Chunks, Widget, ActionName1, bAxisPositive1, ActionName2, bAxisPositive2, ActionDisplayName, bOnlyIfChanged, bVerbose) end
---@param Chunks TArray<FNarrationChunk>
---@param Widget UWidget
---@param ActionName FName
---@param bAxisPositive boolean
---@param ActionDisplayName FString
---@param bOnlyIfChanged boolean
---@param bVerbose boolean
---@param bIsHold boolean
function UGameInterfaceNarrationLibrary:AddControlChunk(Chunks, Widget, ActionName, bAxisPositive, ActionDisplayName, bOnlyIfChanged, bVerbose, bIsHold) end


---@class UGameLobbySettingsWidget : UWindowWidget
---@field GameModeGroupSurvival UGameModeBadgeGroup
---@field GameModeGroupCreative UGameModeBadgeGroup
---@field GameModeGroupCustom UGameModeBadgeGroup
---@field DescriptionBlock UTextBlock
---@field TitleBlock UTextBlock
---@field ActiveGameMode EGameMode
---@field OnBadgeFocused FGameLobbySettingsWidgetOnBadgeFocused
UGameLobbySettingsWidget = {}

---@param GameMode EGameMode
function UGameLobbySettingsWidget:SetGameMode(GameMode) end
---@param GameMode EGameMode
function UGameLobbySettingsWidget:OnGameModeChanged(GameMode) end


---@class UGameLobbyWidget : UWindowWidget
UGameLobbyWidget = {}


---@class UGameModeBadge : UGameUserWidget
---@field OnBadgeFocused FGameModeBadgeOnBadgeFocused
---@field GameMode EGameMode
---@field GameModeCategory EGameModeCategory
---@field IsBadgeSelected boolean
---@field GameModeIcon UImage
---@field GameModeTitle ULocalizedTextBlock
---@field ImgBG UBorder
UGameModeBadge = {}

---@param InSelected boolean
function UGameModeBadge:SetBadgeSelected(InSelected) end
---@param Hovered boolean
function UGameModeBadge:OnMouseOverStateChanged(Hovered) end
---@param InGameMode EGameMode
---@param GroupWidget UGameUserWidget
---@param OwnerWidget UGameUserWidget
function UGameModeBadge:Init(InGameMode, GroupWidget, OwnerWidget) end


---@class UGameModeBadgeGroup : UGameUserWidget
---@field GameModeCategory EGameModeCategory
---@field GroupTitle UTextBlock
---@field BackgroundImage UImage
---@field GameMode1 UGameModeBadge
---@field GameMode2 UGameModeBadge
---@field GameMode3 UGameModeBadge
UGameModeBadgeGroup = {}

---@param Mode EGameMode
---@param GroupContainsMode boolean
function UGameModeBadgeGroup:OnBadgeFocused(Mode, GroupContainsMode) end
---@param Mode EGameMode
function UGameModeBadgeGroup:NativeOnBadgeFocused(Mode) end
---@param Category EGameModeCategory
---@param OwnerWidget UGameUserWidget
function UGameModeBadgeGroup:Init(Category, OwnerWidget) end
---@return TArray<UGameModeBadge>
function UGameModeBadgeGroup:GetBadges() end


---@class UGameModeResourcesAsset : UDataAsset
---@field IconColors TMap<EGameMode, FLinearColor>
---@field BGColors TMap<EGameMode, FLinearColor>
---@field GameModeIconMap TMap<EGameMode, UTexture2D>
---@field GameModeTitlesMap TMap<EGameMode, FLocString>
UGameModeResourcesAsset = {}



---@class UGameOptions : UObject
---@field MouseOptions UControlOptions
---@field GamepadOptions UControlOptions
UGameOptions = {}

function UGameOptions:UnbindGame() end
function UGameOptions:Save() end
function UGameOptions:Load() end
---@param bIsGamepad boolean
---@return UControlOptions
function UGameOptions:GetControlOptions(bIsGamepad) end
function UGameOptions:BindGame() end


---@class UGameTextBlock : UTextBlock
---@field ForceAllUpperCase boolean
UGameTextBlock = {}



---@class UGameUserWidget : UNarratableUserWidget
---@field bUseAnimationCulling boolean
---@field LocalizedToolTipText FLocString
---@field bUsesGlobalInputPreprocessor boolean
---@field CachedAnimations TArray<FIndefiniteAnimationResumeData>
UGameUserWidget = {}

---@return boolean
function UGameUserWidget:ShouldCheckForDebugConsole() end
---@param bEnableTick boolean
function UGameUserWidget:SetTickEnabled(bEnableTick) end
---@param NewText FLocString
function UGameUserWidget:SetLocalizedToolTipText(NewText) end
---@param bOnUsingGamepadChanged boolean
function UGameUserWidget:OnUsingGamepadChanged(bOnUsingGamepadChanged) end
---@param NewPlayerCharacter ASurvivalPlayerCharacter
function UGameUserWidget:OnPossessedPlayerChange(NewPlayerCharacter) end
function UGameUserWidget:OnGlobalColorChange() end
---@param NewGameInputType EGameInputType
function UGameUserWidget:OnGameInputTypeChanged(NewGameInputType) end
function UGameUserWidget:NativeOnLanguageChanged() end
---@return boolean
function UGameUserWidget:IsDebugConsoleOpen() end
---@param InChord FInputChord
---@return boolean
function UGameUserWidget:HandleKeyEventChord(InChord) end
---@param InChord FInputChord
---@return boolean
function UGameUserWidget:HandleGlobalKeyEventChord(InChord) end
---@return ASurvivalPlayerCharacter
function UGameUserWidget:GetSurvivalPlayerCharacter() end
---@return ASurvivalPlayerController
function UGameUserWidget:GetOwningSurvivalPlayerController() end
---@return AGameUI
function UGameUserWidget:GetGameUI() end
---@param colo FSlateColor
function UGameUserWidget:ChangeControllerColor(colo) end


---@class UGameVersionFunctionLibrary : UBlueprintFunctionLibrary
UGameVersionFunctionLibrary = {}

---@return FString
function UGameVersionFunctionLibrary:GetGameVersionString() end
---@return FGameVersion
function UGameVersionFunctionLibrary:GetGameVersion() end


---@class UGeneratedItemEffectData : UDataAsset
---@field EffectCount int32
---@field PossibleEffects TArray<FDataTableRowHandle>
UGeneratedItemEffectData = {}



---@class UGlobalAIData : UDataAsset
---@field StaticObstacleTargetLocationQuery UEnvQuery
---@field WarpToFollowTargetQuery UEnvQuery
---@field FlyingWarpToFollowTargetQuery UEnvQuery
---@field WarpToSearchOriginQuery UEnvQuery
---@field FlyingWarpToSearchOriginQuery UEnvQuery
---@field DefaultMoveConfig FMovementConfig
---@field MoveToConfig TMap<EBehaviorType, FBehaviorMovementConfig>
---@field DefaultBlackboard UBlackboardData
---@field FootstepNoiseCooldown float
---@field NoiseExpirationTime float
---@field NearPartyDistance float
---@field SenseThreatDecayTime float
---@field CombatThreatDecayTime float
---@field TargetAggressionDecayTime float
---@field ThreatDecayPerSecond float
---@field BurrowSurfaces TArray<EPhysicalSurface>
---@field MaxTokens int32
---@field MaxBuildingTokens int32
---@field BuildingTokenCooldownModifier float
UGlobalAIData = {}



---@class UGlobalAudioData : UDataAsset
---@field DefaultMusicSettings UMusicSettings
---@field DefaultCombatMusicTag FGameplayTag
---@field CombatMusicList TArray<FCombatMusicSettings>
---@field MasterSoundClass USoundClass
---@field MusicSoundClass USoundClass
---@field EffectsSoundClass USoundClass
---@field AmbienceSoundClass USoundClass
---@field UISoundClass USoundClass
---@field NarrationSoundClass USoundClass
---@field VoiceSoundClass USoundClass
---@field GlobalTimedOneShotsData UHourBasedOneShotsData
---@field DefaultSoundMix USoundMix
---@field SubmergedSoundMix USoundMix
---@field EditModeSoundMix USoundMix
---@field UIAudioDataTable UDataTable
---@field DefaultBaseDayTrack UMusicTrackData
---@field DefaultBaseNightTrack UMusicTrackData
---@field BaseDistanceBuffer float
---@field HealthNoDamageAudioTag FGameplayTag
---@field HealthDamageAudioTag FGameplayTag
---@field HealthDeathAudioTag FGameplayTag
---@field DefaultEditModeMusicSettings UMusicSettings
UGlobalAudioData = {}



---@class UGlobalBuildingData : UDataAsset
---@field BuildingUnderConstructionMaterial UMaterialInterface
---@field BuildingUnderConstructionMaterialNoFade UMaterialInterface
---@field BuildingUnderConstructionInvalidMaterial UMaterialInterface
---@field BuildingUnderConstructionInvalidMaterialNoFade UMaterialInterface
---@field InvisibleMaterials TArray<UMaterialInterface>
---@field BuildingDestroySFX USoundCue
---@field BuildingDemolishSFX USoundCue
---@field BuildingAddItemSFX USoundCue
---@field BuildingPlaceSFX USoundCue
---@field BuildingCancelSFX USoundCue
---@field BuildingCompleteContructionSFX USoundCue
---@field FacingHelperMesh UStaticMesh
---@field RotationHandles TSubclassOf<APlacementRotationHandles>
---@field BuildingCompleteVOTag FGameplayTag
---@field GridBuildingMovedCue USoundCue
---@field BuildingGridPrefab TSubclassOf<AActor>
---@field LadderSplinePrefab TSubclassOf<ACombinedLadder>
---@field DamageWiggleAmplitude UCurveFloat
---@field FragileWiggleAmplitude UCurveFloat
---@field CancelDissolveAmount UCurveFloat
---@field BuildingDestroyTime float
---@field DefaultFullCell UBuildingShape
---@field DefaultFullWall UBuildingShape
---@field DefaultFullFloor UBuildingShape
---@field BaseCellSize FVector
---@field BuildSoundIntensity float
---@field BuildSoundRange float
---@field WallMountValidNormal FFloatRange
---@field CeilingMountValidNormal FFloatRange
---@field GridSubdivisions FIntVector
---@field WeightClasses TArray<FTagDataInt>
---@field SturdinessClasses TArray<FTagDataInt>
---@field CozinessLevels TArray<FCozinessLevel>
---@field StructureCozinessCap float
---@field CozinessCheckRadius float
---@field EmbedMax float
---@field CellSize FVector
---@field CellExtents FVector
---@field SubOffset FIntVector
---@field SubdivisionOffset FVector
---@field ConvertedProcessingBuildingClasses TArray<TSoftClassPtr<AProductionBuilding>>
---@field NonStandardSupportCandidates TArray<FBuildingGridKeyArray>
UGlobalBuildingData = {}

---@param Snap FIntVector
---@param Origin FBuildingGridKey
---@param Angle float
---@return FIntVector
function UGlobalBuildingData:RotateSnapCentered(Snap, Origin, Angle) end
---@param Snap FIntVector
---@param Origin FBuildingGridKey
---@param Angle float
---@return FIntVector
function UGlobalBuildingData:RotateSnap(Snap, Origin, Angle) end
---@param Slot FBuildingGridKey
---@param Origin FBuildingGridKey
---@param Angle float
---@return FBuildingGridKey
function UGlobalBuildingData:RotateSlotCentered(Slot, Origin, Angle) end
---@param Slot FBuildingGridKey
---@param Origin FBuildingGridKey
---@param Angle float
---@return FBuildingGridKey
function UGlobalBuildingData:RotateSlot(Slot, Origin, Angle) end
---@param Position FIntVector
---@return FVector
function UGlobalBuildingData:GridToLocal(Position) end
---@param Class FGameplayTag
---@return int32
function UGlobalBuildingData:GetWeight(Class) end
---@param Class FGameplayTag
---@return int32
function UGlobalBuildingData:GetSturdiness(Class) end
---@return FVector
function UGlobalBuildingData:GetSnapOffset() end
---@param GridLocation FBuildingGridKey
---@param Rotation FQuat
---@return FBox
function UGlobalBuildingData:GetSlotDebugShape(GridLocation, Rotation) end
---@param GridLocation FBuildingGridKey
---@return FBox
function UGlobalBuildingData:GetSlotBounds(GridLocation) end
---@return int32
function UGlobalBuildingData:GetMaxWeight() end
---@return int32
function UGlobalBuildingData:GetMaxSturdiness() end
---@return int32
function UGlobalBuildingData:GetMaxCozinessValue() end
---@return int32
function UGlobalBuildingData:GetMaxCozinessLevel() end
---@param InCoziness int32
---@param InStructural int32
---@return int32
function UGlobalBuildingData:GetEffectiveCozinessValue(InCoziness, InStructural) end
---@param Level int32
---@return int32
function UGlobalBuildingData:GetCozinessValueForLevel(Level) end
---@param InEffectiveValue int32
---@return int32
function UGlobalBuildingData:GetCozinessLevelForEffectiveValue(InEffectiveValue) end
---@param InCoziness int32
---@param InStructural int32
---@return int32
function UGlobalBuildingData:GetCozinessLevel(InCoziness, InStructural) end
---@param WorldContextObject UObject
---@param GridTransform FTransform
---@param Location FIntVector
function UGlobalBuildingData:DrawDebugSnap(WorldContextObject, GridTransform, Location) end
---@param WorldContextObject UObject
---@param GridTransform FTransform
---@param Key FBuildingGridKey
---@param Color FColor
---@param Lifetime float
function UGlobalBuildingData:DrawDebugCell(WorldContextObject, GridTransform, Key, Color, Lifetime) end


---@class UGlobalColorTheme : UObject
UGlobalColorTheme = {}

---@param ListName FName
---@param ColorName FName
---@param Color FLinearColor
function UGlobalColorTheme:SetColorListColorByName(ListName, ColorName, Color) end
function UGlobalColorTheme:ProduceColorblindCaches() end
---@param ListName FName
---@param ColorName FName
---@return FLinearColor
function UGlobalColorTheme:GetColorListColorByName(ListName, ColorName) end


---@class UGlobalCombatData : UDataAsset
---@field DefaultAttackTraceRadius float
---@field OutOfStaminaBlockStunMultiplier float
---@field OutOfStaminaBlockMultiplier float
---@field GenericDamageType TSubclassOf<USurvivalDamageType>
---@field HungerDamageType TSubclassOf<USurvivalDamageType>
---@field ThirstDamageType TSubclassOf<USurvivalDamageType>
---@field BadFoodDamageType TSubclassOf<USurvivalDamageType>
---@field EnvironmentalDamageType TSubclassOf<USurvivalDamageType>
---@field MinimumDamageReduction float
---@field MinimumDamageReductionDecreasePerEquipmentLevel float
---@field CriticalHitMultiplier float
---@field ComboScalingTypes TArray<FComboScalingData>
---@field ThrowingStaminaCost float
---@field ThrowingDurabilityCost float
---@field ThrowingForce float
---@field ThrowingRotationalForce float
---@field ItemVelocityThresholdForDamage float
---@field ItemVelocityThresholdForSound float
---@field DefaultThrowingImpact FThrowingImpactData
---@field ThrowingImpactTypes TArray<FThrowingImpactData>
---@field HitMarkerSound USoundBase
---@field CriticalHitEffect UVisualEffect
---@field CombatRegenDelay float
---@field CombatRegenTickPercentage float
---@field CombatRegenTickRate float
UGlobalCombatData = {}



---@class UGlobalControlsData : UDataAsset
---@field ActionData TMap<FName, FControlMetadata>
---@field AxisData TMap<FAxisDirectionKey, FControlMetadata>
---@field ConflictContextData TMap<EControlConflictContext, FControlConflictContextMetadata>
---@field IgnoredConflicts TArray<FIgnoredBindingConflictGroup>
UGlobalControlsData = {}

---@param A FName
---@param B FName
---@param IsGamepadControl boolean
---@return boolean
function UGlobalControlsData:ShouldIgnoreConflictForBindings(A, B, IsGamepadControl) end
---@param Context EControlConflictContext
---@return int32
function UGlobalControlsData:GetConflictsWithMask(Context) end
---@param Key FAnyControlMappingKey
---@param OutData FControlMetadata
---@return boolean
function UGlobalControlsData:FindMetadata(Key, OutData) end


---@class UGlobalConversationData : UDataAsset
---@field BanterRepeatSkipPercent float
---@field BanterRepeatCooldownMinMaxSecs FVector2D
---@field GlobalBanterRepeatCooldownMinMaxSecs FVector2D
---@field BanterOnLoadCooldownSecs FVector2D
UGlobalConversationData = {}



---@class UGlobalFoliageData : UDataAsset
---@field FoliageRespawnRules TArray<FFoliageRespawnRules>
---@field FoliageMappings TMap<TSoftObjectPtr<UStaticMesh>, FFoliageMapping>
---@field GroundFoliage TArray<TSoftObjectPtr<UStaticMesh>>
---@field FoliageRustleFadeInTime float
---@field FoliageRustleFadeOutTime float
---@field FoliageRustleMinEnergy float
---@field InstanceIfNecessaryDistance float
UGlobalFoliageData = {}

---@param StaticMesh UStaticMesh
---@return float
function UGlobalFoliageData:GetFoliagePlayerSwapDistanceFromMesh(StaticMesh) end
---@param Key FFoliageKey
---@return float
function UGlobalFoliageData:GetFoliagePlayerSwapDistanceFromKey(Key) end
---@param StaticMesh UStaticMesh
---@return EFoliageInstanceState
function UGlobalFoliageData:GetFoliageDefaultStateFromMesh(StaticMesh) end
---@param Key FFoliageKey
---@return EFoliageInstanceState
function UGlobalFoliageData:GetFoliageDefaultStateFromKey(Key) end
---@param StaticMesh UStaticMesh
---@return boolean
function UGlobalFoliageData:GetFoliageAnimatesFromMesh(StaticMesh) end
---@param Key FFoliageKey
---@return boolean
function UGlobalFoliageData:GetFoliageAnimatesFromKey(Key) end


---@class UGlobalHUDWidget : UGameUserWidget
UGlobalHUDWidget = {}


---@class UGlobalItemData : UDataAsset
---@field ProcessingData TArray<FProcessingTypeGlobalData>
---@field DefaultWorldItem TSubclassOf<ASpawnedItem>
---@field DefaultEquippedItem TSubclassOf<ASpawnedItem>
---@field DefaultAIBiteEffect UVisualEffect
---@field DefaultAIEatEffect UVisualEffect
---@field AttackDurability float
---@field BlockDurability float
---@field ArmorHitDurability float
---@field ThrowDurability float
---@field AddChargesDurability float
---@field DamageDurabilityThresholds TArray<float>
---@field TotalSpoilingTimeInHours float
---@field TorchItem FDataTableRowHandle
---@field TotalFireBurnTimeInHours float
---@field StackSizes TMap<FGameplayTag, int32>
---@field ItemStackUpgrades TArray<FItemStackUpgradeData>
---@field ItemStackBonusPerTier int32
---@field MaxItemStackTier int32
---@field MaxDropStackSize int32
---@field SciencePerResearch int32
---@field ResearchLevels TArray<FResearchLevelGlobalData>
---@field ResearchPoints TMap<FGameplayTag, int32>
---@field ItemUseCooldown float
---@field MushroomBrickItem FDataTableRowHandle
---@field RockCandyItem FDataTableRowHandle
---@field DefaultCraftingSound USoundBase
---@field RecipeModData TArray<FRecipeModData>
---@field LootBag TSubclassOf<ALootBag>
---@field BuildingLootBag TSubclassOf<ALootBag>
---@field HaulableCluster TSubclassOf<AHaulableItemCluster>
---@field MaxBaseEnhancementLevel int32
---@field LocalizedBaseEnhancementDisplayName FLocString
---@field BaseEnhancementItemSlotBG TSoftObjectPtr<UObject>
---@field BaseEnhancementItem FDataTableRowHandle
---@field LocalizedArmorBaseEnhancementDisplayName FLocString
---@field BaseArmorEnhancementItemSlotBG TSoftObjectPtr<UObject>
---@field ArmorBaseEnhancementItem FDataTableRowHandle
---@field LegendaryEnhancementItem FDataTableRowHandle
---@field BaseEnhancementBaseCost int32
---@field BaseArmorEnhancementBaseCost int32
---@field BaseStatModifierPerLevel float
---@field MaxBonusEnhancementLevel int32
---@field NumBonusEnhancementTiers int32
---@field BonusStatModifierPerLevel float
---@field BonusDamageTypeStatModifierPerLevel float
---@field BonusArmrEffectStatModifierPerLevel float
---@field BonusEnhancementBaseCost int32
---@field BonusArmorEnhancementBaseCost int32
---@field LegendaryStatModifierPerLevel float
---@field MaxLegendaryEnhancementLevel int32
---@field LegendaryEnhancementBaseCost int32
---@field DefaultBonusEnhancementTag FGameplayTag
---@field DefaultArmorBonusEnhancementTag FGameplayTag
---@field BonusEnhancements TMap<FGameplayTag, FItemBonusEnhancementData>
---@field DuplcationCostPerLevel int32
---@field DuplicationItemTag FGameplayTag
---@field DuplicationTiers TArray<int32>
---@field DeduplicationItemReward FDataTableRowHandle
---@field KeyItemCategories TMap<FGameplayTag, FKeyItemDisplayData>
---@field KeyItemSubcategories TMap<FGameplayTag, FKeyItemDisplayData>
---@field BestiaryWeakPointDisplayData TMap<FGameplayTag, FKeyItemDisplayData>
---@field ImpactEffectDelay float
---@field MinImpactThreshold float
---@field MaxImpactThreshold float
---@field MinImpactVolume float
---@field MaxImpactVolume float
---@field StashDepositSound USoundBase
---@field UpgradePersonalHarvestNode TSubclassOf<AActor>
---@field UpgradePartyHarvestNode TSubclassOf<AActor>
---@field EarlyAccessSignSet FDataTableRowHandle
---@field GeneratedItemEffects TMap<ERandomEffectType, UGeneratedItemEffectData>
---@field ItemTriggerEvents TArray<FDataTableRowHandle>
---@field HarvestNodeTriggerEvents TArray<FDataTableRowHandle>
---@field GasMaskItemTag FGameplayTag
---@field GasMaskReverb USoundEffectSubmixPreset
UGlobalItemData = {}

---@param ItemRowHandle FDataTableRowHandle
---@return FRecipeModData
function UGlobalItemData:GetRecipeModData(ItemRowHandle) end
---@param EnhancementLevel int32
---@return float
function UGlobalItemData:GetLegendaryStatModifier(EnhancementLevel) end
---@param EnhancementLevel int32
---@return int32
function UGlobalItemData:GetLegendaryEnhancementItemCost(EnhancementLevel) end
---@param EffectType ERandomEffectType
---@return UGeneratedItemEffectData
function UGlobalItemData:GetGeneatedItemEffectData(EffectType) end
---@param BonusEnhancementLevel int32
---@param BonusEnhancementType FGameplayTag
---@param bIsArmorItem boolean
---@return float
function UGlobalItemData:GetBonusStatModifier(BonusEnhancementLevel, BonusEnhancementType, bIsArmorItem) end
---@return TArray<FGameplayTag>
function UGlobalItemData:GetBonusEnhancementTypes() end
---@param BonusEnhancementType FGameplayTag
---@return FDataTableRowHandle
function UGlobalItemData:GetBonusEnhancementRepairItem(BonusEnhancementType) end
---@param BonusEnhancementLevel int32
---@return int32
function UGlobalItemData:GetBonusEnhancementItemCost(BonusEnhancementLevel) end
---@param BonusEnhancementType FGameplayTag
---@param BonusEnhancementLevel int32
---@return FDataTableRowHandle
function UGlobalItemData:GetBonusEnhancementItem(BonusEnhancementType, BonusEnhancementLevel) end
---@param BonusEnhancementType FGameplayTag
---@return TSubclassOf<USurvivalDamageType>
function UGlobalItemData:GetBonusEnhancementDamageType(BonusEnhancementType) end
---@param EnhancementLevel int32
---@return float
function UGlobalItemData:GetBaseStatModifier(EnhancementLevel) end
---@param EnhancementLevel int32
---@return int32
function UGlobalItemData:GetBaseEnhancementItemCost(EnhancementLevel) end
---@param BonusEnhancementLevel int32
---@return int32
function UGlobalItemData:GetArmorBonusEnhancementItemCost(BonusEnhancementLevel) end
---@param EnhancementLevel int32
---@return int32
function UGlobalItemData:GetArmorBaseEnhancementItemCost(EnhancementLevel) end
---@param BonusEnhancementType FGameplayTag
---@return boolean
function UGlobalItemData:DoesBonusEnhancementUnlockStatusEffects(BonusEnhancementType) end


---@class UGlobalLiteData : UDataAsset
---@field AllLiteData TMap<FName, UActorLiteData>
UGlobalLiteData = {}

---@param Actor TSoftClassPtr<AActor>
---@return UActorLiteData
function UGlobalLiteData:GetLiteDataForQuiet(Actor) end
---@param Actor TSoftClassPtr<AActor>
---@return UActorLiteData
function UGlobalLiteData:GetLiteDataFor(Actor) end


---@class UGlobalPlayerData : UDataAsset
---@field PlaceWaypointCue USoundCue
---@field RemoveWaypointCue USoundCue
---@field ScanTargetCue USoundCue
---@field SoftFluffImpactCue USoundBase
---@field SoftFluffImpactParam FName
---@field ZiplinePropTemplate TSoftClassPtr<AActor>
---@field PoweredZiplinePropTemplate TSoftClassPtr<AActor>
---@field MaxSittableAngle float
---@field NewGamePlusMilkMolarCount int32
UGlobalPlayerData = {}



---@class UGlobalSaveLoadData : UDataAsset
---@field ClassRedirects TMap<FString, FSoftClassPath>
---@field DataTableRedirects TMap<FString, FSoftObjectPath>
---@field DataTableRowRedirects TMap<FSoftObjectPath, FDataTableRowRedirects>
---@field SpawnedItemClassChanges TArray<TSoftClassPtr<AActor>>
---@field CustomLoadRestoreSettings TMap<ELoadResetLevel, FCustomLoadRestoreSettings>
---@field QuestsRestructuredVersion FGameVersion
UGlobalSaveLoadData = {}



---@class UGlobalTableData : UDataAsset
---@field AllItemsTable UDataTable
---@field ItemVariantsTable UDataTable
---@field BuildingsTable UDataTable
---@field HarvestNodesTable UDataTable
---@field PlaceableMeshesTable UDataTable
---@field CraftingRecipeTable UDataTable
---@field BuildingRecipeTable UDataTable
---@field MetaBuildingsTable UDataTable
---@field MetaBuildingVariantsTable UDataTable
---@field GardenRecipeTable UDataTable
---@field QuestsTable UDataTable
---@field ItemSetsTable UDataTable
---@field TechTreesTable UDataTable
---@field PowerTypesTable UDataTable
---@field TutorialsTable UDataTable
---@field PerksTable UDataTable
---@field PlayerUpgradesTable UDataTable
---@field SignsTable UDataTable
---@field ZonesTable UDataTable
---@field AchievementsTable UDataTable
---@field PetPersonalitiesTable UDataTable
---@field CharactersTable UDataTable
---@field StatusEffectsTable UDataTable
---@field BestiaryTable UDataTable
---@field KeyItemsTable UDataTable
---@field CustomPropertiesTable UDataTable
UGlobalTableData = {}



---@class UGlobalTamingData : UDataAsset
---@field HappinessSteps TArray<FTamingHappinessStep>
---@field HappinessVitalTag FGameplayTag
---@field EquippedHappinessDecayMult float
UGlobalTamingData = {}

---@param Hunger float
---@return float
function UGlobalTamingData:HungerToHappiness(Hunger) end
---@param Happiness float
---@return float
function UGlobalTamingData:HappinessToHunger(Happiness) end
---@param Hunger float
---@return int32
function UGlobalTamingData:GetHappinessStepIndexFromHunger(Hunger) end
---@param Happiness float
---@return int32
function UGlobalTamingData:GetHappinessStepIndex(Happiness) end
---@param Happiness float
---@return FTamingHappinessStep
function UGlobalTamingData:GetHappinessStepData(Happiness) end


---@class UGlobalUIData : UDataAsset
---@field WidgetManagerClass TSubclassOf<UWidgetManager>
---@field BurgleQuestsWidgetClass TSoftClassPtr<UInteractionWidget>
---@field ScienceStoreWidgetClass TSoftClassPtr<UInteractionWidget>
---@field UpgradesWidgetClass TSoftClassPtr<UInteractionWidget>
---@field PauseWidgetClass TSoftClassPtr<UWindowWidget>
---@field ActorPlacementClass TSoftClassPtr<UWindowWidget>
---@field InGameMenu TSubclassOf<UWindowWidget>
---@field HotBarRadialMenu TSubclassOf<UWindowWidget>
---@field BuildingRadialMenu TSubclassOf<UWindowWidget>
---@field AmmoRadialMenu TSubclassOf<UWindowWidget>
---@field SocialRadialMenu TSubclassOf<UWindowWidget>
---@field ShortcutRadialMenu TSubclassOf<UWindowWidget>
---@field EditModeRadialMenu TSubclassOf<UWindowWidget>
---@field CombatRadialMenu TSubclassOf<UWindowWidget>
---@field TurretRadialMenu TSubclassOf<UWindowWidget>
---@field KeyDisplayData TMap<FKey, FInputKeyData>
---@field KeyDisplayDataSwitch TMap<FKey, FInputKeyData>
---@field KeyDisplayDataPS4 TMap<FKey, FInputKeyData>
---@field KeyDisplayDataPS5 TMap<FKey, FInputKeyData>
---@field HUDMarkerBrushes TMap<EHUDMarkerType, FHUDMarkerVariationData>
---@field HUDMarkerColorOptions TArray<FColor>
---@field TriggerConnectorColorOptions TArray<FColor>
---@field RadialShortcutBrushes TMap<ERadialShortcut, FRadialShortcutData>
---@field StatusEffectUIData TMap<EStatusEffectType, FStatusEffectUIData>
---@field AttackSpeedNames TMap<FGameplayTag, FLocString>
---@field ReputationNotificationData TArray<FReputationNotificationData>
---@field FactionLocStrings TMap<FGameplayTag, FLocString>
---@field AutoSaveIcon UTexture2D
---@field GlobalColorListType UScriptStruct
---@field UIThemes TArray<TSubclassOf<UGlobalColorTheme>>
---@field AllUIThemes TArray<TSubclassOf<UGlobalColorTheme>>
---@field DefaultUITheme TSubclassOf<UGlobalColorTheme>
---@field DefaultNightUITheme TSubclassOf<UGlobalColorTheme>
---@field MusicPlayerDataTable UDataTable
---@field ButtonLocString FLocString
UGlobalUIData = {}

---@return int32
function UGlobalUIData:GetMarkerBuildingHiddenIconIndex() end
---@return int32
function UGlobalUIData:GetMarkerBuildingBurgleIconIndex() end
---@param Key FKey
---@return FString
function UGlobalUIData:GetKeyNarrationName(Key) end
---@return TMap<FKey, FInputKeyData>
function UGlobalUIData:GetKeyDisplayData() end
---@param Chord FInputChord
---@return FText
function UGlobalUIData:GetChordNarrationName(Chord) end


---@class UGoapAction : UDataAsset
---@field InherentCost float
---@field AttractionRange float
---@field InteractDuration float
---@field InteractSoundTag FGameplayTag
---@field MustLand EMustLandState
---@field bReachTestIncludesAgentRadius boolean
---@field bReachTestIncludesGoalRadius boolean
---@field IndefiniteDuration boolean
---@field bOwnerOnly boolean
---@field bObstructionTrace boolean
---@field Facing EFaceTargetType
---@field InteractAnimType EInteractAnimType
---@field Cooldown float
UGoapAction = {}

---@param Actor UCharacterLODActor
---@param Owner FGoapActionOwner
---@param TargetLocation FVector
---@return EGoapActionResult
function UGoapAction:ExecuteReal(Actor, Owner, TargetLocation) end
---@param Actor UCharacterLODActor
---@param Owner FGoapActionOwner
---@return boolean
function UGoapAction:CanExecuteReal(Actor, Owner) end
---@param Actor UCharacterLODActor
---@param Owner FGoapActionOwner
---@return boolean
function UGoapAction:CanActorExecuteEver(Actor, Owner) end


---@class UGoapActionActivityMode : UGoapActionAdjustVitals
---@field ActivityMode ECreatureActivityMode
UGoapActionActivityMode = {}



---@class UGoapActionAdjustVitals : UGoapAction
---@field ValueAdjustments TMap<FGameplayTag, FGoapActionVitalAdjustment>
---@field Adjustments TArray<FGoapActionVitalAdjustment>
UGoapActionAdjustVitals = {}



---@class UGoapActionBuild : UGoapActionUseHeldItem
UGoapActionBuild = {}


---@class UGoapActionCache : UObject
---@field CacheData UGoapActionCacheData
---@field CachedActions TArray<UGoapAction>
UGoapActionCache = {}



---@class UGoapActionCacheData : UDataAsset
---@field GetItemTemplate UGoapActionGetItem
---@field DumpItemTemplate UGoapActionDumpItem
---@field DropItemTemplate UGoapActionDropItem
---@field ConsumeItemTemplate UGoapActionConsumeItem
---@field BuildAction UGoapActionBuild
UGoapActionCacheData = {}



---@class UGoapActionConsumeItem : UGoapActionRemoveItem
UGoapActionConsumeItem = {}


---@class UGoapActionConsumeItemDynamic : UGoapActionConsumeItem
UGoapActionConsumeItemDynamic = {}


---@class UGoapActionDeliverItem : UGoapActionUseHeldItem
---@field DeliverTags FGameplayTagContainer
---@field ItemHandles TArray<FDataTableRowHandle>
UGoapActionDeliverItem = {}



---@class UGoapActionDeliverItemCapped : UGoapActionDeliverItem
---@field Evaluator UGoapItemsInRegionEvaluator
UGoapActionDeliverItemCapped = {}



---@class UGoapActionDropItem : UGoapAction
---@field ItemRow FDataTableRowHandle
UGoapActionDropItem = {}



---@class UGoapActionDumpItem : UGoapActionRemoveItem
UGoapActionDumpItem = {}


---@class UGoapActionGetItem : UGoapActionRemoveItem
UGoapActionGetItem = {}


---@class UGoapActionGetItemDynamic : UGoapActionGetItem
UGoapActionGetItemDynamic = {}


---@class UGoapActionHarvest : UGoapAction
---@field LootData TArray<FHarvestLootData>
---@field LootSpawnType ELootSpawnType
UGoapActionHarvest = {}



---@class UGoapActionHoldItem : UGoapActionUseHeldItem
---@field DeliverTags FGameplayTagContainer
---@field ItemHandles TArray<FDataTableRowHandle>
UGoapActionHoldItem = {}



---@class UGoapActionInstanceFunctionLibrary : UBlueprintFunctionLibrary
UGoapActionInstanceFunctionLibrary = {}

---@param ActionInstance FGoapActionInstance
---@return FVector
function UGoapActionInstanceFunctionLibrary:GetGoapActionInstanceLocation(ActionInstance) end


---@class UGoapActionKill : UGoapAction
UGoapActionKill = {}


---@class UGoapActionRemoveItem : UGoapActionAdjustVitals
---@field Item FDataTableRowHandle
---@field Region FGameplayTag
UGoapActionRemoveItem = {}



---@class UGoapActionSpawnActor : UGoapActionAdjustVitals
---@field SpawnActor TSoftClassPtr<AActor>
---@field SpawnActorHard TSubclassOf<AActor>
---@field SpawnSocket FName
---@field bFaceCharacter boolean
---@field bSpawnOnGround boolean
---@field bForceSimulatePhysics boolean
---@field bSpawnActorIsRelevantItem boolean
---@field SpawnInRegion FGameplayTag
UGoapActionSpawnActor = {}



---@class UGoapActionSpawnEgg : UGoapActionSpawnActor
UGoapActionSpawnEgg = {}


---@class UGoapActionUseHeldItem : UGoapActionAdjustVitals
UGoapActionUseHeldItem = {}

---@param ItemDataHandle FDataTableRowHandle
---@param Owner FGoapActionOwner
---@return boolean
function UGoapActionUseHeldItem:IsUsableData(ItemDataHandle, Owner) end
---@param Item UItem
---@param Owner FGoapActionOwner
---@return boolean
function UGoapActionUseHeldItem:IsUsable(Item, Owner) end


---@class UGoapColonyPopulationEvaluator : UGoapWorldStateEvaluator
---@field PopulationValue UCurveFloat
UGoapColonyPopulationEvaluator = {}



---@class UGoapItemsInRegionEvaluator : UGoapWorldStateEvaluator
---@field RegionTag FGameplayTag
---@field ValueCurve UCurveFloat
UGoapItemsInRegionEvaluator = {}



---@class UGoapSphereRegionComponent : UBaseGoapRegionComponent
UGoapSphereRegionComponent = {}


---@class UGoapWorldStateEvaluator : UDataAsset
---@field MemberWeightVariance FFloatRange
UGoapWorldStateEvaluator = {}



---@class UGridLaddersComponent : UActorComponent
---@field CombinedLadders TArray<FCombinedLadderData>
---@field NeedsRebuild TArray<ALadderBuilding>
UGridLaddersComponent = {}

function UGridLaddersComponent:RebuildDirty() end
function UGridLaddersComponent:RebuildAll() end
---@param Sender UBuildingGridComponent
---@param Building FBuildingGridBuildingId
---@param Slot FBuildingGridKey
function UGridLaddersComponent:HandleBuildingRegistered(Sender, Building, Slot) end
---@param Sender UBuildingGridComponent
---@param Building FBuildingGridBuildingId
---@param Slot FBuildingGridKey
function UGridLaddersComponent:HandleBuildingPreUnregister(Sender, Building, Slot) end
---@param Sender UBuildingGridComponent
---@param Building FBuildingGridBuildingId
---@param Slot FBuildingGridKey
function UGridLaddersComponent:HandleBuildingBuilt(Sender, Building, Slot) end


---@class UGroundLevelAssetUserData : UAssetUserData
UGroundLevelAssetUserData = {}


---@class UHUDArmorWidget : UGameUserWidget
---@field HeadSlot FArmorEquipmentSlot
---@field ChestSlot FArmorEquipmentSlot
---@field LegSlot FArmorEquipmentSlot
UHUDArmorWidget = {}

function UHUDArmorWidget:OnGameModeChanged() end
---@param Item UItem
---@param EquipmentSlot EEquipmentSlot
function UHUDArmorWidget:OnEquipmentChangedImpl(Item, EquipmentSlot) end
---@param EquipmentSlot FArmorEquipmentSlot
function UHUDArmorWidget:OnEquipmentChanged(EquipmentSlot) end
---@param SlotStruct FArmorEquipmentSlot
function UHUDArmorWidget:OnDurabilityChanged(SlotStruct) end


---@class UHUDControlWidget : UGameUserWidget
UHUDControlWidget = {}

---@param ActionName FName
---@param FillWidget UHoldFillWidget
---@param DelayHold boolean
function UHUDControlWidget:NativeFillUpdate(ActionName, FillWidget, DelayHold) end


---@class UHUDCrosshairWidget : UGameUserWidget
---@field WontHitBrush FSlateBrush
---@field InvalidDamageBrush FSlateBrush
---@field WillHitBrush FSlateBrush
---@field MostRecentAttackOutcome EAttackResolutionType
UHUDCrosshairWidget = {}

---@param AttackResolution EAttackResolutionType
function UHUDCrosshairWidget:UpdateCursorBrush(AttackResolution) end
---@param NewInteractable TScriptInterface<IInteractableInterface>
function UHUDCrosshairWidget:OnPlayerAttackTargetChanged(NewInteractable) end
---@param NewController AController
function UHUDCrosshairWidget:OnCharacterControllerChanged(NewController) end
---@param DisplayMode ECameraDisplayMode
function UHUDCrosshairWidget:OnCameraModeChanged(DisplayMode) end
---@param Controller APlayerController
---@param bIsInBuildMode boolean
function UHUDCrosshairWidget:OnBuildModeStateChanged(Controller, bIsInBuildMode) end
---@param AttackResolution EAttackResolutionType
function UHUDCrosshairWidget:OnAttackResolutionChanged(AttackResolution) end


---@class UHUDDestroyStructureWidget : UGameUserWidget
---@field StructureContainer UCanvasPanel
---@field FragileText ULocalizedTextBlock
---@field SupportCount UGameTextBlock
---@field CountThrobber UCircularThrobber
---@field DangerIcon UImage
---@field RecycleWarningStop UWidgetAnimation
---@field RecycleWarning UWidgetAnimation
UHUDDestroyStructureWidget = {}

function UHUDDestroyStructureWidget:NativeUpdateData() end
---@param NormalColor FSlateColor
---@param WarningColor FSlateColor
function UHUDDestroyStructureWidget:InitSupportTextColors(NormalColor, WarningColor) end


---@class UHUDGasMaskWidget : UGameUserWidget
---@field WarningImage UImage
---@field InHazardIcon UImage
---@field DurabilityOverlay UOverlay
---@field GlideWarningAnim UWidgetAnimation
UHUDGasMaskWidget = {}



---@class UHUDInteractableWidget : UGameUserWidget
UHUDInteractableWidget = {}

---@param NewTarget UObject
function UHUDInteractableWidget:UpdateInteractionTargetChanged(NewTarget) end
function UHUDInteractableWidget:UpdateAttackResolutionChanged() end
---@param NewInteractable TScriptInterface<IInteractableInterface>
function UHUDInteractableWidget:OnPlayerInteractableChanged(NewInteractable) end
---@param NewTarget TScriptInterface<IInteractableInterface>
function UHUDInteractableWidget:OnPlayerAttackTargetChanged(NewTarget) end
---@param bIsPlacingBuilding boolean
function UHUDInteractableWidget:OnPlacingBuildingChanged(bIsPlacingBuilding) end
---@param SourceHealthComponent UHealthComponent
---@param NewHealth float
---@param OldHealth float
function UHUDInteractableWidget:OnInteractableHealthChanged(SourceHealthComponent, NewHealth, OldHealth) end
function UHUDInteractableWidget:OnEquipmentChanged() end
---@param AttackResolution EAttackResolutionType
function UHUDInteractableWidget:OnAttackResolutionChanged(AttackResolution) end
---@return UHealthComponent
function UHUDInteractableWidget:GetCurrentTargetHealth() end
---@return EAttackResolutionType
function UHUDInteractableWidget:GetCurrentAttackResolution() end


---@class UHUDInteractionManagerWidget : UGameUserWidget
---@field InteractScaler USizeBox
---@field MaxWidth4by3 float
---@field MaxWidth3by2 float
UHUDInteractionManagerWidget = {}

---@param ActionName FName
---@param InteractionChannel EInteractionChannel
---@param Visible ESlateVisibility
---@param Text FString
---@param bEnabled boolean
function UHUDInteractionManagerWidget:NativeWidgetStatus(ActionName, InteractionChannel, Visible, Text, bEnabled) end
function UHUDInteractionManagerWidget:NativeRefreshMaxSize() end


---@class UHUDMarkerData : UObject
---@field ReferenceActorServerObsidianGuid FGuid
---@field ReferenceActor TWeakObjectPtr<AActor>
---@field ReferenceLODActor TWeakObjectPtr<UBaseLODActor>
---@field AdditionalDataRowHandle FDataTableRowHandle_NetCrc
---@field QuestData FDataTableRowHandle_NetCrc
---@field RestrictedToPlayer FGuid
---@field Location FVector_NetQuantize
---@field MarkerType EHUDMarkerType
---@field MarkerListIndex int8
---@field MarkerTypeVariant int8
---@field MarkerTypeColorVariant int8
---@field DisplayName FString
---@field Color FColor
---@field FadeVariantMarkerType EHUDMarkerType
---@field ShowDistance boolean
---@field bIsCharacter boolean
---@field bShowOnlyNearby boolean
---@field bQuickStartup boolean
---@field bIsCluster boolean
---@field bTutorialQuest boolean
---@field bIsReferenceActorShowableTrigger boolean
---@field MarkerLifeTime float
---@field LifeTimeRemaining float
---@field ObjectiveReferencedActor AActor
---@field ObjectiveReferencedFoliageKey FFoliageKey
---@field DesiredItemObjectiveLocationRequest FDesiredItemObjectiveLocationRequest
---@field OnHUDMarkerDataChanged FHUDMarkerDataOnHUDMarkerDataChanged
---@field OnHUDMarkerObjectiveReferenceChanged FHUDMarkerDataOnHUDMarkerObjectiveReferenceChanged
UHUDMarkerData = {}

---@param Variant int32
function UHUDMarkerData:SetIconVariant(Variant) end
---@param NewName FString
function UHUDMarkerData:SetDisplayNameLocally(NewName) end
---@param NewName FString
function UHUDMarkerData:SetDisplayName(NewName) end
---@param Variant int32
function UHUDMarkerData:SetColorVariant(Variant) end
---@param NewColor FColor
function UHUDMarkerData:SetColor(NewColor) end
---@return boolean
function UHUDMarkerData:IsTutorialQuest() end
---@param NewGuid FGuid
function UHUDMarkerData:HandleReferencedActorGuidChanged(NewGuid) end
---@param Sender UBaseLODActor
function UHUDMarkerData:HandleLODActorConvertedToProxy(Sender) end
---@param Sender UBaseLODActor
function UHUDMarkerData:HandleLODActorConvertedToFull(Sender) end
function UHUDMarkerData:HandleHUDMarkerChanged() end
---@return boolean
function UHUDMarkerData:GetShowDistance() end
---@return boolean
function UHUDMarkerData:GetShouldShow() end
---@return FGuid
function UHUDMarkerData:GetRestrictedToPlayer() end
---@return UBaseLODActor
function UHUDMarkerData:GetReferencedLODActor() end
---@return AActor
function UHUDMarkerData:GetReferencedActor() end
---@return boolean
function UHUDMarkerData:GetQuickStartup() end
---@return FDataTableRowHandle
function UHUDMarkerData:GetQuestData() end
---@return int32
function UHUDMarkerData:GetMarkerVariant() end
---@return EHUDMarkerType
function UHUDMarkerData:GetMarkerType() end
---@return float
function UHUDMarkerData:GetMarkerLifeTime() end
---@return int32
function UHUDMarkerData:GetMarkerColorVariant() end
---@return FVector
function UHUDMarkerData:GetLocation() end
---@return float
function UHUDMarkerData:GetLifeTimeRemaining() end
---@return boolean
function UHUDMarkerData:GetIsCluster() end
---@return FString
function UHUDMarkerData:GetDisplayName() end
---@return FColor
function UHUDMarkerData:GetColor() end
---@return FDataTableRowHandle
function UHUDMarkerData:GetAdditionalData() end


---@class UHUDMarkerManagerComponent : USurvivalGameStateComponent
---@field RegisteredSpawnedItems TArray<ASpawnedItem>
---@field MarkerClusters TArray<FHUDMarkerCluster>
---@field RegisteredActorMarkerData FHUDMarkerArray
---@field RegisteredLODActorMarkerData FHUDMarkerArray
---@field RegisteredPlayerMarkerData FHUDMarkerArray
---@field RegisteredSpecificLocationMarkerData FHUDMarkerArray
---@field RegisteredItemObjectiveMarkerData FHUDMarkerArray
---@field RegisteredPlayerWaypointMarkerData FHUDMarkerArray
---@field ReplicatedMarkerList TArray<UHUDMarkerData>
---@field MaxHeightUsedForTopOfObjectiveMesh float
---@field OnMarkerAdded FHUDMarkerManagerComponentOnMarkerAdded
---@field OnMarkerRemoved FHUDMarkerManagerComponentOnMarkerRemoved
---@field OnPlayerMarkerAdded FHUDMarkerManagerComponentOnPlayerMarkerAdded
---@field OnPlayerMarkerRemoved FHUDMarkerManagerComponentOnPlayerMarkerRemoved
---@field OnPlayerWaypointAdded FHUDMarkerManagerComponentOnPlayerWaypointAdded
---@field OnPlayerWaypointRemoved FHUDMarkerManagerComponentOnPlayerWaypointRemoved
---@field OnShowFarHUDMarkersChanged FHUDMarkerManagerComponentOnShowFarHUDMarkersChanged
UHUDMarkerManagerComponent = {}

function UHUDMarkerManagerComponent:ToggleShowFarHUDMarkers() end
---@param OwningPlayer APlayerState
---@param Location FVector
---@param ShowDistance boolean
---@param Lifetime float
function UHUDMarkerManagerComponent:RegisterPlayerWaypointMarker(OwningPlayer, Location, ShowDistance, Lifetime) end
---@param Player ABuilderPawn
function UHUDMarkerManagerComponent:RegisterPlayerBuilder(Player) end
---@param Player APawn
function UHUDMarkerManagerComponent:RegisterPlayer(Player) end
---@param MarkerTag FString
---@param Quest FDataTableRowHandle
---@param Location FVector
---@param MarkerType EHUDMarkerType
---@param ShowDistance boolean
---@param Lifetime float
function UHUDMarkerManagerComponent:RegisterLocationMarker(MarkerTag, Quest, Location, MarkerType, ShowDistance, Lifetime) end
---@param ItemDataRowHandle FDataTableRowHandle
---@param Quest FDataTableRowHandle
---@param ShowDistance boolean
---@param Lifetime float
function UHUDMarkerManagerComponent:RegisterItemObjectiveMarker(ItemDataRowHandle, Quest, ShowDistance, Lifetime) end
---@param Actor AActor
function UHUDMarkerManagerComponent:RefreshActor(Actor) end
---@param PlayerState APlayerState
function UHUDMarkerManagerComponent:OnPlayerRemoved(PlayerState) end
---@param MarkerActor AActor
---@param NewName FString
function UHUDMarkerManagerComponent:MulticastSetHudMarkerNameLocally(MarkerActor, NewName) end
---@param Actor UBaseLODActor
---@param Quest FDataTableRowHandle
---@param AdditionalData FDataTableRowHandle
---@param MarkerType EHUDMarkerType
---@param IconVariant int32
---@param ColorVariant int32
---@param ShowDistance boolean
---@param Lifetime float
function UHUDMarkerManagerComponent:K2_RegisterLODActor(Actor, Quest, AdditionalData, MarkerType, IconVariant, ColorVariant, ShowDistance, Lifetime) end
---@param Actor AActor
---@param Quest FDataTableRowHandle
---@param AdditionalData FDataTableRowHandle
---@param MarkerType EHUDMarkerType
---@param IconVariant int32
---@param ColorVariant int32
---@param ShowDistance boolean
---@param Lifetime float
function UHUDMarkerManagerComponent:K2_RegisterActor(Actor, Quest, AdditionalData, MarkerType, IconVariant, ColorVariant, ShowDistance, Lifetime) end
---@return boolean
function UHUDMarkerManagerComponent:GetShowFarHUDMarkers() end
---@param Player ABuilderPawn
function UHUDMarkerManagerComponent:DeregisterPlayerBuilder(Player) end
---@param ActorToDeregister AActor
---@param MarkerType EHUDMarkerType
function UHUDMarkerManagerComponent:DeregisterActorMarker(ActorToDeregister, MarkerType) end
---@param Actor AActor
function UHUDMarkerManagerComponent:DeregisterActor(Actor) end
function UHUDMarkerManagerComponent:AddStartingMarkers() end


---@class UHUDMarkerWidget : UGameUserWidget
---@field MarkerData UHUDMarkerData
---@field LifeTimeRemaining float
---@field MarkerOpacity float
---@field MarkerDistance float
---@field MarkerDistanceTruncated int32
---@field DistanceText UTextBlock
---@field OuterBox UVerticalBox
---@field ArrowRotationOverlay UOverlay
---@field ArrowIcon UImage
---@field ProgressFillbar UProgressBar
UHUDMarkerWidget = {}

function UHUDMarkerWidget:UpdateMarkerPosition() end
function UHUDMarkerWidget:UpdateMarkerFade() end
function UHUDMarkerWidget:UpdateMarkerDistance() end
function UHUDMarkerWidget:UpdateBuildingMarkerHealth() end
---@return boolean
function UHUDMarkerWidget:ShouldShowMarkerProgressBar() end
---@return boolean
function UHUDMarkerWidget:ShouldShowMarkerArrow() end
---@return boolean
function UHUDMarkerWidget:ShouldMarkerLockToScreen() end
---@return boolean
function UHUDMarkerWidget:ShouldFadeMarkerAtEdge() end
---@param InMarkerData UHUDMarkerData
function UHUDMarkerWidget:SetMarkerData(InMarkerData) end
function UHUDMarkerWidget:RequestRenderRefresh() end
---@param AttackState EWaveAttackState
function UHUDMarkerWidget:OnWaveAttackStateChanged(AttackState) end
---@param PreviousMode EEditMode
---@param CurrentMode EEditMode
function UHUDMarkerWidget:OnEditModeChanged(PreviousMode, CurrentMode) end
---@param bActive boolean
function UHUDMarkerWidget:OnDefensePointActiveChanged(bActive) end
---@param PlayerController APlayerController
---@param IsInBuildMode boolean
function UHUDMarkerWidget:OnBuildModeStateChanged(PlayerController, IsInBuildMode) end
function UHUDMarkerWidget:OnBossDeactivated() end
function UHUDMarkerWidget:OnBossActivated() end
function UHUDMarkerWidget:HandleStickiedQuestChanged() end
---@return float
function UHUDMarkerWidget:GetMarkerScreenEdgeAlpha() end
---@return float
function UHUDMarkerWidget:GetMarkerLifetimeFade() end
---@return float
function UHUDMarkerWidget:GetDistanceTextScreenEdgeAlpha() end


---@class UHUDSCABFoodWidget : UGameUserWidget
---@field FoodDanger UWidgetAnimation
---@field FoodGainAnim UWidgetAnimation
---@field WarningCircle UImage
---@field FoodGainSound USoundBase
UHUDSCABFoodWidget = {}



---@class UHUDSCABWaterWidget : UGameUserWidget
---@field WaterDanger UWidgetAnimation
---@field WaterGainAnim UWidgetAnimation
---@field WarningCircle UImage
---@field WaterGainSound USoundBase
UHUDSCABWaterWidget = {}



---@class UHUDSCABWidget : UGameUserWidget
---@field ScannerImage UImage
---@field MidScannerImage UImage
---@field ScannerScalarParamName FName
---@field SignalArrived UWidgetAnimation
---@field SignalAppear UWidgetAnimation
---@field CurrentNormalizedTime float
---@field LastTransmitterFrame int32
---@field ShowTimeMode boolean
---@field ScannerMaterial UMaterialInstanceDynamic
---@field ScannerMidMaterial UMaterialInstanceDynamic
UHUDSCABWidget = {}

---@param NewHour int32
---@param NewDay int32
function UHUDSCABWidget:UpdateTimeOfDay(NewHour, NewDay) end
---@param NewRatio float
function UHUDSCABWidget:UpdateThirstRatio(NewRatio) end
---@param NewRatio float
function UHUDSCABWidget:UpdateStaminaRatio(NewRatio) end
function UHUDSCABWidget:UpdateRadarVisuals() end
---@param NewRatio float
function UHUDSCABWidget:UpdateHungerRatio(NewRatio) end
---@param NewHealthRatio float
function UHUDSCABWidget:UpdateHealthRatio(NewHealthRatio) end
---@param Show boolean
function UHUDSCABWidget:ShowTime(Show) end
---@param NewScannerStrength float
function UHUDSCABWidget:SetScannerMaterialParam(NewScannerStrength) end
---@param TransmitterComponent UTransmitterComponent
function UHUDSCABWidget:OnTransmitterChanged(TransmitterComponent) end
---@param NewHour int32
---@param NewDay int32
function UHUDSCABWidget:OnHourChange(NewHour, NewDay) end
---@return boolean
function UHUDSCABWidget:GetShowTimeMode() end
---@param Sender USurvivalComponent
---@param OldValue float
---@param NewValue float
function UHUDSCABWidget:CheckWaterChange(Sender, OldValue, NewValue) end
---@param NewRatio float
function UHUDSCABWidget:CheckStaminaRatio(NewRatio) end
---@param SourceHealthComponent UHealthComponent
---@param NewHealth float
---@param OldHealth float
function UHUDSCABWidget:CheckHealthChange(SourceHealthComponent, NewHealth, OldHealth) end
---@param Sender USurvivalComponent
---@param OldValue float
---@param NewValue float
function UHUDSCABWidget:CheckFoodChange(Sender, OldValue, NewValue) end


---@class UHUDTurretInfoWidget : UGameUserWidget
---@field CurrentTurret ATurretBuilding
UHUDTurretInfoWidget = {}

---@param Turret ATurretBuilding
function UHUDTurretInfoWidget:OnTurretChanged(Turret) end
---@param AmmoType FDataTableRowHandle
function UHUDTurretInfoWidget:OnAmmoTypeChanged(AmmoType) end
---@param ItemCount int32
function UHUDTurretInfoWidget:OnAmmoCountChanged(ItemCount) end
---@param TurretPawn ATurretPawn
function UHUDTurretInfoWidget:NotifyTurretPawnChanged(TurretPawn) end


---@class UHUDWeaponInfoWidget : UGameUserWidget
---@field MainHandItem UItem
---@field HolderPanel UCanvasPanel
---@field WeaponControlHolder UVerticalBox
---@field BuildingPlacementControlHolder UVerticalBox
---@field UI_MemoryPipsPlacement UMemoryPipsPlacementWidget
UHUDWeaponInfoWidget = {}

---@param NewRatio float
function UHUDWeaponInfoWidget:OnPowerChanged(NewRatio) end
---@param ChangedItem UItem
function UHUDWeaponInfoWidget:OnMainHandChanged(ChangedItem) end
---@param ItemCount int32
function UHUDWeaponInfoWidget:OnItemCountChanged(ItemCount) end
---@param ChangedItem UItem
---@param EquipmentSlot EEquipmentSlot
function UHUDWeaponInfoWidget:OnEquipmentChanged(ChangedItem, EquipmentSlot) end
---@param NewEnhancementLevel int32
function UHUDWeaponInfoWidget:OnEnhancementLevelChanged(NewEnhancementLevel) end
---@param NewRatio float
function UHUDWeaponInfoWidget:OnDurabilityChanged(NewRatio) end
---@param ItemName FName
function UHUDWeaponInfoWidget:OnAmmoTypeChanged(ItemName) end
---@param ItemCount int32
function UHUDWeaponInfoWidget:OnAmmoCountChanged(ItemCount) end


---@class UHUDWidget : UGameUserWidget
---@field UIInteract UGameUserWidget
---@field SlotsUsed UGameUserWidget
---@field TemporaryNotificationLog UNotificationLogBase
---@field bNotificationsSurpressed boolean
---@field InventoryComponent TWeakObjectPtr<UInventoryComponent>
---@field HUDMarkers TArray<UHUDMarkerWidget>
---@field PlayerNameplates TArray<UPlayerNameplateWidget>
UHUDWidget = {}

---@param Visible boolean
function UHUDWidget:SetSpyGlassOverlayVisibility(Visible) end
---@param Visible boolean
---@param bAlreadyScanned boolean
---@param BestiaryData FBestiaryUIData
function UHUDWidget:SetScanTargetVisibility(Visible, bAlreadyScanned, BestiaryData) end
---@param bSurpressed boolean
function UHUDWidget:SetNotificationsSupressed(bSurpressed) end
---@param HUDMarkerData UHUDMarkerData
function UHUDWidget:RemovePlayerNameplateWidget(HUDMarkerData) end
---@param HUDMarkerData UHUDMarkerData
function UHUDWidget:RemoveHUDMarkerWidget(HUDMarkerData) end
---@param bIsZiplining boolean
function UHUDWidget:OnZiplineMovementModeChanged(bIsZiplining) end
---@param Selector AZiplineSelectorPawn
function UHUDWidget:OnZiplineModeChanged(Selector) end
---@param TurretPawn ATurretPawn
function UHUDWidget:OnTurretModeChanged(TurretPawn) end
---@param IsConnectingTriggers boolean
function UHUDWidget:OnTriggerConnectionModeChanged(IsConnectingTriggers) end
---@param Target AActor
function UHUDWidget:OnTargetScanned(Target) end
---@param bIsSizzling boolean
---@param Actor AActor
function UHUDWidget:OnSizzlingChanged(bIsSizzling, Actor) end
---@param NewRatio float
---@param bIsLocalPlayer boolean
function UHUDWidget:OnSizzleCountdownChanged(NewRatio, bIsLocalPlayer) end
---@param Character ACharacter
---@param bIsSitting boolean
function UHUDWidget:OnSittingChangedImpl(Character, bIsSitting) end
---@param bIsSitting boolean
function UHUDWidget:OnSittingChanged(bIsSitting) end
---@param Sender UHealthComponent
function UHUDWidget:OnRevived(Sender) end
---@param Pawn APawn
function UHUDWidget:OnPlayerNewPawn(Pawn) end
---@param DamageInfo FDamageInfo
function UHUDWidget:OnPlayerDeathOrIncap(DamageInfo) end
function UHUDWidget:OnPerfectBlock() end
---@param Item UItem
function UHUDWidget:OnOffHandChanged(Item) end
---@param Item UItem
function UHUDWidget:OnMainHandChanged(Item) end
---@param bShowHUD boolean
function UHUDWidget:OnHUDShowChange(bShowHUD) end
---@param Sender UHaulingComponent
function UHUDWidget:OnHaulingChangedImpl(Sender) end
---@param bIsHauling boolean
function UHUDWidget:OnHaulingChanged(bIsHauling) end
---@param bIsGliding boolean
function UHUDWidget:OnGliderMovementModeChanged(bIsGliding) end
---@param Item UItem
function UHUDWidget:OnGliderChanged(Item) end
---@param bFullBreath boolean
function UHUDWidget:OnFullBreathChanged(bFullBreath) end
---@param Item UItem
---@param EquipmentSlot EEquipmentSlot
function UHUDWidget:OnEquipmentChanged(Item, EquipmentSlot) end
---@param bDeathCountdown boolean
function UHUDWidget:OnDeathCountdownChanged(bDeathCountdown) end
---@param bIsClimbing boolean
function UHUDWidget:OnClimbMovementModeChanged(bIsClimbing) end
---@param bIsPlacingBuilding boolean
function UHUDWidget:OnBuildingModeChanged(bIsPlacingBuilding) end
---@param Sender ABuilding
---@param IsFragile boolean
function UHUDWidget:OnBuildingFragileChanged(Sender, IsFragile) end
---@param bIsBlocking boolean
function UHUDWidget:OnBlockChanged(bIsBlocking) end
---@param HUDMarkerData UHUDMarkerData
---@return boolean
function UHUDWidget:IsPlayerNameplateDataActive(HUDMarkerData) end
---@param HUDMarkerData UHUDMarkerData
---@return boolean
function UHUDWidget:IsHUDMarkerDataActive(HUDMarkerData) end
---@param Level int32
function UHUDWidget:HandleNewGamePlusIntro(Level) end
---@param Message FString
---@param MessageIcon UTexture2D
function UHUDWidget:HandleGenericMessage(Message, MessageIcon) end
---@return UHUDSCABWidget
function UHUDWidget:GetSCAB() end
---@return UHotBarWidget
function UHUDWidget:GetHotBar() end
---@param PlayerNameplateWidget UPlayerNameplateWidget
function UHUDWidget:AddPlayerNameplateWidget(PlayerNameplateWidget) end
---@param HUDMarkerWidget UHUDMarkerWidget
function UHUDWidget:AddHUDMarkerWidget(HUDMarkerWidget) end


---@class UHairAppearanceData : UBaseAppearanceData
---@field DefaultMesh FSkeletalMeshAttachment
---@field HairMeshes TMap<FGameplayTag, FSkeletalMeshAttachment>
UHairAppearanceData = {}



---@class UHarvestNodeLODActor : UBaseLODActor
UHarvestNodeLODActor = {}


---@class UHarvestNodeLiteData : UActorLiteData
---@field GameLifetimeHours float
---@field bAllowFoliageRespawn boolean
---@field LODFullActorMaxDistance float
---@field ProxyStandInClass TSubclassOf<AProxyStandInActor>
---@field BlueprintMesh TSoftObjectPtr<UStreamableRenderAsset>
---@field BlueprintMaterials TArray<TSoftObjectPtr<UMaterialInterface>>
UHarvestNodeLiteData = {}



---@class UHatchingDataAsset : UDataAsset
---@field HatchOptions TArray<FEggHatchType>
---@field HatchVFX UVisualEffect
---@field HatchAudio USoundCue
UHatchingDataAsset = {}



---@class UHaulingComponent : UActorComponent
---@field Capacity int32
---@field bHaulAnything boolean
---@field OnBeginHauling FHaulingComponentOnBeginHauling
---@field OnEndHauling FHaulingComponentOnEndHauling
---@field OnHaulingChanged FHaulingComponentOnHaulingChanged
---@field HauledItems TArray<UItem>
---@field SerializedHauledItems TArray<UItem>
---@field HaulingInputComponent UInputComponent
UHaulingComponent = {}

---@param Item UItem
function UHaulingComponent:ServerRemoveItem(Item) end
function UHaulingComponent:ServerDropItem() end
function UHaulingComponent:ServerDropAll() end
---@param Item UItem
function UHaulingComponent:ServerAddItem(Item) end
---@param Item UItem
---@param Count int32
---@return int32
function UHaulingComponent:RemoveItem(Item, Count) end
function UHaulingComponent:OnStatusEffectChanged() end
---@param PreviousHauledItems TArray<UItem>
function UHaulingComponent:OnRep_HauledItems(PreviousHauledItems) end
---@param CurrentMode EEditMode
---@param NewMode EEditMode
function UHaulingComponent:OnPreEditModeChanged(CurrentMode, NewMode) end
---@param DamageInfo FDamageInfo
function UHaulingComponent:OnDeath(DamageInfo) end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function UHaulingComponent:OnDamage(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@param Character ACharacter
---@param PrevMovementMode EMovementMode
---@param PreviousCustomMode uint8
function UHaulingComponent:OnCharacterMovementChanged(Character, PrevMovementMode, PreviousCustomMode) end
---@param PlayerController APlayerController
---@param bInBuildMode boolean
function UHaulingComponent:OnBuildModeStateChanged(PlayerController, bInBuildMode) end
---@param Attack UAttack
function UHaulingComponent:OnAttackLaunch(Attack) end
---@return boolean
function UHaulingComponent:IsHaulingThrowableItems() end
---@return boolean
function UHaulingComponent:IsHaulingItems() end
---@param Item UItem
---@return boolean
function UHaulingComponent:IsHaulingItem(Item) end
function UHaulingComponent:InputDropReleased() end
function UHaulingComponent:InputDropPressed() end
---@return TArray<UItem>
function UHaulingComponent:GetItems() end
---@return int32
function UHaulingComponent:GetHaulingItemCount() end
---@param Item UItem
---@param Offset FVector
---@return FTransform
function UHaulingComponent:GetDropItemTransform(Item, Offset) end
---@return int32
function UHaulingComponent:GetAdjustedCapacity() end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
function UHaulingComponent:ClientOnItemAdded(ItemRowHandle) end
---@param Items TArray<UItem>
---@return boolean
function UHaulingComponent:CanAddItems(Items) end
---@param ItemRowHandles TArray<FDataTableRowHandle>
---@return boolean
function UHaulingComponent:CanAddItemRowHandles(ItemRowHandles) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UHaulingComponent:CanAddItemRowHandle(ItemRowHandle) end
---@param Item UItem
---@return boolean
function UHaulingComponent:CanAddItem(Item) end
---@param Item UItem
---@param bIsNewItem boolean
function UHaulingComponent:AddItem(Item, bIsNewItem) end


---@class UHaulingComponentLiteData : UComponentLiteData
---@field bHaulAnything boolean
---@field Capacity int32
UHaulingComponentLiteData = {}



---@class UHaulingLODComponent : UBaseLODComponent
UHaulingLODComponent = {}


---@class UHealthComponent : UActorComponent
---@field BaseDamageReduction float
---@field ImmunityFlags uint32
---@field RequiredDamageTypeFlags uint32
---@field FriendlyFireType EFriendlyFireType
---@field RequiredDamageTypeTier uint8
---@field PlayDamagedParticlesOnDeath boolean
---@field bCanDieFromDamage boolean
---@field bCanDieEver boolean
---@field bCanBeRepaired boolean
---@field bCanBePushed boolean
---@field bRegenOutOfCombat boolean
---@field bAllowRepairWhenCantBeDamaged boolean
---@field bRepairDisabled boolean
---@field bAffectsDurability boolean
---@field bCanDieFromFragility boolean
---@field CurrentFragilityLevel uint8
---@field FragileTime float
---@field ColliderConfigs TArray<FHealthColliderConfig>
---@field ThreatDamageConfigs TArray<FThreatDamageModifierConfig>
---@field OnHit FHealthComponentOnHit
---@field OnNoDamageHit FHealthComponentOnNoDamageHit
---@field OnDamaged FHealthComponentOnDamaged
---@field OnDeath FHealthComponentOnDeath
---@field OnIncapacitated FHealthComponentOnIncapacitated
---@field OnRevive FHealthComponentOnRevive
---@field OnHealthStateChanged FHealthComponentOnHealthStateChanged
---@field OnHealthChanged FHealthComponentOnHealthChanged
---@field OnFragileStateChanged FHealthComponentOnFragileStateChanged
---@field OnFragilityLevelChanged FHealthComponentOnFragilityLevelChanged
---@field OnHandleNoDamageEffects FHealthComponentOnHandleNoDamageEffects
---@field OnHandleDamageEffects FHealthComponentOnHandleDamageEffects
---@field OnHandleDeathEffects FHealthComponentOnHandleDeathEffects
---@field OnIncapacitatationRatioChange FHealthComponentOnIncapacitatationRatioChange
---@field OnDecayed FHealthComponentOnDecayed
---@field OnNoDamagedParticles TArray<UVisualEffect>
---@field OnDamagedParticles TArray<UVisualEffect>
---@field OnDeathParticles TArray<UVisualEffect>
---@field FallbackToCharacterAudio boolean
---@field OnNoDamagedSFX USoundCue
---@field OnDamagedSFX USoundCue
---@field OnDeathSFX USoundCue
---@field HealthFleeThreshold float
---@field MaxHits uint16
---@field OverrideTargetTokens uint8
---@field bShowDamageInteractUI boolean
---@field bShowDamageInteractUIWhenDead boolean
---@field HealthState EHealthState
---@field HealthStateOnLoad EHealthState
---@field IncapacitationSetting EIncapacitationSetting
---@field MaxHealth float
---@field CurrentDamage float
---@field ReviveHealthPercentage float
---@field ReviveTime float
---@field ReviveStartTime float
---@field IncapacitationTime float
---@field IncapacitationTimer float
---@field ReviveImmunityTime float
---@field LifetimeTimer FTimerHandle
---@field FragileDeathTime float
---@field LastChatterRequestTime float
---@field ReviveAnim UAnimMontage
---@field TimeUntilDecay float
---@field HealthPerHourRested float
---@field KillAction UGoapActionKill
---@field Reviver TWeakObjectPtr<AActor>
---@field KilledByDamageType TSubclassOf<UDamageType>
---@field TimeForMemorizingPushback float
UHealthComponent = {}

function UHealthComponent:ToggleShowHealthDebug() end
---@return boolean
function UHealthComponent:ShowDamageInteractUIWhenDead() end
---@return boolean
function UHealthComponent:ShowDamageInteractUI() end
---@param DesiredHealth float
function UHealthComponent:SetCurrentHealth(DesiredHealth) end
---@param DesiredDamage float
function UHealthComponent:SetCurrentDamage(DesiredDamage) end
function UHealthComponent:ServerKill() end
---@param InReviver AActor
function UHealthComponent:Revive(InReviver) end
function UHealthComponent:Restore() end
---@param Owner AActor
---@param StatusEffect UStatusEffect
function UHealthComponent:OnStatusEffectChanged(Owner, StatusEffect) end
---@param RestDuration float
function UHealthComponent:OnRest(RestDuration) end
function UHealthComponent:OnRep_Reviver() end
---@param PrevHealthState EHealthState
function UHealthComponent:OnRep_HealthState(PrevHealthState) end
function UHealthComponent:OnRep_CurrentFragilityLevel() end
---@param PrevDamage float
function UHealthComponent:OnRep_CurrentDamage(PrevDamage) end
---@param Sender UAuraReceiverComponent
---@param AuraCount int32
function UHealthComponent:OnPlayerScalingCountChanged(Sender, AuraCount) end
---@param Character ASurvivalCharacter
---@param bInCombat boolean
function UHealthComponent:OnCombatChanged(Character, bInCombat) end
---@param Damage float
---@param DamageFlags int32
---@param PlayEffectType EPlayEffectType
function UHealthComponent:MulticastHandleEffectsWithDamageFlagsAtOwnerLocation(Damage, DamageFlags, PlayEffectType) end
---@param HitLocation FVector_NetQuantize
---@param Damage float
---@param DamageFlags int32
---@param PlayEffectType EPlayEffectType
function UHealthComponent:MulticastHandleEffectsWithDamageFlags(HitLocation, Damage, DamageFlags, PlayEffectType) end
---@param HitLocation FVector
---@param Damage float
---@param DamageInfo FDamageInfo
---@param PlayEffectType EPlayEffectType
function UHealthComponent:MulticastHandleEffects(HitLocation, Damage, DamageInfo, PlayEffectType) end
function UHealthComponent:Kill() end
---@return boolean
function UHealthComponent:IsReviving() end
---@return boolean
function UHealthComponent:IsKnockedOut() end
---@return boolean
function UHealthComponent:IsIncapacitated() end
---@return boolean
function UHealthComponent:IsFragile() end
---@return boolean
function UHealthComponent:IsDead() end
---@return boolean
function UHealthComponent:IsDamaged() end
function UHealthComponent:Incapacitate() end
function UHealthComponent:HandleOutOfCombatRegen() end
function UHealthComponent:HandleDecay() end
---@return float
function UHealthComponent:GetReviveTimeRatio() end
---@return float
function UHealthComponent:GetReviveTime() end
---@return int32
function UHealthComponent:GetRequiredDamageTypeFlags() end
---@return uint8
function UHealthComponent:GetRequiredDamageTier() end
---@return float
function UHealthComponent:GetMaxHits() end
---@return float
function UHealthComponent:GetMaxHealth() end
---@return float
function UHealthComponent:GetInverseHealthRatio() end
---@return float
function UHealthComponent:GetIncapacitatedTimeRatio() end
---@return EHealthState
function UHealthComponent:GetHealthState() end
---@return float
function UHealthComponent:GetHealthRatio() end
---@return float
function UHealthComponent:GetFragileProgress() end
---@return float
function UHealthComponent:GetDamageReduction() end
---@return float
function UHealthComponent:GetCurrentHealth() end
---@return float
function UHealthComponent:GetCurrentDamage() end
---@return boolean
function UHealthComponent:CanBeRepaired() end
---@param Causer UBaseLODActor
function UHealthComponent:ApplyHit(Causer) end
---@param Damage float
---@param DamageEvent FDamageEvent
---@param DamageInfo FDamageInfo
function UHealthComponent:ApplyDamageFromInfo(Damage, DamageEvent, DamageInfo) end
---@param Damage float
---@param DamageEvent FDamageEvent
---@param EventInstigator AController
---@param DamageCauser AActor
function UHealthComponent:ApplyDamage(Damage, DamageEvent, EventInstigator, DamageCauser) end
---@param Amount float
---@param Causer UBaseLODActor
function UHealthComponent:AddHealth(Amount, Causer) end


---@class UHealthComponentLiteData : UComponentLiteData
---@field MaxHits float
---@field MaxHealth float
UHealthComponentLiteData = {}



---@class UHealthLODComponent : UBaseLODComponent
UHealthLODComponent = {}

function UHealthLODComponent:Kill() end
---@return boolean
function UHealthLODComponent:IsDead() end
---@param DamageInfo FDamageInfo
function UHealthLODComponent:HandleOnDeath(DamageInfo) end


---@class UHealthReadoutWidget : UGameUserWidget
---@field LastPlayerHealth float
---@field CurrentDisplayedHealth float
---@field HealthRatio float
UHealthReadoutWidget = {}

function UHealthReadoutWidget:UpdateHealthAnim() end
---@param SourceHealthComponent UHealthComponent
---@param NewHealth float
---@param OldHealth float
function UHealthReadoutWidget:CheckHealthChange(SourceHealthComponent, NewHealth, OldHealth) end


---@class UHeatHazardComponent : UActorComponent
---@field OwnerSizzles boolean
---@field SizzleRateMultiplier float
---@field MaxSizzle float
---@field HeatHazardExitDecayRate float
---@field ExitDecayOnAdditiveSizzleDelayTime float
---@field TakesSizzleDamage boolean
---@field SizzlingDamageAmount float
---@field SizzlingDamageTickRate float
---@field SizzlePercentOnRevive float
---@field SizzlePercentOnReviveThreshold float
---@field TestShadows boolean
---@field ShadowSweepRadius float
---@field ShadowDistanceMultiplier float
---@field TestSurface boolean
---@field DefaultDamageData FDamageData
---@field OnSizzleRatioChanged FHeatHazardComponentOnSizzleRatioChanged
---@field OnSizzleStateChanged FHeatHazardComponentOnSizzleStateChanged
---@field CurrentSizzle float
---@field PostProcessMaterial UMaterialInterface
---@field TimeOfDayMPC UMaterialParameterCollection
---@field HeatHazardMPC UMaterialParameterCollection
---@field HeatHazardState TMap<EHeatHazardCondition, FHeatHazardConditionState>
---@field LastTouchedPhysicalMaterial EPhysicalSurface
---@field EmitterResults TArray<FHeatEmitterTraceResult>
---@field SunLight UDirectionalLightComponent
---@field CurrentHazardVolume AHeatHazardVolume
---@field PostProcessMaterialInstance UMaterialInstanceDynamic
UHeatHazardComponent = {}

---@param Condition EHeatHazardCondition
---@param Active boolean
---@return boolean
function UHeatHazardComponent:SetHazardStateActive(Condition, Active) end
---@param NewSizzle float
function UHeatHazardComponent:SetCurrentSizzle(NewSizzle) end
---@param HazardVolume AHeatHazardVolume
function UHeatHazardComponent:SetCurrentHeatHazardVolume(HazardVolume) end
---@param Sender UHealthComponent
function UHeatHazardComponent:OnRevive(Sender) end
---@param NewHour int32
---@param NewDay int32
function UHeatHazardComponent:OnHourChanged(NewHour, NewDay) end
---@param OverlappedActor AActor
---@param OtherActor AActor
function UHeatHazardComponent:OnHeatVolumeEndOverlap(OverlappedActor, OtherActor) end
---@param OverlappedActor AActor
---@param OtherActor AActor
function UHeatHazardComponent:OnHeatVolumeBeginOverlap(OverlappedActor, OtherActor) end
---@param NewHealthState EHealthState
function UHeatHazardComponent:OnHealthStateChanged(NewHealthState) end
function UHeatHazardComponent:OnGameModeChanged() end
---@return float
function UHeatHazardComponent:GetSummedEmitterValues() end
---@return float
function UHeatHazardComponent:GetStrongestEmitterValue() end
---@return FHeatEmitterTraceResult
function UHeatHazardComponent:GetStrongestEmitter() end
---@return float
function UHeatHazardComponent:GetNearestEmitterValue() end
---@return TArray<FHeatEmitterTraceResult>
function UHeatHazardComponent:GetNearbyHeatEmitters() end
---@param Condition EHeatHazardCondition
---@return float
function UHeatHazardComponent:GetHazardStateDuration(Condition) end
---@param Condition EHeatHazardCondition
---@return boolean
function UHeatHazardComponent:GetHazardStateActive(Condition) end
---@return float
function UHeatHazardComponent:GetCurrentSizzleRatio() end
---@return float
function UHeatHazardComponent:GetCurrentSizzle() end


---@class UHoldFillWidget : UGameUserWidget
---@field HoldFill UImage
---@field FillGranularity float
---@field FillMaterialParamName FName
UHoldFillWidget = {}



---@class UHotBarQuickSlot : UPersistentObject
---@field QuickSlotType EHotBarQuickSlotType
---@field CurrentItem UItem
---@field AssignedItemKey FHotBarQuickSlotItemTypeKey
UHotBarQuickSlot = {}

function UHotBarQuickSlot:OnRep_PropertyChanged() end
---@param NewSlotType EHotBarQuickSlotType
function UHotBarQuickSlot:ChangeQuickSlotType(NewSlotType) end
---@param ItemKey FHotBarQuickSlotItemTypeKey
function UHotBarQuickSlot:AssignItemKey(ItemKey) end
---@param Item UItem
function UHotBarQuickSlot:AssignItem(Item) end


---@class UHotBarWidget : UGameUserWidget
---@field SelectedSlot int32
---@field CurrentPage int32
---@field bUsingHotBar boolean
---@field SelectedItem TWeakObjectPtr<UItem>
UHotBarWidget = {}

function UHotBarWidget:OnSelectedItemChanged() end
---@param NewItem UItem
function UHotBarWidget:NewSelectedItem(NewItem) end


---@class UHourBasedOneShotsData : UDataAsset
---@field HourlyEntries TArray<FHourBasedOneShotBundle>
UHourBasedOneShotsData = {}



---@class UHungerReadoutWidget : UGameUserWidget
---@field LastPlayerHunger float
---@field CurrentDisplayedHunger float
---@field HungerRatio float
UHungerReadoutWidget = {}

function UHungerReadoutWidget:UpdateHungerAnim() end
---@param OldMode EEditMode
---@param NewMode EEditMode
function UHungerReadoutWidget:HandleEditModeChanged(OldMode, NewMode) end
---@param Sender USurvivalComponent
---@param OldValue float
---@param NewValue float
function UHungerReadoutWidget:CheckFoodChange(Sender, OldValue, NewValue) end


---@class UIconKeyItem : UObject
---@field bIsHeader boolean
---@field DisplayData FDataTableRowHandle
UIconKeyItem = {}

---@param CategoryRow FDataTableRowHandle
function UIconKeyItem:SetIconKeyHeader(CategoryRow) end
---@param IconRow FDataTableRowHandle
function UIconKeyItem:SetIconKeyData(IconRow) end


---@class UIconKeyItemPopulator : UGameUserWidget
UIconKeyItemPopulator = {}


---@class UInGameMenuWidget : UWindowWidget
UInGameMenuWidget = {}

---@param NewValue boolean
function UInGameMenuWidget:SetShowDebugMenu(NewValue) end
---@return boolean
function UInGameMenuWidget:GetShowDebugMenu() end


---@class UIncapacitateWindowWidget : UWindowWidget
UIncapacitateWindowWidget = {}


---@class UInstancedBuildingClassUserData : UAssetUserData
---@field BuildingClass UClass
UInstancedBuildingClassUserData = {}



---@class UInstancedStaticMeshFunctionLibrary : UBlueprintFunctionLibrary
UInstancedStaticMeshFunctionLibrary = {}

---@param Component UInstancedStaticMeshComponent
---@param Center FVector
---@param Radius float
---@return int32
function UInstancedStaticMeshFunctionLibrary:GetClosestInstanceInRadius(Component, Center, Radius) end
---@param Component UInstancedStaticMeshComponent
---@param Center FVector
---@param Radius float
---@param OutInstances TArray<int32>
function UInstancedStaticMeshFunctionLibrary:GatherInstancesInRadius(Component, Center, Radius, OutInstances) end


---@class UInteractFillWidget : UGameUserWidget
UInteractFillWidget = {}


---@class UInteractableFunctionLibrary : UBlueprintFunctionLibrary
UInteractableFunctionLibrary = {}

---@param Interactable UObject
---@param Channel EInteractionChannel
---@param InstigatedBy AActor
---@return boolean
function UInteractableFunctionLibrary:ShowInteractionInterface(Interactable, Channel, InstigatedBy) end
---@param Interactable UObject
---@param InstigatedBy AActor
---@return boolean
function UInteractableFunctionLibrary:ShouldShowAnyInteractionInterface(Interactable, InstigatedBy) end
---@param Source UObject
---@param InstigatedBy AActor
---@param Warning FText
function UInteractableFunctionLibrary:SendInteractError(Source, InstigatedBy, Warning) end
---@param Interactable UObject
---@param InstigatedBy AActor
---@param InteractionChannel EInteractionChannel
---@return boolean
function UInteractableFunctionLibrary:IsInteractionTypeAvailable(Interactable, InstigatedBy, InteractionChannel) end
---@param Interactable UObject
---@param InstigatedBy AActor
---@return boolean
function UInteractableFunctionLibrary:IsAnyInteractionEnabled(Interactable, InstigatedBy) end
---@param InstigatedBy AActor
---@return UItem
function UInteractableFunctionLibrary:GetInteractItem(InstigatedBy) end
---@param Interactable UObject
---@param InstigatedBy AActor
---@return EInteractionType
function UInteractableFunctionLibrary:GetFirstEnabledPrimaryInteractionType(Interactable, InstigatedBy) end


---@class UInteractionWidget : UWindowWidget
---@field OnInitializeDelegate FInteractionWidgetOnInitializeDelegate
---@field OnClose FInteractionWidgetOnClose
---@field bCloseOnInteract boolean
---@field bIsInitialized boolean
---@field InteractableActor AActor
UInteractionWidget = {}

---@param TargetActor AActor
function UInteractionWidget:HandleInitialize(TargetActor) end
---@return AActor
function UInteractionWidget:GetInteractableActor() end
---@param WidgetClass TSoftClassPtr<UInteractionWidget>
---@return UInteractionWidget
function UInteractionWidget:CreateSubInteractionWidget(WidgetClass) end


---@class UInterestComponent : UActorComponent
---@field OnActivityModeChanged FInterestComponentOnActivityModeChanged
---@field Core UInterestCore
---@field FoodTags FGameplayTagContainer
---@field TirednessTag FGameplayTag
---@field bShouldDropBreadcrumbs boolean
---@field FleeBreadcrumbAction UGoapAction
---@field BaselineAction UGoapAction
---@field VitalValues TArray<TSubclassOf<UBaseVitalStat>>
---@field WorldEvaluators TArray<UGoapWorldStateEvaluator>
UInterestComponent = {}

function UInterestComponent:VisitBreadcrumb() end
---@return boolean
function UInterestComponent:HasInterest() end
---@return boolean
function UInterestComponent:HasDesiredBreadcrumb() end
---@param Sender UInterestCore
---@param Mode ECreatureActivityMode
function UInterestComponent:HandleCoreActivityModeChanged(Sender, Mode) end
---@return TArray<UGoapWorldStateEvaluator>
function UInterestComponent:GetWorldEvaluators() end
---@param Tag FGameplayTag
---@param Value float
---@return boolean
function UInterestComponent:GetVitalValueBySemantic(Tag, Value) end
---@param Stat UBaseVitalStat
---@param Value float
---@return boolean
function UInterestComponent:GetVitalValue(Stat, Value) end
---@return FVitalState
function UInterestComponent:GetVitalState() end
---@return TMap<UBaseVitalStat, FVitalStatValue>
function UInterestComponent:GetVitals() end
---@return FGameplayTag
function UInterestComponent:GetTirednessTag() end
---@return FRealInterestState
function UInterestComponent:GetState() end
---@return boolean
function UInterestComponent:GetShouldDropBreadcrumbs() end
---@return FGameplayTagContainer
function UInterestComponent:GetFoodTags() end
---@return UGoapAction
function UInterestComponent:GetFleeBreadcrumbAction() end
---@return FRotator
function UInterestComponent:GetDesiredTargetRotation() end
---@return FVector
function UInterestComponent:GetDesiredTargetLocation() end
---@return AActor
function UInterestComponent:GetDesiredTargetActor() end
---@return UAttractionComponent
function UInterestComponent:GetDesiredTarget() end
---@return FVector
function UInterestComponent:GetBreadcrumbActionLocation() end
---@return FGoapActionInstance
function UInterestComponent:GetBreadcrumbAction() end
---@return UGoapAction
function UInterestComponent:GetBaselineAction() end
---@return ECreatureActivityMode
function UInterestComponent:GetActivityMode() end
---@param Tag FGameplayTag
---@param Adjustment float
function UInterestComponent:AdjustVitalValueBySemantic(Tag, Adjustment) end
---@param Stat UBaseVitalStat
---@param Adjustment float
function UInterestComponent:AdjustVitalValue(Stat, Adjustment) end


---@class UInterestCore : UObject
---@field OnActionExecuted FInterestCoreOnActionExecuted
---@field OnVitalChanged FInterestCoreOnVitalChanged
---@field OnActivityModeChanged FInterestCoreOnActivityModeChanged
---@field Config FInterestConfig
---@field UnreachableActions TMap<UObject, FUnreachableActionData>
---@field DesiredActionSequence TArray<FGoapActionInstance>
---@field PreviousAction FGoapActionInstance
---@field BreadcrumbAction FGoapActionInstance
---@field DesiredAction FGoapActionInstance
UInterestCore = {}

---@return boolean
function UInterestCore:ShouldTrackDesiredTarget() end
---@return boolean
function UInterestCore:ShouldInteractWithFace() end
---@param Tag FGameplayTag
---@param Value float
---@return boolean
function UInterestCore:SetVitalValueBySemantic(Tag, Value) end
---@param Mode ECreatureActivityMode
function UInterestCore:SetActivityMode(Mode) end
---@return boolean
function UInterestCore:HasInterest() end
---@return boolean
function UInterestCore:HasDesiredBreadcrumb() end
---@param Tag FGameplayTag
---@param Value float
---@return boolean
function UInterestCore:GetVitalValueBySemantic(Tag, Value) end
---@param Stat UBaseVitalStat
---@param Value float
---@return boolean
function UInterestCore:GetVitalValue(Stat, Value) end
---@return FVitalState
function UInterestCore:GetVitalState() end
---@return TMap<UBaseVitalStat, FVitalStatValue>
function UInterestCore:GetVitals() end
---@return FGameplayTag
function UInterestCore:GetTirednessTag() end
---@return FRealInterestState
function UInterestCore:GetState() end
---@return boolean
function UInterestCore:GetShouldDropBreadcrumbs() end
---@return float
function UInterestCore:GetPetHappinessNormalized() end
---@return EMustLandState
function UInterestCore:GetMustLand() end
---@return FGameplayTagContainer
function UInterestCore:GetFoodTags() end
---@return EFaceTargetType
function UInterestCore:GetFacingBehavior() end
---@return FRotator
function UInterestCore:GetDesiredTargetRotation() end
---@return FVector
function UInterestCore:GetDesiredTargetLocation() end
---@return UAttractionComponent
function UInterestCore:GetDesiredTarget() end
---@return FVector
function UInterestCore:GetBreadcrumbActionLocation() end
---@return FGoapActionInstance
function UInterestCore:GetBreadcrumbAction() end
---@return ECreatureActivityMode
function UInterestCore:GetActivityMode() end
---@param Tag FGameplayTag
---@param Adjustment float
function UInterestCore:AdjustVitalValueBySemantic(Tag, Adjustment) end
---@param Stat UBaseVitalStat
---@param Adjustment float
function UInterestCore:AdjustVitalValue(Stat, Adjustment) end


---@class UInterestManagerComponent : UActorComponent
---@field ImmediateScanList TArray<UInterestCore>
---@field MovingLODAdvertisements TArray<UAttractionLODComponent>
---@field FullAdvertisements TArray<UAttractionComponent>
UInterestManagerComponent = {}



---@class UInterfaceCamSpringArmComponent : USpringArmComponent
---@field CameraLocalRotationZ float
UInterfaceCamSpringArmComponent = {}



---@class UInterfaceManagerComponent : UActorComponent
---@field OnWindowLocksChanged FInterfaceManagerComponentOnWindowLocksChanged
---@field OpenExclusiveWindows TArray<FWindowLock>
---@field ExclusiveWindows TArray<TSoftClassPtr<UWindowWidget>>
UInterfaceManagerComponent = {}

function UInterfaceManagerComponent:OnRep_OpenExclusiveWindows() end
---@param Window TSoftClassPtr<UWindowWidget>
---@return boolean
function UInterfaceManagerComponent:IsWindowLocked(Window) end
---@param Window TSoftClassPtr<UWindowWidget>
---@return AActor
function UInterfaceManagerComponent:GetWindowLocker(Window) end


---@class UInventoryComponent : UActorComponent
---@field UsingGliderItem UItem
---@field BestGliderItem UItem
---@field BestGliderQty int32
---@field OnInventoryChanged FInventoryComponentOnInventoryChanged
---@field OnInventoryItemChanged FInventoryComponentOnInventoryItemChanged
---@field OnInventoryItemEnhanced FInventoryComponentOnInventoryItemEnhanced
---@field OnItemAdded FInventoryComponentOnItemAdded
---@field OnItemPickupNotification FInventoryComponentOnItemPickupNotification
---@field OnItemRemoved FInventoryComponentOnItemRemoved
---@field OnItemCrafted FInventoryComponentOnItemCrafted
---@field OnInventoryItemSpoiled FInventoryComponentOnInventoryItemSpoiled
---@field OnInventoryItemStashed FInventoryComponentOnInventoryItemStashed
---@field OnInventoryStashFailure FInventoryComponentOnInventoryStashFailure
---@field OnItemCraftedWithFullInventory FInventoryComponentOnItemCraftedWithFullInventory
---@field OnBestGliderChanged FInventoryComponentOnBestGliderChanged
---@field InventoryOwnerType EInventoryOwnerType
---@field Items TArray<UItem>
---@field AttractionComponent UAttractionComponent
---@field MaxSize int32
---@field bAllowStacking boolean
---@field bExposedToAI boolean
---@field bAllowHauledItems boolean
---@field bAllowAddItems boolean
---@field bBlockOnItemAddedBroadcast boolean
---@field bBlockClientOnItemAddedNotifications boolean
---@field bSuspendItemSpoiling boolean
---@field TakeItemTemplate UGoapActionGetItem
---@field DumpItemTemplate UGoapActionDumpItem
UInventoryComponent = {}

---@param RecipeRowHandle FDataTableRowHandle
---@param bEquip boolean
---@param CraftCount int32
---@return boolean
function UInventoryComponent:TryCraftItem(RecipeRowHandle, bEquip, CraftCount) end
---@param Item UItem
---@param ToInventory UInventoryComponent
---@param Count int32
---@param MatchItemSlot boolean
function UInventoryComponent:ServerTransferItemTo(Item, ToInventory, Count, MatchItemSlot) end
---@param Item UItem
---@param FromInventory UInventoryComponent
---@param Count int32
---@param MatchItemSlot boolean
function UInventoryComponent:ServerTransferItemFrom(Item, FromInventory, Count, MatchItemSlot) end
---@param ToInventory UInventoryComponent
---@param IsNewItem boolean
function UInventoryComponent:ServerTransferAllTo(ToInventory, IsNewItem) end
---@param FromInventory UInventoryComponent
---@param IsNewItem boolean
function UInventoryComponent:ServerTransferAllFrom(FromInventory, IsNewItem) end
---@param Item1 UItem
---@param Index1 int32
---@param Inventory2 UInventoryComponent
---@param Item2 UItem
---@param Index2 int32
function UInventoryComponent:ServerSwapItemSlotsBetweenInventories(Item1, Index1, Inventory2, Item2, Index2) end
---@param SourceInventory UInventoryComponent
---@param Item1 UItem
---@param Index1 int32
---@param Item2 UItem
---@param Index2 int32
function UInventoryComponent:ServerSwapItemSlots(SourceInventory, Item1, Index1, Item2, Index2) end
function UInventoryComponent:ServerSort() end
---@param ItemDataRowHandle FDataTableRowHandle_NetCrc
---@param Count int32
function UInventoryComponent:ServerRemoveItemMatchingItemData(ItemDataRowHandle, Count) end
---@param Index int32
---@param Count int32
function UInventoryComponent:ServerRemoveItemAtIndex(Index, Count) end
---@param Item UItem
---@param Count int32
function UInventoryComponent:ServerRemoveItem(Item, Count) end
function UInventoryComponent:ServerRemoveAllItems() end
---@param SourceInventory UInventoryComponent
---@param SourceItem UItem
---@param DestinationItem UItem
function UInventoryComponent:ServerMergeItemStacks(SourceInventory, SourceItem, DestinationItem) end
---@param Item UItem
---@param Count int32
function UInventoryComponent:ServerDropItem(Item, Count) end
---@param SingleItem boolean
function UInventoryComponent:ServerDefragInventory(SingleItem) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
function UInventoryComponent:ServerCreateAndDropItem(ItemRowHandle) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param Count int32
function UInventoryComponent:ServerCreateAndAddItem(ItemRowHandle, Count) end
---@param RecipeRowHandle FDataTableRowHandle_NetCrc
---@param DestinationInventory UInventoryComponent
---@param RecipeModItem UItem
function UInventoryComponent:ServerCraftRecipeForInventory(RecipeRowHandle, DestinationInventory, RecipeModItem) end
---@param RecipeRowHandle FDataTableRowHandle_NetCrc
---@param DestinationInventory UInventoryComponent
---@param RecipeModRowHandle FDataTableRowHandle_NetCrc
function UInventoryComponent:ServerCraftRecipeDataForInventory(RecipeRowHandle, DestinationInventory, RecipeModRowHandle) end
---@param RecipeRowHandle FDataTableRowHandle_NetCrc
---@param bEquip boolean
---@param CraftCount int32
function UInventoryComponent:ServerCraftRecipe(RecipeRowHandle, bEquip, CraftCount) end
---@param Item UItem
---@param IsNewItem boolean
function UInventoryComponent:ServerAddItem(Item, IsNewItem) end
---@param Item UItem
---@param Count int32
---@return int32
function UInventoryComponent:RemoveItem(Item, Count) end
---@return UItem
function UInventoryComponent:PopRandomItem() end
---@return UItem
function UInventoryComponent:PopItem() end
---@return UItem
function UInventoryComponent:PeekItem() end
---@param PreviousItems TArray<UItem>
function UInventoryComponent:OnRep_Items(PreviousItems) end
function UInventoryComponent:OnRep_BestGliderQty() end
function UInventoryComponent:OnRep_BestGliderItem() end
function UInventoryComponent:OnItemsChanged() end
function UInventoryComponent:OnItemEnhanced() end
function UInventoryComponent:OnItemChanged() end
---@param OriginalItemHandle FDataTableRowHandle
---@param SpoiledResultHandle FDataTableRowHandle
function UInventoryComponent:NotifyItemSpoiled(OriginalItemHandle, SpoiledResultHandle) end
---@param SlotIndex int32
---@return boolean
function UInventoryComponent:IsSlotAvailable(SlotIndex) end
---@return boolean
function UInventoryComponent:IsInventoryFull() end
---@return boolean
function UInventoryComponent:IsInventoryEmpty() end
---@param Requirements TArray<FRecipeRequirements>
---@return boolean
function UInventoryComponent:HasRequirements(Requirements) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UInventoryComponent:HasAnySpaceForItemHandle(ItemRowHandle) end
---@param Item UItem
---@return boolean
function UInventoryComponent:HasAnySpaceForItem(Item) end
---@param Item UItem
---@param Slot EEquipmentSlot
function UInventoryComponent:HandleEquipmentSlotChanged(Item, Slot) end
---@return int32
function UInventoryComponent:GetTotalItemCount() end
---@return int32
function UInventoryComponent:GetNextAvailableInventorySlot() end
---@return int32
function UInventoryComponent:GetMaxSize() end
---@param ItemRowHandle FDataTableRowHandle
---@return int32
function UInventoryComponent:GetMaxAllowedSpaceForItemHandle(ItemRowHandle) end
---@param Item UItem
---@return int32
function UInventoryComponent:GetMaxAllowedSpaceForItem(Item) end
---@return TArray<UItem>
function UInventoryComponent:GetItemsIncludingEquipment() end
---@return TArray<UItem>
function UInventoryComponent:GetItems() end
---@param Index int32
---@return UItem
function UInventoryComponent:GetItemInSlot(Index) end
---@param ItemKey FHotBarQuickSlotItemTypeKey
---@param IncludeBrokenItems boolean
---@return int32
function UInventoryComponent:GetItemCountMatchingHotBarKeyIncludingEquipment(ItemKey, IncludeBrokenItems) end
---@param ItemRowHandle FDataTableRowHandle
---@param IncludeBrokenItems boolean
---@return int32
function UInventoryComponent:GetItemCountIncludingEquipment(ItemRowHandle, IncludeBrokenItems) end
---@param ItemKey FHotBarQuickSlotItemTypeKey
---@param IncludeBrokenItems boolean
---@return int32
function UInventoryComponent:GetItemCountForHotBarKey(ItemKey, IncludeBrokenItems) end
---@param ItemName FName
---@return int32
function UInventoryComponent:GetItemCountByName(ItemName) end
---@param ItemRowHandle FDataTableRowHandle
---@param IncludeBrokenItems boolean
---@return int32
function UInventoryComponent:GetItemCount(ItemRowHandle, IncludeBrokenItems) end
---@param ItemName FName
---@return UItem
function UInventoryComponent:GetItem(ItemName) end
---@param ItemRowHandle FDataTableRowHandle
---@return int32
function UInventoryComponent:GetExistingStackSpaceForItemHandle(ItemRowHandle) end
---@return int32
function UInventoryComponent:GetEmptySlots() end
---@param Item UItem
---@param Offset FVector
---@return FTransform
function UInventoryComponent:GetDropItemTransform(Item, Offset) end
---@param ItemRowHandle FDataTableRowHandle
---@return UItem
function UInventoryComponent:FindPartialItemStackForItemHandle(ItemRowHandle) end
---@param Item UItem
---@return UItem
function UInventoryComponent:FindPartialItemStackForItem(Item) end
---@param ItemRowHandle FDataTableRowHandle
---@return int32
function UInventoryComponent:ContainsItemOfType(ItemRowHandle) end
---@param Item UItem
---@return boolean
function UInventoryComponent:ContainsItem(Item) end
function UInventoryComponent:ClientOnItemStashFailue() end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param Count int32
function UInventoryComponent:ClientOnItemStashed(ItemRowHandle, Count) end
---@param ItemsStashed TArray<FItemRowCountPair>
function UInventoryComponent:ClientOnItemsStashed(ItemsStashed) end
---@param OriginalItemHandle FDataTableRowHandle_NetCrc
---@param SpoiledResultHandle FDataTableRowHandle_NetCrc
function UInventoryComponent:ClientOnItemSpoiled(OriginalItemHandle, SpoiledResultHandle) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
function UInventoryComponent:ClientOnItemRemoved(ItemRowHandle) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param IsNewItem boolean
---@param NewCount int32
function UInventoryComponent:ClientOnItemAdded(ItemRowHandle, IsNewItem, NewCount) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
function UInventoryComponent:ClientNotifyCraftedWithFullInventory(ItemRowHandle) end
---@param FromInventory UInventoryComponent
---@return boolean
function UInventoryComponent:CanTransferAllFrom(FromInventory) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UInventoryComponent:CanCraftRecipe(ItemRowHandle) end
---@param InItems TArray<UItem>
---@return boolean
function UInventoryComponent:CanAddItems(InItems) end
---@param ItemRowHandles TArray<FDataTableRowHandle>
---@return boolean
function UInventoryComponent:CanAddItemRowHandles(ItemRowHandles) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UInventoryComponent:CanAddItemRowHandle(ItemRowHandle) end
---@param Item UItem
---@return boolean
function UInventoryComponent:CanAddItem(Item) end
---@param Item UItem
---@param bIsNewItem boolean
function UInventoryComponent:AddItem(Item, bIsNewItem) end


---@class UInventoryComponentLiteData : UComponentLiteData
---@field MaxSize int32
UInventoryComponentLiteData = {}



---@class UInventoryLODComponent : UBaseLODComponent
UInventoryLODComponent = {}


---@class UInventoryWidget : UGameUserWidget
UInventoryWidget = {}


---@class UItem : UPersistentObject
---@field ItemVisuals TWeakObjectPtr<USpawnedItemLODActor>
---@field OnPowerStateChangedDelegate FItemOnPowerStateChangedDelegate
---@field OnLaunchAttack FItemOnLaunchAttack
---@field OnHitWithAttack FItemOnHitWithAttack
---@field OnSelectedAmmoChanged FItemOnSelectedAmmoChanged
---@field OnItemBroken FItemOnItemBroken
---@field OnItemChanged FItemOnItemChanged
---@field OnItemEnhanced FItemOnItemEnhanced
---@field ItemDataRowHandle FDataTableRowHandle_NetCrc
---@field StackSize int32
---@field InventorySlot int32
---@field SpoilEndTime float
---@field PausedSpoilProgress float
---@field HatchEndTime float
---@field SelectedAmmoType FName_NetCrc
---@field AttackCombo UAttackCombo
---@field AlternateAttackCombo UAttackCombo
---@field SwimmingAttackCombo UAttackCombo
---@field AmmoAttacks TMap<FName, UAttack>
---@field PowerUsed float
---@field IsPowerOn boolean
---@field PowerReservoir FPowerReservoir
---@field DurabilityRemaining float
---@field SourceCreatureNameFiltered FString
---@field BaseEnhancementLevel int32
---@field BonusEnhancementLevel int32
---@field BonusEnhancementType FGameplayTag
---@field LegendaryEnhancementLevel int32
---@field RandomEffects TArray<FDataTableRowHandle_NetCrc>
UItem = {}

---@param PowerType FGameplayTag
---@return boolean
function UItem:UsesPowerType(PowerType) end
---@return boolean
function UItem:UsesPower() end
---@return boolean
function UItem:UsesAmmo() end
---@return boolean
function UItem:UseConversationAsDescription() end
---@param PowerType FGameplayTag
---@param Charges float
---@param InstigatedBy AActor
---@return float
function UItem:TryAddPower(PowerType, Charges, InstigatedBy) end
---@return boolean
function UItem:ShouldRotateToVelocity() end
---@param InStackSize int32
---@return int32
function UItem:SetStackSize(InStackSize) end
---@param Slot int32
function UItem:SetInventorySlot(Slot) end
function UItem:RestoreAllDurability() end
---@param Count float
---@return boolean
function UItem:RemovePowerCharges(Count) end
---@param Amount float
function UItem:RemoveDurability(Amount) end
function UItem:OnRep_SelectedAmmoType() end
function UItem:OnRep_PropertyChanged() end
function UItem:OnRep_PowerReservoir() end
---@param PreviousHandle FDataTableRowHandle_NetCrc
function UItem:OnRep_ItemDataRowHandle(PreviousHandle) end
function UItem:OnRep_IsPowerOn() end
function UItem:OnRep_EnhancementChanged() end
---@param PreviousDurability float
function UItem:OnRep_DurabilityChanged(PreviousDurability) end
---@param PowerType FGameplayTag
---@param ChargesStored float
function UItem:OnPowerStoredChanged(PowerType, ChargesStored) end
---@param EnhancementType FGameplayTag
---@return boolean
function UItem:IsValidBonusEnhancementType(EnhancementType) end
---@return boolean
function UItem:IsStackFull() end
---@return boolean
function UItem:IsPowerFull() end
---@return boolean
function UItem:IsPowerEmpty() end
---@return boolean
function UItem:IsPersonalKeyItem() end
---@return boolean
function UItem:IsPartyKeyItem() end
---@return boolean
function UItem:IsLightSource() end
---@param Row FDataTableRowHandle
---@return boolean
function UItem:IsInstanceOf(Row) end
---@return boolean
function UItem:IsFullyCharged() end
---@return boolean
function UItem:IsEquipped() end
---@return boolean
function UItem:IsCharged() end
---@return boolean
function UItem:IsBusy() end
---@return boolean
function UItem:IsBroken() end
---@return boolean
function UItem:IsAtMaxDurability() end
---@return boolean
function UItem:IsArmorItem() end
---@return boolean
function UItem:IsAHaulingItem() end
---@return int32
function UItem:IncrementStackSize() end
---@param Tag FGameplayTag
---@return boolean
function UItem:HasTag(Tag) end
---@return boolean
function UItem:HasDurability() end
---@return boolean
function UItem:HasConversation() end
---@return boolean
function UItem:HasConsumableEffectEver() end
---@return boolean
function UItem:HasConsumableEffect() end
---@return boolean
function UItem:HasConsumableCooldown() end
---@return boolean
function UItem:HasBonusEnhancementStatusEffect() end
---@param Tags FGameplayTagContainer
---@return boolean
function UItem:HasAnyTag(Tags) end
---@return FGameplayTagContainer
function UItem:GetValidBonusEnhancementTags() end
---@return TArray<UItem>
function UItem:GetValidAmmoTypes() end
---@return FLocString
function UItem:GetTypeDisplayName() end
---@return float
function UItem:GetTotalSpoilTime() end
---@return float
function UItem:GetTotalHatchTime() end
---@return int32
function UItem:GetTotalEnhancementLevels() end
---@return float
function UItem:GetThrowSpeedMultiplierInWater() end
---@return float
function UItem:GetThrowSpeedMultiplier() end
---@return float
function UItem:GetThrowBaseRotationAngle() end
---@return EThrowAttackType
function UItem:GetThrowAttackType() end
---@return float
function UItem:GetThrowAttackDelay() end
---@return TArray<FDataTableRowHandle>
function UItem:GetTechTreeUnlocks() end
---@param Index int32
---@return UAttack
function UItem:GetSwimmingAttack(Index) end
---@return int32
function UItem:GetStackSize() end
---@return ESpoilState
function UItem:GetSpoilState() end
---@return float
function UItem:GetSpoilProgress() end
---@return FString
function UItem:GetSourceCreatureName() end
---@return FName
function UItem:GetSelectedAmmoType() end
---@return TArray<FDataTableRowHandle>
function UItem:GetResearchRecipeUnlocks() end
---@param OutRequirements TArray<FRecipeRequirements>
function UItem:GetRepairRequirements(OutRequirements) end
---@return int32
function UItem:GetRemainingAmmo() end
---@return int32
function UItem:GetRecycleReward() end
---@return TArray<FDataTableRowHandle>
function UItem:GetRecipeUnlocks() end
---@param ProcessingType FGameplayTag
---@return int32
function UItem:GetProcessedResultItemCount(ProcessingType) end
---@param ProcessingType FGameplayTag
---@return FDataTableRowHandle
function UItem:GetProcessedResultItem(ProcessingType) end
---@return FPowerReservoir
function UItem:GetPowerReservoir() end
---@return float
function UItem:GetPowerPercentage() end
---@return USoundCue
function UItem:GetPickupAudio() end
---@return float
function UItem:GetPercentageDamageReduction() end
---@return TArray<FDataTableRowHandle>
function UItem:GetNewResearchRecipeUnlocks() end
---@return int32
function UItem:GetMaxStackSize() end
---@return int32
function UItem:GetMaxHaulingAmount() end
---@return float
function UItem:GetMaxDurability() end
---@return USpawnedItemLODActor
function UItem:GetLodItemVisuals() end
---@return int32
function UItem:GetLegendaryEnhancementLevel() end
---@return ASpawnedItem
function UItem:GetItemVisuals() end
---@return EItemType
function UItem:GetItemType() end
---@return FDataTableRowHandle
function UItem:GetItemRequiredForEnhancement() end
---@return FDataTableRowHandle
function UItem:GetItemDataRowHandle() end
---@return FBaseItemData
function UItem:GetItemData() end
---@return int32
function UItem:GetItemCountRequiredForLegendaryEnhancement() end
---@return int32
function UItem:GetItemCountRequiredForBonusEnhancement() end
---@return int32
function UItem:GetItemCountRequiredForBaseEnhancement() end
---@return boolean
function UItem:GetIsPowerOn() end
---@return int32
function UItem:GetInventorySlot() end
---@return float
function UItem:GetImpactSoundRange() end
---@return float
function UItem:GetImpactSoundIntensity() end
---@return FDataTableRowHandle
function UItem:GetImpactAttack() end
---@return EHUDMarkerType
function UItem:GetHUDMarkerType() end
---@return float
function UItem:GetHatchProgress() end
---@return float
function UItem:GetGlideTimeRemaining() end
---@return float
function UItem:GetGardenModifierValue() end
---@return EGardenModifierType
function UItem:GetGardenModifierType() end
---@return float
function UItem:GetFlatDamageReduction() end
---@return AActor
function UItem:GetEquippedOwner() end
---@return FGameplayTag
function UItem:GetEquippedHairType() end
---@return EEquipmentSlot
function UItem:GetEquipmentSlot() end
---@return USoundCue
function UItem:GetEquipAudio() end
---@return int32
function UItem:GetEnhancementLevel() end
---@return float
function UItem:GetDurabilityRemaining() end
---@return float
function UItem:GetDurabilityRatio() end
---@return float
function UItem:GetDurabilityModifier() end
---@return int32
function UItem:GetDuplicationCost() end
---@return FString
function UItem:GetDisplayName() end
---@return FLocString
function UItem:GetDescription() end
---@return int32
function UItem:GetDeduplicationReward() end
---@return float
function UItem:GetDamageReductionModifier() end
---@return int32
function UItem:GetConversationStartNode() end
---@return FGuid
function UItem:GetConversationID() end
---@return USoundCue
function UItem:GetConsumeAudio() end
---@return FGameplayTag
function UItem:GetBonusEnhancementType() end
---@return int32
function UItem:GetBonusEnhancementLevel() end
---@return float
function UItem:GetBlockStaminaRegenMultiplier() end
---@return float
function UItem:GetBlockStaminaCost() end
---@return float
function UItem:GetBlockDamageMultiplier() end
---@return int32
function UItem:GetAvailableStackSize() end
---@return FString
function UItem:GetAttackSpeedText() end
---@return FGameplayTag
function UItem:GetAttackSpeedTag() end
---@return TSubclassOf<USurvivalDamageType>
function UItem:GetAttackDamageTypeModifier() end
---@return uint8
function UItem:GetAttackDamageTypeFlags() end
---@return float
function UItem:GetAttackDamageModifier() end
---@return TArray<FName>
function UItem:GetAmmoTypes() end
---@param StatusEffects TArray<FDataTableRowHandle>
---@param bIncludeHidden boolean
function UItem:GetAllItemStatusEffects(StatusEffects, bIncludeHidden) end
---@param bPowerEnabled boolean
function UItem:EnablePower(bPowerEnabled) end
---@param Dumper AActor
function UItem:DumpPower(Dumper) end
---@return boolean
function UItem:DestroyOnThrowDelay() end
---@return boolean
function UItem:DestroyOnThrowAttack() end
---@return int32
function UItem:DecrementStackSize() end
---@return boolean
function UItem:ConsumesPowerDuringRest() end
function UItem:ConsumeCharge() end
---@param Instigator AActor
---@return boolean
function UItem:CanUse(Instigator) end
---@return boolean
function UItem:CanTrash() end
---@return boolean
function UItem:CanThrowUnderWater() end
---@return boolean
function UItem:CanThrow() end
---@return boolean
function UItem:CanStack() end
---@return boolean
function UItem:CanSpoil() end
---@return boolean
function UItem:CanRepairNow() end
---@return boolean
function UItem:CanRepair() end
---@param ProcessingType FGameplayTag
---@return boolean
function UItem:CanProcess(ProcessingType) end
---@return boolean
function UItem:CanPowerBeUsedInWater() end
---@return boolean
function UItem:CannotBlockWhileAttacking() end
---@return boolean
function UItem:CanMakeLegendary() end
---@return boolean
function UItem:CanHatch() end
---@return boolean
function UItem:CanGetBonusEnhancements() end
---@return boolean
function UItem:CanEverUse() end
---@return boolean
function UItem:CanEverEnhance() end
---@return boolean
function UItem:CanEverDumpPower() end
---@param Character AActor
---@return boolean
function UItem:CanEquipToWithBusy(Character) end
---@param Character AActor
---@return boolean
function UItem:CanEquipTo(Character) end
---@return boolean
function UItem:CanEquip() end
---@param bCheckLegendary boolean
---@return boolean
function UItem:CanEnhance(bCheckLegendary) end
---@return ECannotDuplicateReason
function UItem:CanDuplicate() end
---@return boolean
function UItem:CanDumpPower() end
---@return boolean
function UItem:CanBlock() end
---@return boolean
function UItem:CanAttack() end
---@return boolean
function UItem:CanAnalyze() end
---@param PowerType FGameplayTag
---@param Charges float
---@return boolean
function UItem:CanAddPower(PowerType, Charges) end
---@param PowerType FGameplayTag
---@return boolean
function UItem:CanAcceptPowerType(PowerType) end
---@param StatusEffectType EStatusEffectType
---@param IgnoreNegativeEffects boolean
---@return boolean
function UItem:AppliesPositiveSurvivalStatOnConsume(StatusEffectType, IgnoreNegativeEffects) end
---@return boolean
function UItem:AlwaysOn() end
---@param AmountToAdjustBy int32
---@return int32
function UItem:AdjustStackSize(AmountToAdjustBy) end
---@param PowerTag FGameplayTag
---@param ChargesToAdd float
---@return boolean
function UItem:AddCharges(PowerTag, ChargesToAdd) end


---@class UItemContainerActorFunctionLibrary : UBlueprintFunctionLibrary
UItemContainerActorFunctionLibrary = {}

---@param ItemContainerActor AActor
---@param ItemData FDataTableRowHandle
---@param SearchForwards boolean
function UItemContainerActorFunctionLibrary:RemoveItemMatchingItemData(ItemContainerActor, ItemData, SearchForwards) end
---@param ItemContainerActor AActor
---@param Item UItem
---@param SearchForwards boolean
function UItemContainerActorFunctionLibrary:RemoveItem(ItemContainerActor, Item, SearchForwards) end
---@param ItemContainerActor AActor
---@param Requirements TArray<FRecipeRequirements>
---@return boolean
function UItemContainerActorFunctionLibrary:HasRequirements(ItemContainerActor, Requirements) end
---@param ItemContainerActor AActor
---@param ItemTag FGameplayTag
---@return TArray<FDataTableRowHandle>
function UItemContainerActorFunctionLibrary:GetItemDataWithTag(ItemContainerActor, ItemTag) end
---@param ItemContainerActor AActor
---@param ItemRowHandle FDataTableRowHandle
---@return int32
function UItemContainerActorFunctionLibrary:GetItemCount(ItemContainerActor, ItemRowHandle) end
---@param ItemContainerActor AActor
---@param ItemRowHandle FDataTableRowHandle
---@return UItem
function UItemContainerActorFunctionLibrary:GetItem(ItemContainerActor, ItemRowHandle) end
---@param ItemContainerActor AActor
---@return TArray<UItem>
function UItemContainerActorFunctionLibrary:GetAllItems(ItemContainerActor) end
---@param ItemContainerActor AActor
---@param RecipeRowHandle FDataTableRowHandle
---@param DestinationInventory UInventoryComponent
function UItemContainerActorFunctionLibrary:CraftRecipeForInventory(ItemContainerActor, RecipeRowHandle, DestinationInventory) end
---@param ItemContainerActor AActor
---@param RecipeRowHandle FDataTableRowHandle
---@return boolean
function UItemContainerActorFunctionLibrary:CanCraftRecipe(ItemContainerActor, RecipeRowHandle) end


---@class UItemContainerFunctionLibrary : UBlueprintFunctionLibrary
UItemContainerFunctionLibrary = {}

---@param container UObject
---@param ItemRowHandle FDataTableRowHandle
---@return UItem
function UItemContainerFunctionLibrary:FindPartialItemStackForItemHandle(container, ItemRowHandle) end
---@param container UObject
---@param Item UItem
---@return UItem
function UItemContainerFunctionLibrary:FindPartialItemStackForItem(container, Item) end
---@param container UObject
---@param ItemData FDataTableRowHandle
---@param SearchForwards boolean
---@return UItem
function UItemContainerFunctionLibrary:FindItem(container, ItemData, SearchForwards) end
---@param container UObject
---@param ItemRowHandle FDataTableRowHandle
---@param Count int32
---@param bSpawnLeftoversInWorld boolean
---@return FAddItemResult
function UItemContainerFunctionLibrary:CreateAndAddItem(container, ItemRowHandle, Count, bSpawnLeftoversInWorld) end


---@class UItemDataFunctionLibrary : UBlueprintFunctionLibrary
UItemDataFunctionLibrary = {}

---@param ItemData FBaseItemData
---@return boolean
function UItemDataFunctionLibrary:IsRepairTool(ItemData) end
---@param ItemData FBaseItemData
---@return boolean
function UItemDataFunctionLibrary:IsGlider(ItemData) end
---@param Slot EEquipmentSlot
---@return boolean
function UItemDataFunctionLibrary:IsArmorSlot(Slot) end
---@param Handle FDataTableRowHandle
---@return boolean
function UItemDataFunctionLibrary:GetItemRowHandleHasTechTreeUnlocks(Handle) end
---@param ItemData FBaseItemData
---@param FilterText FString
---@return boolean
function UItemDataFunctionLibrary:GetItemDataFilterMatches(ItemData, FilterText) end
---@param ItemData FBaseItemData
---@param Equipper AActor
---@return TSoftClassPtr<ASpawnedItem>
function UItemDataFunctionLibrary:GetItemDataEquippedActor(ItemData, Equipper) end
---@param ItemHandle FDataTableRowHandle
---@param Item UItem
---@return TArray<TSubclassOf<USurvivalDamageType>>
function UItemDataFunctionLibrary:GetItemDamageTypes(ItemHandle, Item) end
---@param ItemData FBaseItemData
---@param StatusEffects TArray<FDataTableRowHandle>
---@param bIncludeHidden boolean
function UItemDataFunctionLibrary:GetEquippableStatusEffects(ItemData, StatusEffects, bIncludeHidden) end
---@param ItemData FBaseItemData
---@param StatusEffects TArray<FDataTableRowHandle>
function UItemDataFunctionLibrary:GetConsumableStatusEffects(ItemData, StatusEffects) end
---@param ItemData FBaseItemData
---@return float
function UItemDataFunctionLibrary:GetAverageItemAttackHitStun(ItemData) end
---@param ItemData FBaseItemData
---@return float
function UItemDataFunctionLibrary:GetAverageItemAttackDamage(ItemData) end
---@param ItemData FBaseItemData
---@param StatusEffects TArray<FDataTableRowHandle>
function UItemDataFunctionLibrary:GetAttackStatusEffects(ItemData, StatusEffects) end
---@param ItemData FBaseItemData
---@return FDataTableRowHandle
function UItemDataFunctionLibrary:GetAttackData(ItemData) end
---@param ItemData FBaseItemData
---@param AmmoItem FDataTableRowHandle
---@return FDataTableRowHandle
function UItemDataFunctionLibrary:GetAmmoAttack(ItemData, AmmoItem) end
---@param ItemData FBaseItemData
---@param StatusEffects TArray<FDataTableRowHandle>
---@param bIncludeHidden boolean
function UItemDataFunctionLibrary:GetAllItemStatusEffects(ItemData, StatusEffects, bIncludeHidden) end
---@param ItemData FBaseItemData
---@return boolean
function UItemDataFunctionLibrary:CanResearch(ItemData) end


---@class UItemManagerComponent : UActorComponent
---@field ItemsWithSpawnInFlight TArray<UItem>
UItemManagerComponent = {}

---@param RestDuration float
function UItemManagerComponent:OnRest(RestDuration) end
function UItemManagerComponent:OnGameModeChanged() end


---@class UItemProcessingDataFunctionLibrary : UBlueprintFunctionLibrary
UItemProcessingDataFunctionLibrary = {}

---@param Data FItemProcessingData
---@return boolean
function UItemProcessingDataFunctionLibrary:IsStarted(Data) end
---@param Data FItemProcessingData
---@return boolean
function UItemProcessingDataFunctionLibrary:IsProcessingTimeFinished(Data) end
---@param Data FItemProcessingData
---@return float
function UItemProcessingDataFunctionLibrary:GetTotalProcessingTime(Data) end
---@param Data FItemProcessingData
---@return float
function UItemProcessingDataFunctionLibrary:GetRemainingProcessingTime(Data) end
---@param Data FItemProcessingData
---@return float
function UItemProcessingDataFunctionLibrary:GetProgress(Data) end
---@param Data FItemProcessingData
---@return FGameplayTag
function UItemProcessingDataFunctionLibrary:GetProcessingType(Data) end
---@param Data FItemProcessingData
---@return EItemProcessingState
function UItemProcessingDataFunctionLibrary:GetProcessingState(Data) end
---@param Data FItemProcessingData
---@return float
function UItemProcessingDataFunctionLibrary:GetElapsedProcessingTime(Data) end
---@param Data FItemProcessingData
---@return boolean
function UItemProcessingDataFunctionLibrary:CanProcess(Data) end


---@class UItemSpawnData : UObject
---@field SpawnVFX UVisualEffect
---@field SpawnOffset FVector
---@field SimulatePhysicsOnSpawn boolean
---@field CanProxyOnSpawn boolean
---@field BlueprintPool TArray<TSoftClassPtr<AActor>>
UItemSpawnData = {}

---@param WorldContextObject UObject
---@return FVector
function UItemSpawnData:GetSpawnOffset(WorldContextObject) end
---@param WorldContextObject UObject
---@return TArray<TSoftClassPtr<AActor>>
function UItemSpawnData:GetPossibleActors(WorldContextObject) end


---@class UItemSpawnGroupData : UObject
---@field BillboardSprite UTexture2D
---@field Events TArray<FItemSpawnGroupEvent>
---@field bSharedByOwners boolean
---@field NeverReuseSpawnPoints boolean
---@field PlayerProximityBehavior ESpawnProximityBehavior
---@field RaycastSoftSpawns boolean
---@field SpawnGlobalVariable FGlobalVariableReference
---@field GlobalVariableComparisonOperator EComparisonOperator
---@field GlobalVariableCompareValue int32
---@field ForceDespawnOnConditionNotMet boolean
---@field PlayerSpawnDistance float
---@field SpawnEvaluateInterval float
---@field PlayerDistanceCheckInterval float
---@field bDebugFlag boolean
UItemSpawnGroupData = {}

---@return boolean
function UItemSpawnGroupData:HasGlobalVariableCondition() end
---@param Event ESpawnIntervalBehavior
---@return boolean
function UItemSpawnGroupData:HasEventInterval(Event) end


---@class UJavamaticDeinstanceComponent : UActorComponent
---@field DefenseLocation FVector
---@field DefenseRadius float
UJavamaticDeinstanceComponent = {}



---@class UKeyNotificationLogWidget : UGameUserWidget
---@field MaxNotificationsToDisplay int32
---@field ShowDetailsTimer float
---@field DetailsOpacity float
---@field QueuedNotifications TArray<UBaseNotificationWidget>
---@field LogList UVerticalBox
---@field ShortcutHolder UBorder
---@field ViewDetailsAnim UWidgetAnimation
---@field ObjectiveNotificationWidget UObjectiveNotificationWidget
UKeyNotificationLogWidget = {}

---@param Notification UBaseNotificationWidget
function UKeyNotificationLogWidget:TryInsertNotification(Notification) end
function UKeyNotificationLogWidget:TryEndMoreDetailsAnimation() end
---@param WidgetClass TSubclassOf<UBaseNotificationWidget>
---@return UBaseNotificationWidget
function UKeyNotificationLogWidget:CreateAndAddNotificationNative(WidgetClass) end


---@class UKeybindingDisplay : UGameUserWidget
---@field Text UTextBlock
---@field ButtonImage UImage
---@field BoundControl FAnyControlMapping
---@field bGamepadControls boolean
UKeybindingDisplay = {}

function UKeybindingDisplay:UpdateText() end
---@param Control FAnyControlMapping
function UKeybindingDisplay:UpdateControl(Control) end
---@param bNotify boolean
function UKeybindingDisplay:UnsetKey(bNotify) end
---@param Control FAnyControlMapping
---@param bInGamepadControls boolean
---@param bNotify boolean
function UKeybindingDisplay:SetControl(Control, bInGamepadControls, bNotify) end
---@param Axis FInputAxisKeyMapping
---@param bInGamepadControls boolean
---@param bNotify boolean
function UKeybindingDisplay:SetAxis(Axis, bInGamepadControls, bNotify) end
---@param Key FInputActionKeyMapping
---@param bInGamepadControls boolean
---@param bNotify boolean
function UKeybindingDisplay:SetAction(Key, bInGamepadControls, bNotify) end


---@class ULODActorManagerComponent : UActorComponent
---@field LODActors TArray<UBaseLODActor>
---@field TickingStandInLODActors TArray<UBaseLODActor>
---@field ParallelTickingStandInLODActors TArray<UBaseLODActor>
---@field PendingConvertToFull TArray<UBaseLODActor>
---@field LODActorsNeverProxy TArray<UBaseLODActor>
---@field AllTrackedActorClasses TArray<TSoftClassPtr<AActor>>
---@field AllTrackedLODActorClasses TArray<TSubclassOf<UBaseLODActor>>
---@field TrackedActorClassTree FClassTreeNode
---@field LastSpawnDespawnCheckIndex int32
ULODActorManagerComponent = {}

---@param LODActor UBaseLODActor
function ULODActorManagerComponent:OnLODActorDestroyed(LODActor) end
---@param Class TSoftClassPtr<AActor>
---@param Count int32
---@return boolean
function ULODActorManagerComponent:HasAtLeastLODActorsOfExactlyClassSoft(Class, Count) end
---@return FClassTreeNode
function ULODActorManagerComponent:GetTrackedActorClassTree() end
---@param Class UClass
---@return TArray<UBaseLODActor>
function ULODActorManagerComponent:GetLODActorsOfExactlyLODActorClass(Class) end
---@param Class TSoftClassPtr<AActor>
---@return TArray<UBaseLODActor>
function ULODActorManagerComponent:GetLODActorsOfExactlyClassSoft(Class) end
---@param Class TSubclassOf<AActor>
---@return TArray<UBaseLODActor>
function ULODActorManagerComponent:GetLODActorsOfExactlyClass(Class) end
---@param Class UClass
---@return TArray<UBaseLODActor>
function ULODActorManagerComponent:GetLODActorsImplementingLODActorClass(Class) end
---@param Class TSoftClassPtr<AActor>
---@return TArray<UBaseLODActor>
function ULODActorManagerComponent:GetLODActorsImplementingClassSoft(Class) end
---@param Class TSubclassOf<AActor>
---@return TArray<UBaseLODActor>
function ULODActorManagerComponent:GetLODActorsImplementingClass(Class) end
---@return TArray<TSubclassOf<UBaseLODActor>>
function ULODActorManagerComponent:GetAllTrackedLODActorClasses() end
---@return TArray<TSoftClassPtr<AActor>>
function ULODActorManagerComponent:GetAllTrackedActorClasses() end
---@return TArray<UBaseLODActor>
function ULODActorManagerComponent:GetAllLODActors() end
function ULODActorManagerComponent:ForceCheckSpawnDespawnAll() end
---@param Component UActorComponent
---@return UBaseLODComponent
function ULODActorManagerComponent:FindLODComponentForComponent(Component) end
---@param Component UActorComponent
---@return UBaseLODActor
function ULODActorManagerComponent:FindLODActorForComponent(Component) end
---@param Actor AActor
---@return UBaseLODActor
function ULODActorManagerComponent:FindLODActorForActor(Actor) end
---@param Guid FGuid
---@return UBaseLODActor
function ULODActorManagerComponent:FindLODActor(Guid) end
---@param ActorClass TSoftClassPtr<AActor>
---@param Transform FTransform
---@return UBaseLODActor
function ULODActorManagerComponent:CreateLODActorOfType(ActorClass, Transform) end


---@class ULODActorStatics : UBlueprintFunctionLibrary
ULODActorStatics = {}

---@param inArray TArray<FVector>
function ULODActorStatics:LODActorSaveBlueprintVectorArray(inArray) end
---@param InVector FVector
function ULODActorStatics:LODActorSaveBlueprintVector(InVector) end
---@param inInt int32
function ULODActorStatics:LODActorSaveBlueprintInt(inInt) end
---@param InFloat float
function ULODActorStatics:LODActorSaveBlueprintFloat(InFloat) end
---@param InBool boolean
function ULODActorStatics:LODActorSaveBlueprintBool(InBool) end
---@return TArray<FVector>
function ULODActorStatics:LODActorRestoreBlueprintVectorArray() end
---@return FVector
function ULODActorStatics:LODActorRestoreBlueprintVector() end
---@return int32
function ULODActorStatics:LODActorRestoreBlueprintInt() end
---@return float
function ULODActorStatics:LODActorRestoreBlueprintFloat() end
---@return boolean
function ULODActorStatics:LODActorRestoreBlueprintBool() end


---@class ULODableActorLODActor : UBaseLODActor
ULODableActorLODActor = {}


---@class ULODableActorLiteData : UActorLiteData
---@field LODFullActorMaxDistance float
ULODableActorLiteData = {}



---@class ULabeledDropdownWidget : UBaseSettingsWidget
---@field DropdownSelection UComboBoxString
---@field DropDownAsset UBaseOptionsDropdownAsset
---@field LastConfirmedValue int32
ULabeledDropdownWidget = {}

---@param SelectedItem FString
---@param SelectionType ESelectInfo::Type
function ULabeledDropdownWidget:OnSelectionChanged(SelectedItem, SelectionType) end
---@param SelectedIndex int32
function ULabeledDropdownWidget:InitManual(SelectedIndex) end
---@param Options TArray<FString>
---@param SelectedIndex int32
function ULabeledDropdownWidget:Init(Options, SelectedIndex) end


---@class ULabeledKeybinding : UBaseSettingsWidget
---@field MappingKey FAnyControlMappingKey
---@field bGamepadControls boolean
---@field Binding0 UKeybindingDisplay
---@field Binding1 UKeybindingDisplay
ULabeledKeybinding = {}

---@param Mapping FAnyControlMapping
function ULabeledKeybinding:OnControlMapping1Changed(Mapping) end
---@param Mapping FAnyControlMapping
function ULabeledKeybinding:OnControlMapping0Changed(Mapping) end
function ULabeledKeybinding:Init() end
---@param Key FAnyControlMappingKey
---@param bInGamepadControls boolean
function ULabeledKeybinding:BlueprintSetMappingKey(Key, bInGamepadControls) end


---@class ULabeledToggle : UBaseSettingsWidget
---@field Value UTextBlock
---@field ToggleBtn UCheckBox
---@field IgnoreToggleNarration boolean
ULabeledToggle = {}

---@param bInIsChecked boolean
function ULabeledToggle:SetIsChecked(bInIsChecked) end
---@param bIsToggled boolean
function ULabeledToggle:OnToggleStateChanged(bIsToggled) end


---@class ULabledSliderWidget : UBaseSettingsWidget
---@field OnValueChangedEvent FLabledSliderWidgetOnValueChangedEvent
---@field ValueTextBlock UTextBlock
---@field Slider USlider
---@field ApplyImmediately boolean
---@field MinValue float
---@field MaxValue float
---@field StepSize float
---@field TextDisplayType ETextDisplayType
ULabledSliderWidget = {}

---@param Value float
---@return float
function ULabledSliderWidget:ValueToNormalized(Value) end
---@param Value float
function ULabledSliderWidget:SetSliderValue(Value) end
---@param ChangedValue float
function ULabledSliderWidget:OnSliderValueChanged(ChangedValue) end
function ULabledSliderWidget:OnSliderMouseCaptureEnd() end
---@param Normalized float
---@return float
function ULabledSliderWidget:NormalizedToValue(Normalized) end
function ULabledSliderWidget:HandleSliderControllerCaptureEnd() end
function ULabledSliderWidget:HandleSliderControllerCaptureBegin() end


---@class ULatencyWidget : UGameUserWidget
---@field UseNativeImplementation boolean
---@field LatencyLevel ELatencyLevel
---@field LatencyRanges TMap<ELatencyLevel, FLatencyRange>
---@field PingLoopAnim UWidgetAnimation
---@field ConnectionWarningElement UOverlay
ULatencyWidget = {}

---@param Ping int32
function ULatencyWidget:OnPingChanged(Ping) end
---@param Latency int32
---@return ELatencyLevel
function ULatencyWidget:GetLatencyLevel(Latency) end


---@class ULightFireUndoOperation : UBaseUndoOperation
ULightFireUndoOperation = {}


---@class UListMaterialsCommandlet : UCommandlet
UListMaterialsCommandlet = {}


---@class ULiteBuildingGridObject : UObject
---@field Grid FLiteBuildingGrid
ULiteBuildingGridObject = {}



---@class ULocalizedTextBlock : UGameTextBlock
---@field LocalizedString FLocString
ULocalizedTextBlock = {}

---@param LocString FLocString
function ULocalizedTextBlock:SetLocalizedString(LocString) end


---@class ULookTriggerManagerComponent : UActorComponent
ULookTriggerManagerComponent = {}


---@class ULootBagLODActor : UBaseLODActor
ULootBagLODActor = {}


---@class ULootBagLiteData : UActorLiteData
ULootBagLiteData = {}


---@class ULootComponent : UActorComponent
---@field OnLootSpawnSFX USoundCue
---@field Items TArray<FLootData>
---@field bDestroyBody boolean
---@field bApplyRandomLootSpawnVelocity boolean
---@field InteractDelayOnDeath float
---@field TemplateHarvestAction UGoapActionHarvest
---@field bInteractable boolean
---@field bForceGiveBestiaryLootIfLastOfActorClass boolean
---@field bUseLootSpawnHintCeiling boolean
---@field LootSpawnHintCeiling float
ULootComponent = {}

function ULootComponent:StartCacheSpawnPointVelocities() end
---@param Looter AActor
---@param SpawnType ELootSpawnType
function ULootComponent:SpawnLoot(Looter, SpawnType) end
---@param SpawnPoint USceneComponent
---@param ItemIndex int32
function ULootComponent:SetSpawnPointForItem(SpawnPoint, ItemIndex) end
---@param Value float
function ULootComponent:SetAllDropChanceMultipliers(Value) end
---@param Sender UHealthComponent
function ULootComponent:OnDecayed(Sender) end
---@param DamageInfo FDamageInfo
function ULootComponent:OnDeath(DamageInfo) end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function ULootComponent:OnDamaged(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@param ItemType FDataTableRowHandle
---@param MinimumChance float
---@return boolean
function ULootComponent:CanDropItem(ItemType, MinimumChance) end


---@class ULootComponentLiteData : UComponentLiteData
---@field LootData TArray<FLootData>
---@field bDestroyBody boolean
ULootComponentLiteData = {}



---@class ULootLODComponent : UBaseLODComponent
ULootLODComponent = {}


---@class UMainMenuButtonWidget : UGameButtonWidget
---@field Button_MainMenuInner UButton
---@field ButtonTextElement UTextBlock
UMainMenuButtonWidget = {}



---@class UMainMenuButtonsGroup : UGameUserWidget
---@field LayoutPanel UPanelWidget
UMainMenuButtonsGroup = {}

---@return UWidget
function UMainMenuButtonsGroup:GetFocusedButtonWidget() end
---@return UWidget
function UMainMenuButtonsGroup:GetFirstButtonWidget() end


---@class UMainMenuWidget : UWindowWidget
---@field PressAnyKeyText UTextBlock
---@field MainMenuButtons UMainMenuButtonsGroup
---@field NewContinueButtonOptions UMainMenuButtonsGroup
---@field HostJoinButtonOptions UMainMenuButtonsGroup
---@field LobbyString FLocString
---@field LoadString FLocString
---@field IgnoreLoginInput boolean
---@field HasAttemptedLogin boolean
---@field HasAttemptedCrossplayLogin boolean
UMainMenuWidget = {}

---@param FromState EMainMenuState
---@param ToState EMainMenuState
---@param TransitionType EMainMenuStateTransitionType
function UMainMenuWidget:TransitionToMainMenuState(FromState, ToState, TransitionType) end
function UMainMenuWidget:StartNewSinglePlayerGame() end
function UMainMenuWidget:SetFocusForCurrentState() end
---@return boolean
function UMainMenuWidget:RequiresLoginBeforeMainMenu() end
---@param NewState EMainMenuState
---@param ReplacePriorState boolean
function UMainMenuWidget:PushMainMenuState(NewState, ReplacePriorState) end
---@param NewState EMainMenuState
function UMainMenuWidget:PopToState(NewState) end
function UMainMenuWidget:PopMainMenuState() end
---@param SharedSaveHostToJoin FString
function UMainMenuWidget:OpenServerBrowser(SharedSaveHostToJoin) end
function UMainMenuWidget:OnSinglePlayerPlaygroundCommunityClicked() end
function UMainMenuWidget:OnSinglePlayerNewPlaygroundClicked() end
function UMainMenuWidget:OnSinglePlayerNewGameClicked() end
function UMainMenuWidget:OnSinglePlayerContinuePlaygroundClicked() end
function UMainMenuWidget:OnSinglePlayerContinueClicked() end
function UMainMenuWidget:OnSinglePlayerClicked() end
function UMainMenuWidget:OnMultiplayerPlaygroundCommunityClicked() end
function UMainMenuWidget:OnMultiplayerNewPlaygroundClicked() end
function UMainMenuWidget:OnMultiplayerNewGameClicked() end
function UMainMenuWidget:OnMultiplayerHostClicked() end
function UMainMenuWidget:OnMultiplayerContinuePlaygroundClicked() end
function UMainMenuWidget:OnMultiplayerContinueClicked() end
function UMainMenuWidget:OnMultiplayerConnectionError() end
function UMainMenuWidget:OnMultiplayerClicked() end
function UMainMenuWidget:OnLoadUserGameSettingsComplete() end
function UMainMenuWidget:OnButtonExitClicked() end
function UMainMenuWidget:OnBackInput() end
---@param ChangeType EActiveUserChangeType
function UMainMenuWidget:OnActiveUserChanged(ChangeType) end
function UMainMenuWidget:NotifyPlaygroundContinueClicked() end
function UMainMenuWidget:NotifyPlaygroundCommunityClicked() end
function UMainMenuWidget:NotifyNewPlaygroundClicked() end
function UMainMenuWidget:NotifyNewGameClicked() end
function UMainMenuWidget:NotifyContinueClicked() end
---@param bPasswordProtected boolean
function UMainMenuWidget:HostMultiplayerLobby(bPasswordProtected) end
function UMainMenuWidget:HandleShowPressAnyKeyPromptBegin() end
---@param UserIndex int32
function UMainMenuWidget:HandlePressAnyKeyTransitionTrigger(UserIndex) end
---@param UserIndex int32
function UMainMenuWidget:HandlePlayerInput(UserIndex) end
---@return EMainMenuState
function UMainMenuWidget:GetMainMenuState() end
---@return UUserWidget
function UMainMenuWidget:GetAccountLinkUI() end
function UMainMenuWidget:CreateSinglePlayerLobby() end


---@class UMaineAIPerceptionComponent : UAIPerceptionComponent
UMaineAIPerceptionComponent = {}

---@param Sender ASurvivalAIController
---@param ActivityMode ECreatureActivityMode
function UMaineAIPerceptionComponent:OnActivityModeChanged(Sender, ActivityMode) end


---@class UMaineAISystem : UAISystem
---@field TokenManager UAITokenManager
UMaineAISystem = {}



---@class UMaineAnalyticsManager : UObject
UMaineAnalyticsManager = {}


---@class UMaineAnimationFunctionLibrary : UBlueprintFunctionLibrary
UMaineAnimationFunctionLibrary = {}


---@class UMaineCharMovementComponent : UCharacterMovementComponent
---@field OnGliderMovementModeChanged FMaineCharMovementComponentOnGliderMovementModeChanged
---@field OnStartsClimbing FMaineCharMovementComponentOnStartsClimbing
---@field OnUnderwaterChanged FMaineCharMovementComponentOnUnderwaterChanged
---@field OnSittingChanged FMaineCharMovementComponentOnSittingChanged
---@field MaxSprintSpeed float
---@field MaxFlySprintSpeed float
---@field AnimMaxSpeedMultiplierRange float
---@field AnimAttackMaxSpeedMultiplierRange float
---@field BlockingSpeedModifier float
---@field SprintStaminaRate float
---@field GlideYawRate float
---@field GlideRollRateMultiplier float
---@field GlideBankRollMagnitude float
---@field GlideMinStartElevation float
---@field GlideMinFallDurSecs float
---@field ZiplineIgnoreCollisionDistance float
---@field ZiplineMaxSpeedMultiplier float
---@field ZiplineReattachDelay float
---@field ZiplineExitVelocityMultiplier float
---@field ZiplineAscendAccel float
---@field ZiplineMaxAscendSpeed float
---@field MaxSwimSprintSpeed float
---@field ClimbingSprintSpeedMultiplier float
---@field ClimbingSize FGameplayTag
---@field bExitSplinesAtEnds boolean
---@field ClimbSplineRotationType EClimbSplineRotationType
---@field bAnyDamageExitsSpline boolean
---@field bCanWallCrawl boolean
---@field MaxSpeedMultiplier_Nav UCurveFloat
---@field MaxSpeedMultiplier_Attack UCurveFloat
---@field MaxSpeedMultiplier_AbsoluteInv UCurveFloat
---@field CurrentChair AChairBuilding
---@field AttachedSpline FClimbableSplineKey
---@field PerchedObject FAttractionComponentKey
---@field FootstepData TMap<EFootstepType, UFootstepData>
---@field CrouchingNoiseMultiplier float
---@field bUseMovementAudioLoops boolean
---@field bAudioLoopOnGroundOnly boolean
---@field WalkAudioLoop USoundBase
---@field SprintAudioLoop USoundBase
---@field MovementLoopFadeInTime float
---@field MovementLoopFadeOutTime float
---@field MovementLoopAttachName FName
---@field AdditionalMovementAudioLoop USoundBase
---@field AdditionalLoopFadeInTime float
---@field AdditionalLoopFadeOutTime float
---@field AdditionalLoopAttachName FName
---@field AdditionalLoopChance float
---@field AdditionalLoopMinDistance float
UMaineCharMovementComponent = {}

---@param Reason EDetachSplineReason
function UMaineCharMovementComponent:Unperch(Reason) end
---@return boolean
function UMaineCharMovementComponent:ToggleSprint() end
---@return boolean
function UMaineCharMovementComponent:ToggleGlide() end
---@return boolean
function UMaineCharMovementComponent:ToggleAutorun() end
---@param bInWater boolean
function UMaineCharMovementComponent:SetStandingInWater(bInWater) end
---@param bSitting boolean
---@param InChair AChairBuilding
function UMaineCharMovementComponent:SetIsSitting(bSitting, InChair) end
---@param bState boolean
function UMaineCharMovementComponent:SetAutorun(bState) end
---@param Target FAttractionComponentKey
---@return boolean
function UMaineCharMovementComponent:Perch(Target) end
---@param Sender AActor
---@param Damage float
---@param DamageEvent FDamageEvent
---@param DamageInfo FDamageInfo
function UMaineCharMovementComponent:OnFoliageDamaged(Sender, Damage, DamageEvent, DamageInfo) end
---@return boolean
function UMaineCharMovementComponent:IsZiplining() end
---@return boolean
function UMaineCharMovementComponent:IsUnderwater() end
---@return boolean
function UMaineCharMovementComponent:IsStandingInWater() end
---@return boolean
function UMaineCharMovementComponent:IsSprintingToggled() end
---@return boolean
function UMaineCharMovementComponent:IsSprinting() end
---@return boolean
function UMaineCharMovementComponent:IsSitting() end
---@return boolean
function UMaineCharMovementComponent:IsPerched() end
---@return boolean
function UMaineCharMovementComponent:IsGliding() end
---@return boolean
function UMaineCharMovementComponent:IsClimbing() end
---@return boolean
function UMaineCharMovementComponent:IsAutorunning() end
---@return float
function UMaineCharMovementComponent:GetZiplineReattachTime() end
---@return float
function UMaineCharMovementComponent:GetZiplinePosition() end
---@return boolean
function UMaineCharMovementComponent:GetZiplineDirectionDown() end
---@return float
function UMaineCharMovementComponent:GetPreviousZiplineChangeTime() end
---@return AZiplineLine
function UMaineCharMovementComponent:GetPreviousZipline() end
---@return UCharacterMotionEaterComponent
function UMaineCharMovementComponent:GetMotionEater() end
---@return float
function UMaineCharMovementComponent:GetMaxGroundSpeed() end
---@return EGlidingStyle
function UMaineCharMovementComponent:GetGlidingStyle() end
---@return AChairBuilding
function UMaineCharMovementComponent:GetCurrentChair() end
---@return ECameraDisplayMode
function UMaineCharMovementComponent:GetCameraDisplayMode() end
---@return AZiplineLine
function UMaineCharMovementComponent:GetAttachedZipline() end
---@param Reason EDetachSplineReason
function UMaineCharMovementComponent:DetachFromSpline(Reason) end
---@return boolean
function UMaineCharMovementComponent:CanZipUp() end


---@class UMaineGameUserSettings : UGameUserSettings
---@field bHasSeenArachnophobiaMessage boolean
---@field bHasSeenAccessibilityMessage boolean
---@field bHasSeenEarlyAccessMessage boolean
---@field bHasSeenXboxLoginMessage boolean
---@field bHasSetSteamDeckDefaults boolean
---@field MasterSoundVolume float
---@field EffectsSoundVolume float
---@field AmbienceSoundVolume float
---@field MusicSoundVolume float
---@field UISoundVolume float
---@field NarrationSoundVolume float
---@field CinematicsSoundVolume float
---@field VoiceSoundVolume float
---@field VoiceChatSoundVolume float
---@field VoiceChatActivation EVoiceChatActivation
---@field bXAxisInverted boolean
---@field bYAxisInverted boolean
---@field bControllerXAxisInverted boolean
---@field bControllerYAxisInverted boolean
---@field bControllerMoveXInverted boolean
---@field bControllerMoveYInverted boolean
---@field MouseSensitivityValue float
---@field MouseSensitivityValueX float
---@field MouseSensitivityValueY float
---@field ControllerSensitivity float
---@field ControllerSensitivityX float
---@field ControllerSensitivityY float
---@field bMouseToggleSprint boolean
---@field MouseSprintMode EControlSprintMode
---@field bMouseToggleCrouch boolean
---@field bControllerToggleSprint boolean
---@field ControllerSprintMode EControlSprintMode
---@field bControllerToggleCrouch boolean
---@field bKeyboardLevelViewOnSprint boolean
---@field bControllerLevelViewOnSprint boolean
---@field bControllerRumbleEnabled boolean
---@field bMotionControlsEnabled boolean
---@field bAdaptiveTriggersEnabled boolean
---@field ControllerLeftInnerDeadZone float
---@field ControllerLeftOuterDeadZone float
---@field ControllerRightInnerDeadZone float
---@field ControllerRightOuterDeadZone float
---@field ActionMappingChangedDelegate FMaineGameUserSettingsActionMappingChangedDelegate
---@field AxisMappingChangedDelegate FMaineGameUserSettingsAxisMappingChangedDelegate
---@field AddedActionKeyBinds TArray<FInputActionKeyMapping>
---@field RemovedActionKeyBinds TArray<FInputActionKeyMapping>
---@field AddedAxisKeyBinds TArray<FInputAxisKeyMapping>
---@field RemovedAxisKeyBinds TArray<FInputAxisKeyMapping>
---@field AutosaveInterval float
---@field AutosavesNumber float
---@field bShowTutorial boolean
---@field bShowSurvivalQuests boolean
---@field OnShowSurvivalQuestsChanged FMaineGameUserSettingsOnShowSurvivalQuestsChanged
---@field bShowHotbar boolean
---@field OnShowHotbarChanged FMaineGameUserSettingsOnShowHotbarChanged
---@field InteractHighlightLevel EInteractHighlightLevel
---@field bExtraWideInteract boolean
---@field LanguageSetting ELanguageSetting
---@field SpokenLanguageSetting ESpokenLanguageSetting
---@field bShowDownloadCode boolean
---@field OnShowDownloadCodeChanged FMaineGameUserSettingsOnShowDownloadCodeChanged
---@field MotionBlurScale float
---@field ChromaticAberration boolean
---@field GammaLevel float
---@field DOFLevel int32
---@field FPSLimit EFPSLimit
---@field Resolution3D float
---@field bHasRunHardwareBenchmark boolean
---@field bHasAppliedInitialAccessibility boolean
---@field bHasWarnedForUnsafeValues boolean
---@field DefaultQualitySettings EScalabilitySettings
---@field QualitySettings EScalabilitySettings
---@field QualitySettingsChangedDelegate FMaineGameUserSettingsQualitySettingsChangedDelegate
---@field FSRQualityLevel int32
---@field CustomFieldOfView float
---@field FieldOfViewChangedDelegate FMaineGameUserSettingsFieldOfViewChangedDelegate
---@field bSpecialPerformance boolean
---@field HDRMaxBrightness float
---@field HDRContrast float
---@field HDRUIBrightness float
---@field HDRUIContrast float
---@field ColorBlindSetting EColorBlindModeSettings
---@field ColorblindChangedDelegate FMaineGameUserSettingsColorblindChangedDelegate
---@field SubtitlesSetting ESubtitleVerbositySettings
---@field SubtitlesChangedDelegate FMaineGameUserSettingsSubtitlesChangedDelegate
---@field SubtitleSizeSetting ESubtitleSizeSettings
---@field SubtitleSizeChangedDelegate FMaineGameUserSettingsSubtitleSizeChangedDelegate
---@field bChatBackground boolean
---@field ChatBackgroundChangedDelegate FMaineGameUserSettingsChatBackgroundChangedDelegate
---@field bSubtitleBackground boolean
---@field SubtitleBackgroundChangedDelegate FMaineGameUserSettingsSubtitleBackgroundChangedDelegate
---@field ArachnophobiaSafeMode int32
---@field ArachnophobiaSafeModeChangedDelegate FMaineGameUserSettingsArachnophobiaSafeModeChangedDelegate
---@field bReadToMe boolean
---@field ReadToMeChangedDelegate FMaineGameUserSettingsReadToMeChangedDelegate
---@field ReadToMeVoice FString
---@field ReadToMeVoiceChangedDelegate FMaineGameUserSettingsReadToMeVoiceChangedDelegate
---@field ReadToMeSpeed float
---@field ReadToMeSpeedChangedDelegate FMaineGameUserSettingsReadToMeSpeedChangedDelegate
---@field bChatTextToSpeech boolean
---@field ChatTextToSpeechChangedDelegate FMaineGameUserSettingsChatTextToSpeechChangedDelegate
---@field bChatSpeechToText boolean
---@field ChatSpeechToTextChangedDelegate FMaineGameUserSettingsChatSpeechToTextChangedDelegate
---@field bLargeText boolean
---@field LargeTextChangedDelegate FMaineGameUserSettingsLargeTextChangedDelegate
---@field bLargeHUD boolean
---@field LargeHUDChangedDelegate FMaineGameUserSettingsLargeHUDChangedDelegate
---@field bCrossPlayEnabled boolean
---@field CrossPlayEnabledChangedDelegate FMaineGameUserSettingsCrossPlayEnabledChangedDelegate
---@field bPartyDistance boolean
---@field PartyDistanceChangedDelegate FMaineGameUserSettingsPartyDistanceChangedDelegate
---@field ReticleSize float
---@field ReticleSizeChangedDelegate FMaineGameUserSettingsReticleSizeChangedDelegate
---@field ReticleOpacity float
---@field ReticleOpacityChangedDelegate FMaineGameUserSettingsReticleOpacityChangedDelegate
---@field bCreatureSpawnerAIOn boolean
---@field CreatureSpawnerAIOnChangedDelegate FMaineGameUserSettingsCreatureSpawnerAIOnChangedDelegate
---@field bCreatureSpawnerGroundSnap boolean
---@field CreatureSpawnerGroundSnapChangedDelegate FMaineGameUserSettingsCreatureSpawnerGroundSnapChangedDelegate
---@field CreatureSpawnerInfuseLevel int32
---@field CreatureSpawnerInfuseLevelChangedDelegate FMaineGameUserSettingsCreatureSpawnerInfuseLevelChangedDelegate
UMaineGameUserSettings = {}

---@param Value boolean
function UMaineGameUserSettings:SetYAxisInverted(Value) end
---@param Value boolean
function UMaineGameUserSettings:SetXAxisInverted(Value) end
---@param bEnabled boolean
function UMaineGameUserSettings:SetVSyncWrapper(bEnabled) end
---@param Value float
function UMaineGameUserSettings:SetVoiceSoundVolume(Value) end
---@param Value float
function UMaineGameUserSettings:SetVoiceChatSoundVolume(Value) end
---@param Quality EVoiceChatActivation
function UMaineGameUserSettings:SetVoiceChatActivation(Quality) end
---@param Value float
function UMaineGameUserSettings:SetUISoundVolume(Value) end
---@param Setting ESubtitleSizeSettings
function UMaineGameUserSettings:SetSubtitleSize(Setting) end
---@param Setting ESubtitleVerbositySettings
function UMaineGameUserSettings:SetSubtitleMode(Setting) end
---@param Setting boolean
function UMaineGameUserSettings:SetSubtitleBackground(Setting) end
---@param NewLanguage ESpokenLanguageSetting
function UMaineGameUserSettings:SetSpokenLanguage(NewLanguage) end
---@param NewShowTutorial boolean
function UMaineGameUserSettings:SetShowTutorial(NewShowTutorial) end
---@param NewShowSurvivalQuests boolean
function UMaineGameUserSettings:SetShowSurvivalQuests(NewShowSurvivalQuests) end
---@param NewShowHotbar boolean
function UMaineGameUserSettings:SetShowHotbar(NewShowHotbar) end
---@param NewShowDownloadCode boolean
function UMaineGameUserSettings:SetShowDownloadCode(NewShowDownloadCode) end
---@param Setting float
function UMaineGameUserSettings:SetReticleSize(Setting) end
---@param Setting float
function UMaineGameUserSettings:SetReticleOpacity(Setting) end
---@param Setting FString
function UMaineGameUserSettings:SetReadToMeVoice(Setting) end
---@param Setting float
function UMaineGameUserSettings:SetReadToMeSpeed(Setting) end
---@param Setting boolean
function UMaineGameUserSettings:SetReadToMe(Setting) end
---@param Quality EScalabilitySettings
function UMaineGameUserSettings:SetQualitySettings(Quality) end
---@param Setting boolean
function UMaineGameUserSettings:SetPartyDistance(Setting) end
---@param Value float
function UMaineGameUserSettings:SetNarrationSoundVolume(Value) end
---@param Value float
function UMaineGameUserSettings:SetMusicSoundVolume(Value) end
---@param bEnabled boolean
function UMaineGameUserSettings:SetMouseToggleSprintEnabled(bEnabled) end
---@param bEnabled boolean
function UMaineGameUserSettings:SetMouseToggleCrouchEnabled(bEnabled) end
---@param NewSprintMode EControlSprintMode
function UMaineGameUserSettings:SetMouseSprintMode(NewSprintMode) end
---@param Value float
function UMaineGameUserSettings:SetMouseSensitivityY(Value) end
---@param Value float
function UMaineGameUserSettings:SetMouseSensitivityX(Value) end
---@param Value boolean
function UMaineGameUserSettings:SetMotionControlsEnabled(Value) end
---@param NewMotionBlurScale float
function UMaineGameUserSettings:SetMotionBlurScale(NewMotionBlurScale) end
---@param Value float
function UMaineGameUserSettings:SetMasterSoundVolume(Value) end
---@param Setting boolean
function UMaineGameUserSettings:SetLargeText(Setting) end
---@param Setting boolean
function UMaineGameUserSettings:SetLargeHUD(Setting) end
---@param NewLanguage ELanguageSetting
function UMaineGameUserSettings:SetLanguage(NewLanguage) end
---@param bEnabled boolean
function UMaineGameUserSettings:SetKeyboardLevelViewOnSprint(bEnabled) end
---@param NewInteractHighlightLevel EInteractHighlightLevel
function UMaineGameUserSettings:SetInteractHighlightLevel(NewInteractHighlightLevel) end
---@param Contrast float
function UMaineGameUserSettings:SetHDRUIContrast(Contrast) end
---@param Brightness float
function UMaineGameUserSettings:SetHDRUIBrightness(Brightness) end
---@param MaxBrightness float
function UMaineGameUserSettings:SetHDRMaxBrightness(MaxBrightness) end
---@param Contrast float
function UMaineGameUserSettings:SetHDRContrast(Contrast) end
---@param bState boolean
function UMaineGameUserSettings:SetHasSeenXboxLoginMessage(bState) end
---@param bState boolean
function UMaineGameUserSettings:SetHasSeenEarlyAccessMessage(bState) end
---@param bState boolean
function UMaineGameUserSettings:SetHasSeenArachnophobiaMessage(bState) end
---@param bState boolean
function UMaineGameUserSettings:SetHasSeenAccessibilityMessage(bState) end
---@param GammaLevelIn float
function UMaineGameUserSettings:SetGammaLevel(GammaLevelIn) end
---@param Quality int32
function UMaineGameUserSettings:SetFSRQuality(Quality) end
---@param FPSLimitIn EFPSLimit
function UMaineGameUserSettings:SetFPSLimit(FPSLimitIn) end
---@param FOVIn float
function UMaineGameUserSettings:SetFOV(FOVIn) end
---@param NewExtraWideInteract boolean
function UMaineGameUserSettings:SetExtraWideInteract(NewExtraWideInteract) end
---@param Value float
function UMaineGameUserSettings:SetEffectsSoundVolume(Value) end
---@param DOFLevelIn int32
function UMaineGameUserSettings:SetDOFLevel(DOFLevelIn) end
---@param Setting boolean
function UMaineGameUserSettings:SetCrossPlayEnabled(Setting) end
---@param Setting int32
function UMaineGameUserSettings:SetCreatureSpawnerInfuseLevel(Setting) end
---@param Setting boolean
function UMaineGameUserSettings:SetCreatureSpawnerGroundSnap(Setting) end
---@param Setting boolean
function UMaineGameUserSettings:SetCreatureSpawnerAIOn(Setting) end
---@param bEnabled boolean
function UMaineGameUserSettings:SetControllerToggleSprintEnabled(bEnabled) end
---@param bEnabled boolean
function UMaineGameUserSettings:SetControllerToggleCrouchEnabled(bEnabled) end
---@param NewSprintMode EControlSprintMode
function UMaineGameUserSettings:SetControllerSprintMode(NewSprintMode) end
---@param Value float
function UMaineGameUserSettings:SetControllerSensitivityY(Value) end
---@param Value float
function UMaineGameUserSettings:SetControllerSensitivityX(Value) end
---@param Value boolean
function UMaineGameUserSettings:SetControllerRumbleEnabled(Value) end
---@param Value float
function UMaineGameUserSettings:SetControllerRightOuterDeadZone(Value) end
---@param Value float
function UMaineGameUserSettings:SetControllerRightInnerDeadZone(Value) end
---@param Value boolean
function UMaineGameUserSettings:SetControllerMoveYInverted(Value) end
---@param Value boolean
function UMaineGameUserSettings:SetControllerMoveXInverted(Value) end
---@param Value boolean
function UMaineGameUserSettings:SetControllerLookYInverted(Value) end
---@param Value boolean
function UMaineGameUserSettings:SetControllerLookXInverted(Value) end
---@param bEnabled boolean
function UMaineGameUserSettings:SetControllerLevelViewOnSprint(bEnabled) end
---@param Value float
function UMaineGameUserSettings:SetControllerLeftOuterDeadZone(Value) end
---@param Value float
function UMaineGameUserSettings:SetControllerLeftInnerDeadZone(Value) end
---@param Setting EColorBlindModeSettings
function UMaineGameUserSettings:SetColorblindMode(Setting) end
---@param Value float
function UMaineGameUserSettings:SetCinematicsSoundVolume(Value) end
---@param NewChromaticAberration boolean
function UMaineGameUserSettings:SetChromaticAberration(NewChromaticAberration) end
---@param Setting boolean
function UMaineGameUserSettings:SetChatTextToSpeech(Setting) end
---@param Setting boolean
function UMaineGameUserSettings:SetChatSpeechToText(Setting) end
---@param Setting boolean
function UMaineGameUserSettings:SetChatBackground(Setting) end
---@param OldValues TArray<FInputAxisKeyMapping>
---@param NewValues TArray<FInputAxisKeyMapping>
function UMaineGameUserSettings:SetAxisKeyBinds(OldValues, NewValues) end
---@param NewAutosavesNumber float
function UMaineGameUserSettings:SetAutosavesNumber(NewAutosavesNumber) end
---@param NewAutosaveInterval float
function UMaineGameUserSettings:SetAutosaveInterval(NewAutosaveInterval) end
---@param Setting float
function UMaineGameUserSettings:SetArachnophobiaSafeMode(Setting) end
---@param Value float
function UMaineGameUserSettings:SetAmbienceSoundVolume(Value) end
---@param Value boolean
function UMaineGameUserSettings:SetAdaptiveTriggersEnabled(Value) end
---@param OldValues TArray<FInputActionKeyMapping>
---@param NewValues TArray<FInputActionKeyMapping>
---@param ControlsData UGlobalControlsData
function UMaineGameUserSettings:SetActionKeyBinds(OldValues, NewValues, ControlsData) end
---@param ResolutionIn float
function UMaineGameUserSettings:Set3DResolution(ResolutionIn) end
function UMaineGameUserSettings:ResetAllKeyBinds() end
---@param Bindings TArray<FAnyControlMapping>
function UMaineGameUserSettings:RemoveMappings(Bindings) end
---@param Bindings TArray<FInputActionKeyMapping>
function UMaineGameUserSettings:RemoveActionMappings(Bindings) end
---@return boolean
function UMaineGameUserSettings:IsHDRSupported() end
---@param ActionName FName
---@param bGamepad boolean
---@return boolean
function UMaineGameUserSettings:HasActionKeyBind(ActionName, bGamepad) end
---@return boolean
function UMaineGameUserSettings:GetYAxisInverted() end
---@return boolean
function UMaineGameUserSettings:GetXAxisInverted() end
---@return boolean
function UMaineGameUserSettings:GetVSyncWrapper() end
---@return float
function UMaineGameUserSettings:GetVoiceSoundVolume() end
---@return float
function UMaineGameUserSettings:GetVoiceChatSoundVolume() end
---@return EVoiceChatActivation
function UMaineGameUserSettings:GetVoiceChatActivation() end
---@return float
function UMaineGameUserSettings:GetUISoundVolume() end
---@return ESubtitleSizeSettings
function UMaineGameUserSettings:GetSubtitleSize() end
---@return ESubtitleVerbositySettings
function UMaineGameUserSettings:GetSubtitleMode() end
---@return boolean
function UMaineGameUserSettings:GetSubtitleBackground() end
---@return ESpokenLanguageSetting
function UMaineGameUserSettings:GetSpokenLanguage() end
---@return boolean
function UMaineGameUserSettings:GetShowTutorial() end
---@return boolean
function UMaineGameUserSettings:GetShowSurvivalQuests() end
---@return boolean
function UMaineGameUserSettings:GetShowHotbar() end
---@return boolean
function UMaineGameUserSettings:GetShowDownloadCode() end
---@return float
function UMaineGameUserSettings:GetReticleSize() end
---@return float
function UMaineGameUserSettings:GetReticleOpacity() end
---@return FString
function UMaineGameUserSettings:GetReadToMeVoice() end
---@return float
function UMaineGameUserSettings:GetReadToMeSpeed() end
---@return boolean
function UMaineGameUserSettings:GetReadToMe() end
---@return EScalabilitySettings
function UMaineGameUserSettings:GetQualitySettings() end
---@return boolean
function UMaineGameUserSettings:GetPartyDistance() end
---@return float
function UMaineGameUserSettings:GetNarrationSoundVolume() end
---@return float
function UMaineGameUserSettings:GetMusicSoundVolume() end
---@return boolean
function UMaineGameUserSettings:GetMouseToggleSprintEnabled() end
---@return boolean
function UMaineGameUserSettings:GetMouseToggleCrouchEnabled() end
---@return EControlSprintMode
function UMaineGameUserSettings:GetMouseSprintMode() end
---@return float
function UMaineGameUserSettings:GetMouseSensitivityY() end
---@return float
function UMaineGameUserSettings:GetMouseSensitivityX() end
---@return boolean
function UMaineGameUserSettings:GetMotionControlsEnabled() end
---@return float
function UMaineGameUserSettings:GetMotionBlurScale() end
---@return float
function UMaineGameUserSettings:GetMasterSoundVolume() end
---@return boolean
function UMaineGameUserSettings:GetLargeText() end
---@return boolean
function UMaineGameUserSettings:GetLargeHUD() end
---@return ELanguageSetting
function UMaineGameUserSettings:GetLanguage() end
---@return boolean
function UMaineGameUserSettings:GetKeyboardLevelViewOnSprint() end
---@return EInteractHighlightLevel
function UMaineGameUserSettings:GetInteractHighlightLevel() end
---@return float
function UMaineGameUserSettings:GetHDRUIContrast() end
---@return float
function UMaineGameUserSettings:GetHDRUIBrightness() end
---@return float
function UMaineGameUserSettings:GetHDRMaxBrightness() end
---@return float
function UMaineGameUserSettings:GetHDRContrast() end
---@return boolean
function UMaineGameUserSettings:GetHasSeenXboxLoginMessage() end
---@return boolean
function UMaineGameUserSettings:GetHasSeenEarlyAccessMessage() end
---@return boolean
function UMaineGameUserSettings:GetHasSeenArachnophobiaMessage() end
---@return boolean
function UMaineGameUserSettings:GetHasSeenAccessibilityMessage() end
---@return float
function UMaineGameUserSettings:GetGammaLevel() end
---@return int32
function UMaineGameUserSettings:GetFSRQuality() end
---@return EFPSLimit
function UMaineGameUserSettings:GetFPSLimit() end
---@return float
function UMaineGameUserSettings:GetFOV() end
---@return boolean
function UMaineGameUserSettings:GetExtraWideInteract() end
---@return float
function UMaineGameUserSettings:GetEffectsSoundVolume() end
---@return int32
function UMaineGameUserSettings:GetDOFLevel() end
---@return boolean
function UMaineGameUserSettings:GetCrossPlayEnabled() end
---@return int32
function UMaineGameUserSettings:GetCreatureSpawnerInfuseLevel() end
---@return boolean
function UMaineGameUserSettings:GetCreatureSpawnerGroundSnap() end
---@return boolean
function UMaineGameUserSettings:GetCreatureSpawnerAIOn() end
---@return boolean
function UMaineGameUserSettings:GetControllerToggleSprintEnabled() end
---@return boolean
function UMaineGameUserSettings:GetControllerToggleCrouchEnabled() end
---@return EControlSprintMode
function UMaineGameUserSettings:GetControllerSprintMode() end
---@return float
function UMaineGameUserSettings:GetControllerSensitivityY() end
---@return float
function UMaineGameUserSettings:GetControllerSensitivityX() end
---@return boolean
function UMaineGameUserSettings:GetControllerRumbleEnabled() end
---@return float
function UMaineGameUserSettings:GetControllerRightOuterDeadZone() end
---@return float
function UMaineGameUserSettings:GetControllerRightInnerDeadZone() end
---@return boolean
function UMaineGameUserSettings:GetControllerMoveYInverted() end
---@return boolean
function UMaineGameUserSettings:GetControllerMoveXInverted() end
---@return boolean
function UMaineGameUserSettings:GetControllerLookYInverted() end
---@return boolean
function UMaineGameUserSettings:GetControllerLookXInverted() end
---@return boolean
function UMaineGameUserSettings:GetControllerLevelViewOnSprint() end
---@return float
function UMaineGameUserSettings:GetControllerLeftOuterDeadZone() end
---@return float
function UMaineGameUserSettings:GetControllerLeftInnerDeadZone() end
---@return boolean
function UMaineGameUserSettings:GetColorblindModeEnabled() end
---@return EColorBlindModeSettings
function UMaineGameUserSettings:GetColorblindMode() end
---@return float
function UMaineGameUserSettings:GetCinematicsSoundVolume() end
---@return boolean
function UMaineGameUserSettings:GetChromaticAberration() end
---@return boolean
function UMaineGameUserSettings:GetChatTextToSpeech() end
---@return boolean
function UMaineGameUserSettings:GetChatSpeechToText() end
---@return boolean
function UMaineGameUserSettings:GetChatBackground() end
---@param AxisName FName
---@param bPositive boolean
---@return TArray<FInputAxisKeyMapping>
function UMaineGameUserSettings:GetAxisKeyBinds(AxisName, bPositive) end
---@return float
function UMaineGameUserSettings:GetAutosavesNumber() end
---@return float
function UMaineGameUserSettings:GetAutosaveInterval() end
---@return float
function UMaineGameUserSettings:GetArachnophobiaSafeMode() end
---@return float
function UMaineGameUserSettings:GetAmbienceSoundVolume() end
---@return TArray<FInputActionKeyMapping>
function UMaineGameUserSettings:GetAllKeyBinds() end
---@return TArray<FInputAxisKeyMapping>
function UMaineGameUserSettings:GetAllAxisMappings() end
---@return boolean
function UMaineGameUserSettings:GetAdaptiveTriggersEnabled() end
---@param ActionName FName
---@return TArray<FInputActionKeyMapping>
function UMaineGameUserSettings:GetActionKeyboardKeyBinds(ActionName) end
---@param ActionName FName
---@return TArray<FInputActionKeyMapping>
function UMaineGameUserSettings:GetActionKeyBinds(ActionName) end
---@param ActionName FName
---@return TArray<FInputActionKeyMapping>
function UMaineGameUserSettings:GetActionGamepadKeyBinds(ActionName) end
---@return float
function UMaineGameUserSettings:Get3DResolution() end


---@class UMaineMovieWidget : UWindowWidget
---@field MoviePlayer UOEIMoviePlayerWidget
---@field FadePanel UContentFadeWidget
---@field ProgressGroup UCharacterProgressGroup
UMaineMovieWidget = {}

function UMaineMovieWidget:OnMovieOpened() end
function UMaineMovieWidget:OnMovieFailed() end
---@param bFadeIn boolean
function UMaineMovieWidget:OnFadeComplete(bFadeIn) end
function UMaineMovieWidget:OnAllPlayersSkipped() end


---@class UMainePathFollowingComponent : UPathFollowingComponent
UMainePathFollowingComponent = {}


---@class UMainePhotoModeComponent : UPhotoModeComponent
---@field PlayerIsInteractHolding boolean
---@field OnPhotoTaken FMainePhotoModeComponentOnPhotoTaken
---@field PrePhotoModeHiddenEquipment TArray<FEquipmentSlotHiddenPrePhotoModeData>
UMainePhotoModeComponent = {}

function UMainePhotoModeComponent:UIEnterPhotoMode() end
---@param InUsingChat boolean
function UMainePhotoModeComponent:SetPlayerUsingChatBox(InUsingChat) end
function UMainePhotoModeComponent:ServerUIEnterPhotoMode() end
function UMainePhotoModeComponent:ServerNotifyPhotoTaken() end
function UMainePhotoModeComponent:ServerEnterPhotoModeForEditModeThumbnail() end
function UMainePhotoModeComponent:EnterPhotoModeForEditModeThumbnail() end
function UMainePhotoModeComponent:ClientUIEnterPhotoMode() end
---@param InPlayerInMenu boolean
function UMainePhotoModeComponent:ClientOnPlayerInMenuChanged(InPlayerInMenu) end
---@param Message FString
function UMainePhotoModeComponent:ClientAddNotificationMessage(Message) end


---@class UMainePhotoModeSettingInput : UPhotoModeSettingWidget
UMainePhotoModeSettingInput = {}

---@param Time float
function UMainePhotoModeSettingInput:SetPhotoModeTimeOfDay(Time) end
---@param Value float
function UMainePhotoModeSettingInput:SetAzimuthOffset(Value) end


---@class UMainePhotoModeSettings : UPhotoModeSettingsBase
UMainePhotoModeSettings = {}


---@class UMainePlayerGameViewportClient : UGameViewportClient
UMainePlayerGameViewportClient = {}


---@class UMaineReplicationFunctionLibrary : UBlueprintFunctionLibrary
UMaineReplicationFunctionLibrary = {}


---@class UMaineReplicationGraph : UReplicationGraph
---@field bAllowReplicationInfoOverrides boolean
---@field GridNode UReplicationGraphNode_GridSpatialization2D
---@field AlwaysRelevantNode UReplicationGraphNode_ActorList
---@field AlwaysRelevantForConnectionNodes TMap<UNetConnection, UReplicationGraphNode_AlwaysRelevant_ForConnection_Maine>
---@field ActorsWithoutNetConnection TArray<AActor>
UMaineReplicationGraph = {}



---@class UMaineReplicationGraphSettings : UDeveloperSettings
---@field LowEndPlatformReplicationPolicyOverrides TMap<TSubclassOf<AActor>, FOverrideActorReplicationPolicy>
UMaineReplicationGraphSettings = {}

---@param InActor AActor
---@return FOverrideActorReplicationPolicy
function UMaineReplicationGraphSettings:GetActorReplicationPolicy(InActor) end


---@class UMaineRichTextBlock : URichTextBlock
UMaineRichTextBlock = {}

function UMaineRichTextBlock:OnGlobalColorChanged() end


---@class UMaineSignificanceComponent : UActorComponent
---@field bOverrideSignificanceThresholds boolean
---@field OuterSignificanceThreshold float
---@field InnerSignificanceThreshold float
---@field SignificanceValue float
---@field bIsLocallySignificant boolean
UMaineSignificanceComponent = {}



---@class UMaineSignificanceManager : USignificanceManager
UMaineSignificanceManager = {}


---@class UMaineSignificanceManagerDeveloperSettings : UDeveloperSettings
---@field bShowDebug boolean
---@field OuterSignificanceThreshold float
---@field InnerSignificanceThreshold float
UMaineSignificanceManagerDeveloperSettings = {}



---@class UMaineStaticMeshComponent : UStaticMeshComponent
---@field SeparatedMesh UStaticMesh
UMaineStaticMeshComponent = {}



---@class UMaineSubtitleEntryWidget : UOEISubtitleEntryWidget
---@field EntryTextBlock UTextBlock
UMaineSubtitleEntryWidget = {}



---@class UMaineSubtitleManagerWidget : UOEISubtitleManagerWidget
UMaineSubtitleManagerWidget = {}


---@class UMaineTelemetryHelper : UTelemetryHelper
UMaineTelemetryHelper = {}


---@class UManageSharedSavesWidget : UWindowWidget
UManageSharedSavesWidget = {}

---@param Friend FBlueprintFriendResult
function UManageSharedSavesWidget:ViewPlayerProfileFromFriendStruct(Friend) end


---@class UManagedRenderTargetObject : UObject
---@field Name FName
---@field Size FVector2D
---@field SceneProxyCullDistance float
---@field EnabledOnLowEndPlatforms boolean
UManagedRenderTargetObject = {}



---@class UMapCollectibleWidget : UBaseMapEntryWidget
UMapCollectibleWidget = {}

---@return FCollectibleData
function UMapCollectibleWidget:GetData() end


---@class UMapComponent : UActorComponent
---@field OnUnlockedPuzzlePieceZone FMapComponentOnUnlockedPuzzlePieceZone
---@field OnUnlockedMapsChanged FMapComponentOnUnlockedMapsChanged
---@field UnlockedPuzzlePieceZones TArray<EPuzzlePieceZone>
---@field WorldMapXMin float
---@field WorldMapXMax float
---@field WorldMapYMin float
---@field WorldMapYMax float
UMapComponent = {}

---@param Unlocker ASurvivalPlayerState
---@param PuzzlePieceRegion FDataTableRowHandle
function UMapComponent:UnlockPuzzlePieceZone(Unlocker, PuzzlePieceRegion) end
function UMapComponent:OnRep_UnlockedMaps() end
---@param Unlocker ASurvivalPlayerState
---@param UnlockedPuzzlePieceZone FDataTableRowHandle_NetCrc
function UMapComponent:MulticastNotifyPuzzlePieceZoneUnlocked(Unlocker, UnlockedPuzzlePieceZone) end
---@param PuzzlePieceRegion FDataTableRowHandle
---@return boolean
function UMapComponent:IsPuzzlePieceZoneUnlocked(PuzzlePieceRegion) end
---@param MapData EPuzzlePieceZone
---@return boolean
function UMapComponent:HasSeenMapUnlocked(MapData) end
---@param Location FVector
---@return FVector2D
function UMapComponent:GetWorldMapPosition(Location) end


---@class UMapLegendEntryWidget : UGameUserWidget
---@field OnEntrySelectedDelegate FMapLegendEntryWidgetOnEntrySelectedDelegate
---@field OnEntryFocused FMapLegendEntryWidgetOnEntryFocused
---@field PreviousButton UButton
---@field NextButton UButton
---@field Image UImage
---@field TextElement UTextBlock
---@field NumberTextElement UTextBlock
---@field LocString FLocString
---@field AlphaWhenHidden float
---@field bGroupVisible boolean
---@field bCanToggleGroupVisibility boolean
---@field EntryIndex int32
---@field EntryWidgets TArray<UBaseMapEntryWidget>
---@field LegendIconMap TMap<EMapEntryType, UTexture2D>
UMapLegendEntryWidget = {}

---@param IsVisible boolean
function UMapLegendEntryWidget:UpdateVisibilityControls(IsVisible) end
function UMapLegendEntryWidget:UpdateIconColor() end
function UMapLegendEntryWidget:ToggleGroupVisibility() end
function UMapLegendEntryWidget:ShowSingleElementControls() end
---@param Show boolean
function UMapLegendEntryWidget:ShowArrowControls(Show) end
---@param EntryWidget UBaseMapEntryWidget
function UMapLegendEntryWidget:SetSelectedEntry(EntryWidget) end
---@param NewVal boolean
function UMapLegendEntryWidget:SetGroupVisibility(NewVal) end
---@param Identity EPlayerCharacterIdentity
function UMapLegendEntryWidget:SetCustomPlayerVisuals(Identity) end
---@param bNewVal boolean
function UMapLegendEntryWidget:SetCanGroupToggleVisibility(bNewVal) end
function UMapLegendEntryWidget:RefreshNumberText() end
function UMapLegendEntryWidget:RefreshGroupMarkersForVisibility() end
function UMapLegendEntryWidget:RefreshEntry() end
function UMapLegendEntryWidget:OnPreviousButtonClicked() end
function UMapLegendEntryWidget:OnNextButtonClicked() end
function UMapLegendEntryWidget:GotoPreviousEntry() end
function UMapLegendEntryWidget:GotoNextEntry() end
function UMapLegendEntryWidget:GotoCurrentEntry() end
---@return UBaseMapEntryWidget
function UMapLegendEntryWidget:GetSelectedEntry() end
---@return int32
function UMapLegendEntryWidget:GetNumEntries() end
---@return EMapEntryType
function UMapLegendEntryWidget:GetMapEntryType() end
---@return boolean
function UMapLegendEntryWidget:GetGroupVisible() end
---@return TArray<UBaseMapEntryWidget>
function UMapLegendEntryWidget:GetEntryWidgets() end
---@param MapEntryWidget UBaseMapEntryWidget
---@return boolean
function UMapLegendEntryWidget:ContainsEntry(MapEntryWidget) end


---@class UMapMarkerWidget : UBaseMapEntryWidget
---@field MapOwner UMapPanelWidget
---@field HUDMarkerData UHUDMarkerData
UMapMarkerWidget = {}

function UMapMarkerWidget:HandleHUDMarkerDataChanged() end


---@class UMapPOIWidget : UBaseMapEntryWidget
---@field POIData UPointOfInterestDataAsset
UMapPOIWidget = {}



---@class UMapPanelWidget : UGameUserWidget
---@field OnMapPanelPanned FMapPanelWidgetOnMapPanelPanned
---@field OnFocusedEntryChanged FMapPanelWidgetOnFocusedEntryChanged
---@field GridEffect UImage
---@field OuterCanvas UCanvasPanel
---@field POICanvas UCanvasPanel
---@field MapMarkerCanvas UCanvasPanel
---@field CollectibleCanvas UCanvasPanel
---@field PlayerCanvas UCanvasPanel
---@field PlayerWaypointCanvas UCanvasPanel
---@field ResourceWaypointCanvas UCanvasPanel
---@field ImageCanvas UCanvasPanel
---@field TeleporterCanvas UCanvasPanel
---@field ResourceSurveyOverlay UMapResourceSurveyWidget
---@field MapSizeBox USizeBox
---@field ImageScaleBox UScaleBox
---@field MapBorder UBorder
---@field PlayerEntryClass TSubclassOf<UMapPlayerWidget>
---@field PointOfInterestClass TSubclassOf<UMapPOIWidget>
---@field HUDMarkerClass TSubclassOf<UMapMarkerWidget>
---@field CollectibleMarkerClass TSubclassOf<UMapCollectibleWidget>
---@field PlayerWaypointMarkerClass TSubclassOf<UMapPlayerWaypointWidget>
---@field ResourceWaypointClass TSubclassOf<UMapResourceWaypointWidget>
---@field TeleportMarkerClass TSubclassOf<UUGCEditModeTeleportMarker>
---@field MaxBounds FVector2D
---@field MinBounds FVector2D
---@field TextureSize FVector2D
---@field MousePanSensitivity FVector2D
---@field GamepadPanSensitivity float
---@field GamepadPanDeadzone FVector2D
---@field MapVisibleOrientationOffset float
---@field MinDistanceToFocusMarker float
---@field PanDuration float
---@field PanEaseExponent float
---@field ZoomLevels TArray<float>
---@field CurrentZoomLevel int32
UMapPanelWidget = {}

---@param MarkerData UHUDMarkerData
---@return boolean
function UMapPanelWidget:ShouldHudMarkerHaveIcon(MarkerData) end
---@param Owner UWidget
function UMapPanelWidget:SetOwnerScreen(Owner) end
function UMapPanelWidget:PopulateAll() end
---@param ZoomLevel int32
function UMapPanelWidget:OnZoomChange(ZoomLevel) end
---@param Sender UMapComponent
function UMapPanelWidget:OnUnlockedMapsChanged(Sender) end
---@param MarkerData UHUDMarkerData
function UMapPanelWidget:OnPlayerWaypointRemoved(MarkerData) end
---@param MarkerData UHUDMarkerData
function UMapPanelWidget:OnPlayerWaypointAdded(MarkerData) end
---@param MarkerData UHUDMarkerData
function UMapPanelWidget:OnPlayerMarkerRemoved(MarkerData) end
---@param MarkerData UHUDMarkerData
function UMapPanelWidget:OnPlayerMarkerAdded(MarkerData) end
---@param MarkerData UHUDMarkerData
function UMapPanelWidget:OnMarkerRemoved(MarkerData) end
---@param MarkerData UHUDMarkerData
function UMapPanelWidget:OnMarkerAdded(MarkerData) end
---@param EntryWidget UBaseMapEntryWidget
function UMapPanelWidget:OnMapEntryMouseUnHovered(EntryWidget) end
---@param EntryWidget UBaseMapEntryWidget
function UMapPanelWidget:OnMapEntryMouseHovered(EntryWidget) end
---@param MyGeometry FGeometry
---@param MouseEvent FPointerEvent
---@return FEventReply
function UMapPanelWidget:OnBorderMouseDown(MyGeometry, MouseEvent) end
---@param ViaMouseHover boolean
function UMapPanelWidget:HandleMapEntryFocusLost_Internal(ViaMouseHover) end
---@param ViaMouseHover boolean
function UMapPanelWidget:HandleMapEntryFocusLost(ViaMouseHover) end
---@param MapEntry UBaseMapEntryWidget
---@param EntryType EMapEntryType
---@param ViaMouseHover boolean
function UMapPanelWidget:HandleMapEntryFocused_Internal(MapEntry, EntryType, ViaMouseHover) end
---@param MapEntry UBaseMapEntryWidget
---@param EntryType EMapEntryType
---@param ViaMouseHover boolean
function UMapPanelWidget:HandleMapEntryFocused(MapEntry, EntryType, ViaMouseHover) end
---@param MapPosition FVector2D
---@param bIncludeRotation boolean
---@return FVector2D
function UMapPanelWidget:GetWorldPosition(MapPosition, bIncludeRotation) end
---@return FVector2D
function UMapPanelWidget:GetViewCenterPosition() end
---@param WorldLocation FVector
---@param bIncludeRotation boolean
---@return FVector2D
function UMapPanelWidget:GetMapPosition(WorldLocation, bIncludeRotation) end
---@return UBaseMapEntryWidget
function UMapPanelWidget:GetEntryUnderCursor() end
---@return UBaseMapEntryWidget
function UMapPanelWidget:FindClosestValidMapEntryToMapCursor() end
function UMapPanelWidget:CycleZoomValue() end
function UMapPanelWidget:CenterMapOnPlayer() end
---@param ChangeInZoom int32
function UMapPanelWidget:AdjustZoomLevel(ChangeInZoom) end


---@class UMapPlayerWaypointWidget : UMapMarkerWidget
UMapPlayerWaypointWidget = {}


---@class UMapPlayerWidget : UBaseMapEntryWidget
---@field HUDMarkerData UHUDMarkerData
UMapPlayerWidget = {}

---@param Angle float
function UMapPlayerWidget:SetPlayerRotation(Angle) end


---@class UMapPuzzlePieceTextureData : UDataAsset
---@field PuzzlePieceTextures TMap<EPuzzlePieceZone, FPuzzlePieceTextureEntry>
UMapPuzzlePieceTextureData = {}



---@class UMapResourceSurveyWidget : UBaseMapEntryWidget
UMapResourceSurveyWidget = {}


---@class UMapResourceWaypointWidget : UMapMarkerWidget
UMapResourceWaypointWidget = {}


---@class UMapWidget : UGameUserWidget
---@field CloseButton UUserWidget
---@field HeaderText UUserWidget
---@field MapPanel UMapPanelWidget
---@field PlayerContainer UVerticalBox
---@field Player1LegendEntry UMapLegendEntryWidget
---@field PlacesContainer UVerticalBox
---@field DividerPlaces UImage
---@field POIEntry UMapLegendEntryWidget
---@field TrailMarkerEntry UMapLegendEntryWidget
---@field RespawnPointEntry UMapLegendEntryWidget
---@field LabEntry UMapLegendEntryWidget
---@field FieldStationsEntry UMapLegendEntryWidget
---@field OtherEntry UMapLegendEntryWidget
---@field PlayerWaypointEntry UMapLegendEntryWidget
---@field CollectUpgradeEntry UMapLegendEntryWidget
---@field CollectColorEntry UMapLegendEntryWidget
---@field TeleporterContainer UVerticalBox
---@field DividerTeleporter UImage
---@field TeleporterEntry UMapLegendEntryWidget
---@field OverlaysContainer UVerticalBox
---@field DividerOverlays UImage
---@field ResourceSurveyEntry UMapLegendEntryWidget
---@field LegendEntryClass TSubclassOf<UMapLegendEntryWidget>
---@field PointOfInterestTypeMappings TMap<FGameplayTag, EMapEntryType>
---@field SelectedLegend UMapLegendEntryWidget
UMapWidget = {}

function UMapWidget:ToggleSelectedMapGroupVisibility() end
function UMapWidget:ToggleMapMarkerOnFocusedMapEntry() end
function UMapWidget:RefreshDividerVisibility() end
function UMapWidget:PopulatePlayerWaypointLegend() end
function UMapWidget:PopulateEntriesForMap() end
---@param MarkerData UHUDMarkerData
function UMapWidget:OnPlayerWaypointRemoved(MarkerData) end
---@param MarkerData UHUDMarkerData
function UMapWidget:OnPlayerWaypointAdded(MarkerData) end
---@param EntryWidget UBaseMapEntryWidget
---@param MapEntryType EMapEntryType
function UMapWidget:OnLegendEntrySelected(EntryWidget, MapEntryType) end
---@param Sender UMapLegendEntryWidget
---@param FocusCause FFocusEvent
function UMapWidget:OnLegendEntryFocused(Sender, FocusCause) end
---@param Widget UMapLegendEntryWidget
function UMapWidget:K2_OnLegendEntryFocused(Widget) end
---@param MapEntryWidget UBaseMapEntryWidget
---@return UMapLegendEntryWidget
function UMapWidget:GetLegendForEntry(MapEntryWidget) end


---@class UMaskableBoxComponent : UBoxComponent
---@field MaskCategory ECollisionMaskCategory
UMaskableBoxComponent = {}



---@class UMaterialSwapAssetUserData : UAssetUserData
---@field bIgnoreMaterialSwap boolean
UMaterialSwapAssetUserData = {}



---@class UMaterialSwapComponent : UActorComponent
---@field MaterialStacks TMap<FActorMaterialKey, FMaterialInterfaceArray>
UMaterialSwapComponent = {}

---@param Layer EMaterialSwapLayer
---@param Component UMeshComponent
---@param MaterialIndex int32
---@param Material UMaterialInterface
function UMaterialSwapComponent:SetMaterial(Layer, Component, MaterialIndex, Material) end
---@param Layer EMaterialSwapLayer
---@param Material UMaterialInterface
function UMaterialSwapComponent:SetAllLayerMaterials(Layer, Material) end
---@param Component UMeshComponent
function UMaterialSwapComponent:ResetDefaultMaterials(Component) end
---@param Layer EMaterialSwapLayer
---@param Component UMeshComponent
---@param MaterialIndex int32
---@return UMaterialInterface
function UMaterialSwapComponent:PeekMaterial(Layer, Component, MaterialIndex) end
---@param Layer EMaterialSwapLayer
---@param Component UMeshComponent
---@param MaterialIndex int32
---@return UMaterialInterface
function UMaterialSwapComponent:GetMaterial(Layer, Component, MaterialIndex) end
---@param Layer EMaterialSwapLayer
---@param Component UMeshComponent
function UMaterialSwapComponent:ClearMaterials(Layer, Component) end
---@param Layer EMaterialSwapLayer
---@param Component UMeshComponent
---@param MaterialIndex int32
function UMaterialSwapComponent:ClearMaterial(Layer, Component, MaterialIndex) end
---@param Layer EMaterialSwapLayer
function UMaterialSwapComponent:ClearAllLayerMaterials(Layer) end


---@class UMemoryPipsPlacementWidget : UPipsWidget
---@field ShowThreshold float
---@field PipArray TArray<UImage>
---@field Pip0 UImage
---@field Pip1 UImage
---@field Pip2 UImage
---@field Pip3 UImage
---@field BG UImage
---@field WarningAnim UWidgetAnimation
UMemoryPipsPlacementWidget = {}

function UMemoryPipsPlacementWidget:HandleVisibilityNative() end


---@class UMetaBuildingDataLibrary : UBlueprintFunctionLibrary
UMetaBuildingDataLibrary = {}

---@param WorldContextObject UObject
---@param MetaBuilding FDataTableRowHandle
---@return int32
function UMetaBuildingDataLibrary:GetMetaBuildingUnlockedSubBuildingNum(WorldContextObject, MetaBuilding) end
---@param WorldContextObject UObject
---@param Data FMetaBuildingData
---@param Variants TArray<FDataTableRowHandle>
---@return FDataTableRowHandle
function UMetaBuildingDataLibrary:GetMetaBuildingUiSubBuilding(WorldContextObject, Data, Variants) end
---@param WorldContextObject UObject
---@param Identifier FMetaBuildingIdentifier
---@return int32
function UMetaBuildingDataLibrary:GetMetaBuildingSubBuildingIndex(WorldContextObject, Identifier) end
---@param WorldContextObject UObject
---@param MetaBuilding FDataTableRowHandle
---@return boolean
function UMetaBuildingDataLibrary:GetMetaBuildingHasMultipleUnlockedSubBuildings(WorldContextObject, MetaBuilding) end
---@param WorldContextObject UObject
---@param MetabuildingRow FDataTableRowHandle
---@return int32
function UMetaBuildingDataLibrary:GetMetaBuildingCurrentSubBuildingIndex(WorldContextObject, MetabuildingRow) end
---@param MetaBuildings TArray<FDataTableRowHandle>
---@param Needle FDataTableRowHandle
---@return int32
function UMetaBuildingDataLibrary:FindInMetaBuildings(MetaBuildings, Needle) end


---@class UMicrosoftSaveLoadManager : USaveLoadManager
UMicrosoftSaveLoadManager = {}


---@class UMovieSkipComponent : UActorComponent
---@field OnPlayerBeganSkipRequest FMovieSkipComponentOnPlayerBeganSkipRequest
---@field OnPlayerSkipRequestCompleted FMovieSkipComponentOnPlayerSkipRequestCompleted
---@field OnPlayerSkipRequestCanceled FMovieSkipComponentOnPlayerSkipRequestCanceled
---@field OnAllPlayersSkipped FMovieSkipComponentOnAllPlayersSkipped
---@field OnPlayerSkipStatusUpdate FMovieSkipComponentOnPlayerSkipStatusUpdate
---@field OnPlayersInMovieChanged FMovieSkipComponentOnPlayersInMovieChanged
---@field HoldToSkip boolean
---@field HoldToSkipTime float
---@field PlayersInMovie TArray<APlayerState>
UMovieSkipComponent = {}

---@param Player APlayerState
function UMovieSkipComponent:ServerSkipRequestCanceled(Player) end
---@param Player APlayerState
---@param bInMovie boolean
function UMovieSkipComponent:ServerSetPlayerInMovie(Player, bInMovie) end
---@param RequestingPlayerState ASurvivalPlayerState
function UMovieSkipComponent:ServerRequestSkipProgressState(RequestingPlayerState) end
function UMovieSkipComponent:ServerOnMovieStarted() end
function UMovieSkipComponent:ServerOnMovieFinished() end
---@param Player APlayerState
function UMovieSkipComponent:ServerBeginRequestSkip(Player) end
---@param Player APlayerState
function UMovieSkipComponent:RemoveSkippingPlayer(Player) end
function UMovieSkipComponent:OnRep_PlayersInMovie() end
---@param Player APlayerState
function UMovieSkipComponent:MulticastSkipRequestSucceeded(Player) end
---@param Player APlayerState
function UMovieSkipComponent:MulticastSkipRequestCanceled(Player) end
function UMovieSkipComponent:MulticastOnMovieStarted() end
function UMovieSkipComponent:MulticastOnMovieFinished() end
---@param Player APlayerState
function UMovieSkipComponent:MulticastBeginRequestSkip(Player) end
function UMovieSkipComponent:MulticastAllSkipped() end
---@param Player APlayerState
---@return boolean
function UMovieSkipComponent:IsPlayerRequestingSkip(Player) end
---@param Player APlayerState
---@return boolean
function UMovieSkipComponent:IsPlayerInMovie(Player) end
---@param Player APlayerState
---@return float
function UMovieSkipComponent:GetSkipProgress(Player) end
---@param Player APlayerState
---@return boolean
function UMovieSkipComponent:DidPlayerSuccessfullySkip(Player) end
---@param Players TArray<APlayerState>
---@param PercentCompletion TArray<float>
---@param IsRequestingSkip TArray<boolean>
function UMovieSkipComponent:ClientReceiveSkipProgressState(Players, PercentCompletion, IsRequestingSkip) end
---@param Player APlayerState
function UMovieSkipComponent:AddSkippingPlayer(Player) end


---@class UMusicManager : UObject
---@field CurrentTrack UMusicTrackData
---@field CurrentOverlayTrack UMusicTrackData
---@field ScriptedTrack UMusicTrackData
---@field DefaultMusicSettings UMusicSettings
---@field LevelMusicSettings UMusicSettings
---@field OverrideMusicSettings UMusicSettings
---@field MusicComponent UAudioComponent
---@field OverlayMusicComponent UAudioComponent
---@field IsMoviePlaying boolean
---@field bForcePlayScriptedTrack boolean
---@field bClearScriptedTrackOnEnd boolean
---@field TimelapseStartTime float
---@field MusicTrackTetherDuration float
---@field PendingDesiredMusicTrackChangeTime float
---@field CurrentTrackNoLongerDesiredTrackTime float
---@field PendingDesiredMusicTrack UMusicTrackData
UMusicManager = {}

---@param TrackData UMusicTrackData
---@param ForcePlayScriptedTrack boolean
---@param ClearOnEnd boolean
function UMusicManager:SetScriptedTrack(TrackData, ForcePlayScriptedTrack, ClearOnEnd) end
function UMusicManager:OnTrackFinished() end
function UMusicManager:OnLoadComplete() end
function UMusicManager:ClearScriptedTrack() end


---@class UMusicSettings : UDataAsset
---@field DefaultTrack UMusicTrackData
---@field ConditionalTracks TArray<FConditionalMusicTrack>
---@field NightTrack UMusicTrackData
---@field ConditionalNightTracks TArray<FConditionalMusicTrack>
---@field CombatTrack UMusicTrackData
---@field ConditionalCombatTracks TArray<FConditionalMusicTrack>
---@field bOverlayCombatMusic boolean
---@field bRandomizeConditionalTracks boolean
UMusicSettings = {}



---@class UMusicTrackData : UDataAsset
---@field Track TSoftObjectPtr<USoundBase>
---@field FadeInTime float
---@field FadeOutTime float
---@field FadeCurve EAudioFaderCurve
---@field ImmediateEndOnLoad boolean
---@field SeekTimes TArray<float>
---@field TransitionToDefaultTime float
---@field TransitionFromDefaultTime float
UMusicTrackData = {}



---@class UNavigationPathWithProgress : UNavigationPath
UNavigationPathWithProgress = {}


---@class UNewGamePlusSettings : UDataAsset
---@field EnemyHealthMultiplier float
---@field EnemyDamageMultiplier float
---@field DefensePointSpawnCountMultiplier float
---@field MaxDefensePointSpawnCountMultiplier float
---@field InfusionChance float
---@field AlwaysAppliedInfusionEffects TArray<FDataTableRowHandle>
---@field InfusionEffects TArray<FDataTableRowHandle>
---@field InfusionScienceReward int32
---@field InfusionLoot TArray<FLootData>
---@field InfusionVFX TSoftObjectPtr<UVisualEffect>
---@field NewGamePlusTechTrees TArray<FDataTableRowHandle>
UNewGamePlusSettings = {}



---@class UNewGameVisualsComponent : UActorComponent
---@field Variants TMap<UStaticMesh, FNewGameMaterialData>
---@field DefaultVariants TMap<UStaticMesh, FNewGameMaterialList>
UNewGameVisualsComponent = {}

---@param Level int32
function UNewGameVisualsComponent:OnNewGamePlusLevelChanged(Level) end


---@class UNotificationLogBase : UUserWidget
---@field TempNotifications TArray<UUINotificationBase>
UNotificationLogBase = {}



---@class UOCLComponent : UActorComponent
---@field OnLockedChanged FOCLComponentOnLockedChanged
---@field OnOpenStateChanged FOCLComponentOnOpenStateChanged
---@field OnUpdateVisualState FOCLComponentOnUpdateVisualState
---@field bStartLocked boolean
---@field bUnlockAlsoOpens boolean
---@field bConsumeKey boolean
---@field bIsLocked boolean
---@field bIsOpen boolean
---@field bAllowInteractToOpen boolean
---@field OverrideLockedText FLocString
---@field KeyItemData FDataTableRowHandle
---@field KeyRecipeData FDataTableRowHandle
---@field KeyCount int32
---@field bHideRecipeIfUnknown boolean
---@field CustomProperties UCustomPropertyComponent
UOCLComponent = {}

---@param InstigatedBy AActor
function UOCLComponent:Unlock(InstigatedBy) end
---@param InstigatedBy AActor
function UOCLComponent:ToggleOpen(InstigatedBy) end
---@param InstigatedBy AActor
function UOCLComponent:ToggleLock(InstigatedBy) end
---@param InstigatedBy AActor
---@param bInState boolean
function UOCLComponent:SetOpen(InstigatedBy, bInState) end
---@param InstigatedBy AActor
function UOCLComponent:Open(InstigatedBy) end
---@param bWasOpen boolean
function UOCLComponent:OnRep_IsOpen(bWasOpen) end
function UOCLComponent:OnRep_IsLocked() end
---@param PropertyName FName
---@param FloatValue float
---@param IntValue int32
---@param BoolValue boolean
---@param PropertiesWidget UCustomPropertiesWindowWidget
function UOCLComponent:OnCustomPropertyChanged(PropertyName, FloatValue, IntValue, BoolValue, PropertiesWidget) end
---@param bOpen boolean
---@param InstigatedBy AActor
function UOCLComponent:MulticastNotifyOpenStateChanged(bOpen, InstigatedBy) end
---@param InstigatedBy AActor
function UOCLComponent:Lock(InstigatedBy) end
---@return boolean
function UOCLComponent:IsOpen() end
---@return boolean
function UOCLComponent:IsLocked() end
---@param InstigatedBy AActor
---@return boolean
function UOCLComponent:HasKeyToUnlock(InstigatedBy) end
---@param InstigatedBy AActor
function UOCLComponent:Close(InstigatedBy) end


---@class UObjective : UBaseObjective
---@field QuestDataRowHandle FDataTableRowHandle_NetCrc
---@field ObjectiveIndex int32
---@field bActive boolean
---@field bCompleted boolean
UObjective = {}

function UObjective:OnRep_ObjectiveChanged() end
---@return boolean
function UObjective:NeverHideStickyObjective() end
---@return boolean
function UObjective:IsValidForGameType() end
---@return boolean
function UObjective:IsValidForGamePackage() end
---@return boolean
function UObjective:IsTutorialObjective() end
---@return boolean
function UObjective:IsCritPathObjective() end
---@return FDataTableRowHandle
function UObjective:GetQuestDataRowHandle() end
---@param InputType EGameInputType
---@return FName
function UObjective:GetObjectiveControl(InputType) end


---@class UObjectiveInterfaceWidget : UGameUserWidget
---@field BigPin UImage
---@field SelectedQuest TWeakObjectPtr<UBaseQuest>
---@field QuestManager TWeakObjectPtr<UQuestManagerComponent>
---@field PlayerState TWeakObjectPtr<ASurvivalPlayerState>
UObjectiveInterfaceWidget = {}



---@class UObjectiveNotificationWidget : UGameUserWidget
---@field bIsPlayingNotification boolean
---@field QueuedQuestStartUpdates TArray<UBaseQuest>
---@field QueuedQuestCompleteUpdates TArray<UBaseQuest>
---@field QueuedObjectiveCompleteUpdates TArray<UBaseQuest>
---@field QueuedObjectiveUpdatedUpdates TArray<UBaseQuest>
UObjectiveNotificationWidget = {}

function UObjectiveNotificationWidget:ProcessQueuedQuestNotification() end


---@class UOnOffToggleWidget : UGameUserWidget
---@field Label UTextBlock
---@field ToggleBtn UCheckBox
UOnOffToggleWidget = {}

---@param bIsToggled boolean
function UOnOffToggleWidget:OnToggleStateChanged(bIsToggled) end


---@class UOnyxFunctionLibrary : UBlueprintFunctionLibrary
UOnyxFunctionLibrary = {}

---@param A FIntVector
---@param B FIntVector
---@return FIntVector
function UOnyxFunctionLibrary:SubtractIntVectors(A, B) end
---@param Current FRotator
---@param Target FRotator
---@param DeltaTime float
---@param Alpha float
---@param MaxSpeed float
---@return FRotator
function UOnyxFunctionLibrary:RInterpCappedTo(Current, Target, DeltaTime, Alpha, MaxSpeed) end
---@param Range FFloatRange
---@param Value float
---@return boolean
function UOnyxFunctionLibrary:RangeContains(Range, Value) end
---@param Array TArray<FDataTableRowHandle>
---@return FDataTableRowHandle
function UOnyxFunctionLibrary:RandomElementRowHandle(Array) end
---@param Array TArray<FLocString>
---@return FLocString
function UOnyxFunctionLibrary:RandomElementLocString(Array) end
---@param Array TArray<int32>
---@return int32
function UOnyxFunctionLibrary:RandomElementInt(Array) end
---@param Array TArray<float>
---@return float
function UOnyxFunctionLibrary:RandomElementFloat(Array) end
---@param Dimensions FIntVector
---@return FText
function UOnyxFunctionLibrary:MakeDimensionString(Dimensions) end
---@param Key FKey
---@return int32
function UOnyxFunctionLibrary:KeyToNumberZeroBased(Key) end
---@param Key FKey
---@return int32
function UOnyxFunctionLibrary:KeyToNumberOneBased(Key) end
---@param Mapping FInputActionKeyMapping
---@return FInputChord
function UOnyxFunctionLibrary:KeyMappingToChord(Mapping) end
---@param A FString
---@param B FString
---@param Separator FString
---@return FString
function UOnyxFunctionLibrary:JoinStringsRemoveEmpty(A, B, Separator) end
---@param Str FText
---@return FText
function UOnyxFunctionLibrary:IsolateDirectionText(Str) end
---@param Str FString
---@return FString
function UOnyxFunctionLibrary:IsolateDirectionString(Str) end
---@param Reply FEventReply
---@return boolean
function UOnyxFunctionLibrary:IsHandled(Reply) end
---@param Key FKey
---@return boolean
function UOnyxFunctionLibrary:IsAxisPressKey(Key) end
---@param Actor AActor
---@return boolean
function UOnyxFunctionLibrary:IsActorInGameWorld(Actor) end
---@param Object UObject
---@return AActor
function UOnyxFunctionLibrary:GetSelfOrOuterActor(Object) end
---@param Event FPointerEvent
---@return FInputChord
function UOnyxFunctionLibrary:GetPointerEventChord(Event) end
---@param Actor AActor
---@param SocketName FName
---@param TransformSpace ERelativeTransformSpace
---@return FTransform
function UOnyxFunctionLibrary:GetMeshSocketTransform(Actor, SocketName, TransformSpace) end
---@param Event FKeyEvent
---@return FInputChord
function UOnyxFunctionLibrary:GetKeyEventChord(Event) end
---@param Tag FGameplayTag
---@param bIncludeSelf boolean
---@return FGameplayTagContainer
function UOnyxFunctionLibrary:GetGameplayTagChildren(Tag, bIncludeSelf) end
---@param Actor AActor
---@param ComponentClass TSubclassOf<UActorComponent>
---@return UActorComponent
function UOnyxFunctionLibrary:GetComponentByClassSafe(Actor, ComponentClass) end
---@param Source TArray<FGameplayTag>
---@param Target TArray<FGameplayTag>
---@return TArray<FGameplayTag>
function UOnyxFunctionLibrary:GameplayTagArrayMatchOrder(Source, Target) end
---@param Value int32
---@param MaxCharacters int32
---@return FText
function UOnyxFunctionLibrary:FormatIntToFit(Value, MaxCharacters) end
---@param A1 float
---@param A2 float
---@return float
function UOnyxFunctionLibrary:FindDeltaAngleRadians(A1, A2) end
---@param A1 float
---@param A2 float
---@return float
function UOnyxFunctionLibrary:FindDeltaAngleDegrees(A1, A2) end
---@param A UClass
---@param B UClass
---@return UClass
function UOnyxFunctionLibrary:CoalesceClass(A, B) end
---@param A FIntVector
---@param B FIntVector
---@return FIntVector
function UOnyxFunctionLibrary:AddIntVectors(A, B) end


---@class UOptionsDropdownBaseAsset : UBaseOptionsDropdownAsset
---@field DisplayStrings TArray<FLocString>
UOptionsDropdownBaseAsset = {}



---@class UOptionsDropdownLanguageAsset : UBaseOptionsDropdownAsset
---@field Languages TArray<FOptionsDisplayLanguage>
UOptionsDropdownLanguageAsset = {}



---@class UOptionsDropdownSpeechVoiceAsset : UBaseOptionsDropdownAsset
UOptionsDropdownSpeechVoiceAsset = {}


---@class UOptionsKeybindingsPopulator : UBaseSettingsWidget
---@field ControlListBox UVerticalBox
---@field ChildClass TSubclassOf<ULabeledKeybinding>
---@field Category EBindableControlCategory
---@field bGamepadControls boolean
UOptionsKeybindingsPopulator = {}



---@class UOptionsMenuWidget : UWindowWidget
---@field OptionTabs UWidgetSwitcher
---@field ScrollBoxSettings UScrollBox
---@field DisplayList UVerticalBox
---@field KeyboardList UVerticalBox
---@field ControllerList UVerticalBox
---@field SoundList UVerticalBox
---@field HDRList UVerticalBox
---@field AccessibilityList UVerticalBox
---@field GameList UVerticalBox
---@field SettingsTitle ULocalizedTextBlock
---@field KeybindControlsParent UWidget
---@field ArachnophobiaPreview UWidget
---@field SettingsDesc ULocalizedTextBlock
---@field ApplyButton UBottomButtonWidget
---@field RevertButton UBottomButtonWidget
---@field CloseButton UBottomButtonWidget
---@field DefaultsButton UBottomButtonWidget
---@field AutosaveIntervalSlider ULabledSliderWidget
---@field AutosavesNumberSlider ULabledSliderWidget
---@field ShowTutorialToggle ULabeledToggle
---@field ShowSurvivalQuestsToggle ULabeledToggle
---@field ShowHotbarToggle ULabeledToggle
---@field InteractHighlightLevelDD ULabeledDropdownWidget
---@field ExtraWideInteractToggle ULabeledToggle
---@field LanguageDD ULabeledDropdownWidget
---@field SpokenLanguageDD ULabeledDropdownWidget
---@field ShowPlayerDistanceToggle ULabeledToggle
---@field CrossPlayToggle ULabeledToggle
---@field ShowDownloadCodeToggle ULabeledToggle
---@field WindowModeDD ULabeledDropdownWidget
---@field ResolutionDD ULabeledDropdownWidget
---@field QualitySettingsDD ULabeledDropdownWidget
---@field FSRQualityDD ULabeledDropdownWidget
---@field FramerateLimitDD ULabeledDropdownWidget
---@field DOFDropdown ULabeledDropdownWidget
---@field VSyncToggle ULabeledToggle
---@field GammaSlider ULabledSliderWidget
---@field MotionBlurSlider ULabledSliderWidget
---@field ChromaticAberrationToggle ULabeledToggle
---@field FOVSlider ULabledSliderWidget
---@field ResolutionSlider ULabledSliderWidget
---@field HDRMaxBrightnessSlider ULabledSliderWidget
---@field HDRContrastSlider ULabledSliderWidget
---@field HDRUIBrightnessSlider ULabledSliderWidget
---@field HDRUIContrastSlider ULabledSliderWidget
---@field InvertXToggle ULabeledToggle
---@field InvertYToggle ULabeledToggle
---@field CrouchToggle ULabeledToggle
---@field SprintToggle ULabeledToggle
---@field MouseSprintModeDD ULabeledDropdownWidget
---@field KeyboardLevelViewOnSprintToggle ULabeledToggle
---@field ControllerLevelViewOnSprintToggle ULabeledToggle
---@field MouseSensXSlider ULabledSliderWidget
---@field MouseSensYSlider ULabledSliderWidget
---@field ControllerInvertLookXToggle ULabeledToggle
---@field ControllerInvertLookYToggle ULabeledToggle
---@field ControllerInvertMoveXToggle ULabeledToggle
---@field ControllerInvertMoveYToggle ULabeledToggle
---@field GamepadCrouchToggle ULabeledToggle
---@field GamepadSprintToggle ULabeledToggle
---@field GamepadSprintModeDD ULabeledDropdownWidget
---@field RumbleToggle ULabeledToggle
---@field MotionControlsToggle ULabeledToggle
---@field AdaptiveTriggersToggle ULabeledToggle
---@field GamepadSensXSlider ULabledSliderWidget
---@field GamepadSensYSlider ULabledSliderWidget
---@field LeftJoystickInnerDeadZone ULabledSliderWidget
---@field LeftJoystickOuterDeadZone ULabledSliderWidget
---@field RightJoystickInnerDeadZone ULabledSliderWidget
---@field RightJoystickOuterDeadZone ULabledSliderWidget
---@field DefaultKeyboardBindings UOptionsKeybindingsPopulator
---@field HotPouchKeyboardBindings UOptionsKeybindingsPopulator
---@field ConstructionKeyboardBindings UOptionsKeybindingsPopulator
---@field BuildModeKeyboardBindings UOptionsKeybindingsPopulator
---@field InventorModeKeyboardBindings UOptionsKeybindingsPopulator
---@field UIKeyboardBindings UOptionsKeybindingsPopulator
---@field PhotoModeKeyboardBindings UOptionsKeybindingsPopulator
---@field DefaultControllerBindings UOptionsKeybindingsPopulator
---@field HotPouchControllerBindings UOptionsKeybindingsPopulator
---@field ConstructionControllerBindings UOptionsKeybindingsPopulator
---@field BuildModeControllerBindings UOptionsKeybindingsPopulator
---@field InventorModeControllerBindings UOptionsKeybindingsPopulator
---@field UIControllerBindings UOptionsKeybindingsPopulator
---@field PhotoModeControllerBindings UOptionsKeybindingsPopulator
---@field MasterSoundSlider ULabledSliderWidget
---@field EffectsSoundSlider ULabledSliderWidget
---@field AmbienceSoundSlider ULabledSliderWidget
---@field MusicSoundSlider ULabledSliderWidget
---@field UISoundSlider ULabledSliderWidget
---@field NarrationSoundSlider ULabledSliderWidget
---@field CinematicsSoundSlider ULabledSliderWidget
---@field VoiceSoundSlider ULabledSliderWidget
---@field VoiceChatSoundSlider ULabledSliderWidget
---@field VoiceChatActivationDropdown ULabeledDropdownWidget
---@field VoiceChatActivationAsset UBaseOptionsDropdownAsset
---@field ColorBlindDD ULabeledDropdownWidget
---@field SubtitleDD ULabeledDropdownWidget
---@field SubtitleSizeDD ULabeledDropdownWidget
---@field ReadToMeToggle ULabeledToggle
---@field ReadToMeVoiceDD ULabeledDropdownWidget
---@field ReadToMeSpeedSlider ULabledSliderWidget
---@field LargeTextToggle ULabeledToggle
---@field LargeHUDToggle ULabeledToggle
---@field ChatTextToSpeechToggle ULabeledToggle
---@field ChatSpeechToTextToggle ULabeledToggle
---@field ArachnophobiaSlider ULabledSliderWidget
---@field ChatBackgroundToggle ULabeledToggle
---@field SubtitleBackgroundToggle ULabeledToggle
---@field WindowModeAsset UBaseOptionsDropdownAsset
---@field FramerateLimitAsset UBaseOptionsDropdownAsset
---@field DOFAsset UBaseOptionsDropdownAsset
---@field SprintModeAsset UBaseOptionsDropdownAsset
---@field QualitySettingsAsset UBaseOptionsDropdownAsset
---@field FSRSettingsAsset UBaseOptionsDropdownAsset
---@field ColorBlindSettingsAsset UBaseOptionsDropdownAsset
---@field SubtitleAsset UBaseOptionsDropdownAsset
---@field SubtitleSizeAsset UBaseOptionsDropdownAsset
---@field ReticleOpacitySlider ULabledSliderWidget
---@field ReticleSizeSlider ULabledSliderWidget
---@field InteractHighlightLevelAsset UBaseOptionsDropdownAsset
---@field LanguageSettingAsset UBaseOptionsDropdownAsset
---@field SpokenLanguageSettingAsset UBaseOptionsDropdownAsset
---@field ReadToMeVoiceOptions UOptionsDropdownSpeechVoiceAsset
---@field OptionsLists TArray<UVerticalBox>
UOptionsMenuWidget = {}

function UOptionsMenuWidget:SetAllToDefaults() end
function UOptionsMenuWidget:RevertPageSettings() end
function UOptionsMenuWidget:RevertCachedAndUnconfirmedSettings() end
---@param Value TArray<FAnyControlMapping>
function UOptionsMenuWidget:RemoveControlMappings(Value) end
---@param Value TArray<FInputAxisKeyMapping>
function UOptionsMenuWidget:RemoveAxisMappings(Value) end
---@param Value TArray<FInputActionKeyMapping>
function UOptionsMenuWidget:RemoveActionMappings(Value) end
---@return boolean
function UOptionsMenuWidget:PageHasUnsavedChanges() end
function UOptionsMenuWidget:OnPrevTab() end
function UOptionsMenuWidget:OnNextTab() end
---@param SelectedItem FString
---@param SelectionType ESelectInfo::Type
function UOptionsMenuWidget:OnFSRQualitySelectionChanged(SelectedItem, SelectionType) end
---@param Index int32
function UOptionsMenuWidget:OnCategoryChanged(Index) end
---@param Index int32
function UOptionsMenuWidget:OnCategoryButtonPressed(Index) end
function UOptionsMenuWidget:NativeClampQualitySelectionToSafeValue() end
---@return boolean
function UOptionsMenuWidget:HasAnyUnsavedChanges() end
function UOptionsMenuWidget:HandleUnsafeQualitySelection() end
---@param Mapping FAnyControlMapping
---@param IsGamepadControl boolean
---@return TArray<FAnyControlMapping>
function UOptionsMenuWidget:FindConflicts(Mapping, IsGamepadControl) end
function UOptionsMenuWidget:ApplyPageSettings() end
function UOptionsMenuWidget:ApplyAllSettings() end


---@class UOverTimeEffect : UObject
---@field bIsEnabled boolean
---@field MinimumValue float
---@field MaximumValue float
---@field DamageType TSubclassOf<USurvivalDamageType>
---@field Rate float
---@field TickInterval float
---@field Duration float
---@field ElapsedTime float
---@field TickTimer float
UOverTimeEffect = {}

---@return float
function UOverTimeEffect:GetTimeRemaining() end
---@return boolean
function UOverTimeEffect:GetIsExpired() end


---@class UParticleSystemSpawnComponent : USceneComponent
---@field Particles TArray<UVisualEffect>
UParticleSystemSpawnComponent = {}

function UParticleSystemSpawnComponent:SpawnParticleSystem() end


---@class UPartyBarrierComponent : UActorComponent
---@field OnPlayerArrivedAtBarrier FPartyBarrierComponentOnPlayerArrivedAtBarrier
---@field OnAllPlayersArrivedAtBarrier FPartyBarrierComponentOnAllPlayersArrivedAtBarrier
---@field OnBarrierTimeout FPartyBarrierComponentOnBarrierTimeout
---@field PartyBarrierTypes TMap<FName, TSubclassOf<UPartyBarrierObject>>
UPartyBarrierComponent = {}

---@param BarrierName FName
---@param Player APlayerState
function UPartyBarrierComponent:ServerPlayerArrivedAtBarrier(BarrierName, Player) end
---@param Player APlayerState
---@param BarrierName FName
---@param ShouldExecuteBarrier boolean
function UPartyBarrierComponent:MulticastOnPlayerArrivedAtBarrier(Player, BarrierName, ShouldExecuteBarrier) end
---@param BarrierName FName
---@param ShouldExecuteBarrier boolean
function UPartyBarrierComponent:MulticastOnBarrierTimeout(BarrierName, ShouldExecuteBarrier) end
---@param BarrierName FName
---@param ShouldExecuteBarrier boolean
function UPartyBarrierComponent:MulticastOnAllPlayersArrivedAtBarrier(BarrierName, ShouldExecuteBarrier) end


---@class UPartyBarrierObject : UObject
UPartyBarrierObject = {}

---@param WorldContext UObject
---@return boolean
function UPartyBarrierObject:ShouldExecuteBarrier(WorldContext) end


---@class UPartyBarrierObjectIntroMovie : UPartyBarrierObject
---@field IntroMoviePlayedConditional FGlobalVariableReferenceConditional
UPartyBarrierObjectIntroMovie = {}



---@class UPartyBarrierObjectNewGamePlusTriggerCutscene : UPartyBarrierObject
UPartyBarrierObjectNewGamePlusTriggerCutscene = {}


---@class UPartyComponent : UActorComponent
---@field OnPartyMemberAdded FPartyComponentOnPartyMemberAdded
---@field OnPlayerStateAssigned FPartyComponentOnPlayerStateAssigned
---@field OnGameRest FPartyComponentOnGameRest
---@field OnGameRestMulticast FPartyComponentOnGameRestMulticast
---@field OnPartyRestStatusChanged FPartyComponentOnPartyRestStatusChanged
---@field OnKeyItemObtainedDelegate FPartyComponentOnKeyItemObtainedDelegate
---@field OnBestiaryItemObtainedDelegate FPartyComponentOnBestiaryItemObtainedDelegate
---@field OnNewResourceKnownDelegate FPartyComponentOnNewResourceKnownDelegate
---@field OnResourceResearchedDelegate FPartyComponentOnResourceResearchedDelegate
---@field OnUpgradePointsAquiredDelegate FPartyComponentOnUpgradePointsAquiredDelegate
---@field OnPartyUpgradePointsSpent FPartyComponentOnPartyUpgradePointsSpent
---@field OnNewRecipeKnownDelegate FPartyComponentOnNewRecipeKnownDelegate
---@field OnNewRecipesKnownDelegate FPartyComponentOnNewRecipesKnownDelegate
---@field OnNewSignSetKnownDelegate FPartyComponentOnNewSignSetKnownDelegate
---@field OnTechTreeUnlockedDelegate FPartyComponentOnTechTreeUnlockedDelegate
---@field OnTechChipRedeemed FPartyComponentOnTechChipRedeemed
---@field OnTechUnlockDataUnlockedDelegate FPartyComponentOnTechUnlockDataUnlockedDelegate
---@field OnTechTreeNodeSpendDelegate FPartyComponentOnTechTreeNodeSpendDelegate
---@field OnPointOfInterestDiscovered FPartyComponentOnPointOfInterestDiscovered
---@field OnColorThemeDiscovered FPartyComponentOnColorThemeDiscovered
---@field OnRecipeChangedDelegate FPartyComponentOnRecipeChangedDelegate
---@field OnItemKnowledgeChangedDelegate FPartyComponentOnItemKnowledgeChangedDelegate
---@field OnItemStacksChanged FPartyComponentOnItemStacksChanged
---@field OnItemStackUpgradeChanged FPartyComponentOnItemStackUpgradeChanged
---@field OnScienceFoundChangedDelegate FPartyComponentOnScienceFoundChangedDelegate
---@field OnScienceAddedNotification FPartyComponentOnScienceAddedNotification
---@field OnResearchPointsChangedDelegate FPartyComponentOnResearchPointsChangedDelegate
---@field OnRecipeCrafted FPartyComponentOnRecipeCrafted
---@field OnItemCrafted FPartyComponentOnItemCrafted
---@field OnItemDuplicated FPartyComponentOnItemDuplicated
---@field OnItemEnhanced FPartyComponentOnItemEnhanced
---@field OnItemProcessed FPartyComponentOnItemProcessed
---@field OnBuildingBuilt FPartyComponentOnBuildingBuilt
---@field OnItemRepaired FPartyComponentOnItemRepaired
---@field OnCozinessLevelAchieved FPartyComponentOnCozinessLevelAchieved
---@field OnPartyMemberDeath FPartyComponentOnPartyMemberDeath
---@field OnCreatureKilled FPartyComponentOnCreatureKilled
---@field ReputationEvents TMap<FGameplayTag, FFactionReputationEvents>
---@field OnReputationEvent FPartyComponentOnReputationEvent
---@field ReputationNotificationAudioRowHandle FDataTableRowHandle
---@field OnReputationDisabled FPartyComponentOnReputationDisabled
---@field OnPlayerIdentitiesChangedDelegate FPartyComponentOnPlayerIdentitiesChangedDelegate
---@field bUseAlternateRecipeMode boolean
---@field DefaultRestDuration int32
---@field MinimumDayToAccrueReputation int32
---@field MaxSpeakingRange float
---@field bAddCraftingIngredientsAsKnownResources boolean
---@field PartyMembers TArray<ASurvivalPlayerCharacter>
---@field RestingPartyMembers TArray<ASurvivalPlayerCharacter>
---@field Builders TArray<ABuilderPawn>
---@field Turrets TArray<ATurretPawn>
---@field RestCustscene UCutsceneDataAsset
---@field TimelapseRestCustscene UCutsceneDataAsset
---@field RestCutscenes TArray<URestCutsceneDataAsset>
---@field RestMovies TArray<URestMovieDataAsset>
---@field LastRestTime float
---@field RestCooldown uint32
---@field ResetCreatureLocationChanceOnRest float
---@field MaxRequiredDistanceFromPartyToResetCreatureLocation float
---@field ActiveRestSequencePlayer ULevelSequencePlayer
---@field ScienceFound int32
---@field ResearchPoints int32
---@field PartyUpgradePoints int32
---@field PersonalUpgradePoints int32
---@field OwnedKeyItems TArray<FDataTableRowHandle_NetCrc>
---@field KnownCraftingRecipes TArray<FRecipeKnowledge>
---@field KnownBuildingRecipes TArray<FRecipeKnowledge>
---@field AllItemKnowledge TArray<FItemKnowledge>
---@field TechUnlockDatas TArray<FTechUnlockData>
---@field UnlockedTechTrees TArray<FDataTableRowHandle_NetCrc>
---@field DiscoveredPointsOfInterest TArray<UPointOfInterestDataAsset>
---@field DiscoveredColorThemes TArray<TSubclassOf<UGlobalColorTheme>>
---@field UnlockedSignSetData TArray<FDataTableRowHandle_NetCrc>
---@field PartyStatusEffects TArray<FDataTableRowHandle>
---@field DefaultTechTrees TArray<FDataTableRowHandle>
---@field MonthlyExclusiveTechTrees TMap<int32, FDataTableRowHandle>
---@field GlobalUnlocks TArray<FGlobalConditionalUnlock>
---@field UnlockedTransmitterTypes TArray<FGameplayTag>
---@field UnlockedDuplicationTier int32
---@field LoadedInPlayers TArray<FUniqueNetIdRepl>
---@field PlayerIdentities TArray<FUniqueNetIdRepl>
---@field RandomPlayerIdentities TArray<FUniqueNetIdRepl>
---@field ItemStackUpgrades TArray<FItemStackUpgrade>
---@field PartyPets TArray<UBaseLODActor>
UPartyComponent = {}

---@param PreviousAmount int32
function UPartyComponent:UpdateResearchPointData(PreviousAmount) end
---@param RestMovieIndex int32
function UPartyComponent:StartPostRestConversation(RestMovieIndex) end
---@param TechTreeRecipeRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:ShouldShowTechTreeRecipeAvailableForGameMode(TechTreeRecipeRowHandle) end
---@param PlayerState APlayerState
---@param PlayerIdentity EPlayerCharacterIdentity
function UPartyComponent:SetPlayerIdentityViaPlayerState(PlayerState, PlayerIdentity) end
---@param Hidden boolean
function UPartyComponent:SetAllPartyHiddenInGame(Hidden) end
---@param TutorialRowHandle FDataTableRowHandle_NetCrc
function UPartyComponent:ServerViewTutorial(TutorialRowHandle) end
---@param Item FDataTableRowHandle_NetCrc
---@param Instigator ASurvivalPlayerController
function UPartyComponent:ServerUseTechTreeKeyItem(Item, Instigator) end
---@param TechTreeRowHandle FDataTableRowHandle_NetCrc
---@param Instigator ASurvivalPlayerController
function UPartyComponent:ServerUnlockTechTree(TechTreeRowHandle, Instigator) end
---@param ItemStackTag FGameplayTag
---@param AquirerPlayerState ASurvivalPlayerState
---@param bIgnoreCost boolean
function UPartyComponent:ServerUnlockItemStackUpgradeTier(ItemStackTag, AquirerPlayerState, bIgnoreCost) end
---@param TechTreeRecipeRowHandle FDataTableRowHandle_NetCrc
---@param Points int32
---@param Instigator ASurvivalPlayerController
---@param bIgnoreCost boolean
function UPartyComponent:ServerSpendPointsOnTechTreeUnlock(TechTreeRecipeRowHandle, Points, Instigator, bIgnoreCost) end
---@param TutorialRowHandle FDataTableRowHandle_NetCrc
function UPartyComponent:ServerSetTutorialComplete(TutorialRowHandle) end
---@param Item FDataTableRowHandle_NetCrc
function UPartyComponent:ServerSetLastSuperChipReturned(Item) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
function UPartyComponent:ServerRemoveKeyItem(ItemRowHandle) end
---@param TechTreeRecipeRowHandle FDataTableRowHandle_NetCrc
---@param Instigator ASurvivalPlayerController
---@param bIgnoreCost boolean
function UPartyComponent:ServerPurchaseRecipe(TechTreeRecipeRowHandle, Instigator, bIgnoreCost) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param Acquirer ASurvivalPlayerCharacter
---@param bHideNotification boolean
function UPartyComponent:ServerCreateAndAddKeyItem(ItemRowHandle, Acquirer, bHideNotification) end
---@param ScienceAmount int32
function UPartyComponent:ServerAddScienceFound(ScienceAmount) end
---@param Item UItem
---@param Acquirer ASurvivalPlayerCharacter
---@param bHideNotification boolean
function UPartyComponent:ServerAddKeyItem(Item, Acquirer, bHideNotification) end
function UPartyComponent:RestParty() end
function UPartyComponent:ResetPlayerIdentities() end
---@param ScienceAmount int32
function UPartyComponent:RemoveScience(ScienceAmount) end
---@param Sender UInventoryComponent
---@param RecipeRow FDataTableRowHandle
---@param ItemsAdded FAddItemResult
function UPartyComponent:RecipeCraftedCallback(Sender, RecipeRow, ItemsAdded) end
function UPartyComponent:PlayRestMovie() end
function UPartyComponent:OnRep_TechUnlockDatas() end
---@param PreviousScienceFound int32
function UPartyComponent:OnRep_ScienceFound(PreviousScienceFound) end
function UPartyComponent:OnRep_RestingPartyMembers() end
---@param PreviousAmount int32
function UPartyComponent:OnRep_ResearchPointsAdded(PreviousAmount) end
function UPartyComponent:OnRep_OwnedKeyItems() end
function UPartyComponent:OnRep_KnownRecipesChanged() end
function UPartyComponent:OnRep_ItemStackUpgrades() end
function UPartyComponent:OnRep_ItemKnowledge() end
function UPartyComponent:OnRep_AssignedPlayerIdentities() end
---@param OldMode EEditMode
---@param NewMode EEditMode
function UPartyComponent:OnEditModeChanged(OldMode, NewMode) end
---@param DamageInfo FDamageInfo
function UPartyComponent:OnDeathCallback(DamageInfo) end
---@param Creature ASurvivalCharacter
---@param Killer ASurvivalPlayerState
function UPartyComponent:NotifyCreatureKillCredit(Creature, Killer) end
---@param BestiaryItem FDataTableRowHandle
function UPartyComponent:NotifyBestiaryUpdate(BestiaryItem) end
---@param IsPartyUpgradePoints boolean
---@param Amount int32
---@param AquirerPlayerState ASurvivalPlayerState
function UPartyComponent:MulticastUpgradePointsAdded(IsPartyUpgradePoints, Amount, AquirerPlayerState) end
---@param TechUnlockDataRowHandle FDataTableRowHandle_NetCrc
---@param UnlockerPlayerState ASurvivalPlayerState
function UPartyComponent:MulticastTechUnlockDataUnlocked(TechUnlockDataRowHandle, UnlockerPlayerState) end
---@param TechTreeRowHandle FDataTableRowHandle_NetCrc
---@param UnlockerPlayerState ASurvivalPlayerState
function UPartyComponent:MulticastTechTreeUnlocked(TechTreeRowHandle, UnlockerPlayerState) end
---@param ScienceAdded int32
---@param TotalScience int32
function UPartyComponent:MulticastShowScienceNotification(ScienceAdded, TotalScience) end
---@param RestMovieIndex int32
function UPartyComponent:MulticastSetRestMovie(RestMovieIndex) end
---@param ColorTheme UPointOfInterestDataAsset
---@param UnlockerPlayerState ASurvivalPlayerState
function UPartyComponent:MulticastPointOfInterestDiscovered(ColorTheme, UnlockerPlayerState) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param AcquirerPlayerState ASurvivalPlayerState
---@param RecipesLearned TArray<FDataTableRowHandle_NetCrc>
function UPartyComponent:MulticastNotifyResourceResearched(ItemRowHandle, AcquirerPlayerState, RecipesLearned) end
---@param FactionTag FGameplayTag
---@param ReputationNotificationData FReputationNotificationData
function UPartyComponent:MulticastNotifyReputationThresholdPassed(FactionTag, ReputationNotificationData) end
---@param FactionTag FGameplayTag
function UPartyComponent:MulticastNotifyReputationDisabled(FactionTag) end
---@param SignSetRowHandle FDataTableRowHandle_NetCrc
---@param AcquirerPlayerState ASurvivalPlayerState
---@param RecipeUnlockSource ERecipeUnlockSource
---@param DisplayName FLocString
function UPartyComponent:MulticastNotifyNewSignSetKnown(SignSetRowHandle, AcquirerPlayerState, RecipeUnlockSource, DisplayName) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param AcquirerPlayerState ASurvivalPlayerState
---@param RecipesLearned TArray<FDataTableRowHandle_NetCrc>
function UPartyComponent:MulticastNotifyNewResourceKnown(ItemRowHandle, AcquirerPlayerState, RecipesLearned) end
---@param RecipeRowHandles TArray<FDataTableRowHandle_NetCrc>
---@param AcquirerPlayerState ASurvivalPlayerState
---@param CozinessLevel int32
function UPartyComponent:MulticastNotifyNewRecipesKnownCoziness(RecipeRowHandles, AcquirerPlayerState, CozinessLevel) end
---@param RecipeRowHandles TArray<FDataTableRowHandle_NetCrc>
---@param AcquirerPlayerState ASurvivalPlayerState
---@param RecipeUnlockSource ERecipeUnlockSource
---@param DisplayName FLocString
function UPartyComponent:MulticastNotifyNewRecipesKnown(RecipeRowHandles, AcquirerPlayerState, RecipeUnlockSource, DisplayName) end
---@param RecipeRowHandle FDataTableRowHandle_NetCrc
---@param AcquirerPlayerState ASurvivalPlayerState
function UPartyComponent:MulticastNotifyNewRecipeKnown(RecipeRowHandle, AcquirerPlayerState) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param AcquirerPlayerState ASurvivalPlayerState
---@param RecipesLearned TArray<FDataTableRowHandle_NetCrc>
function UPartyComponent:MulticastNotifyKeyItemCollected(ItemRowHandle, AcquirerPlayerState, RecipesLearned) end
---@param ItemRowHandle FDataTableRowHandle_NetCrc
---@param AcquirerPlayerState ASurvivalPlayerState
function UPartyComponent:MulticastNotifyBestiaryItemCollected(ItemRowHandle, AcquirerPlayerState) end
---@param ItemStackTag FGameplayTag
---@param AquirerPlayerState ASurvivalPlayerState
function UPartyComponent:MulticastItemStackUpgradeChanged(ItemStackTag, AquirerPlayerState) end
---@param PointOfInterest TSubclassOf<UGlobalColorTheme>
---@param UnlockerPlayerState ASurvivalPlayerState
function UPartyComponent:MulticastColorThemeDiscovered(PointOfInterest, UnlockerPlayerState) end
---@param RestDuration float
function UPartyComponent:MulticastBroadcastOnGameRest(RestDuration) end
---@param ItemName FName
---@return boolean
function UPartyComponent:KnowsResourceName(ItemName) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:KnowsResource(ItemRowHandle) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:KnowsRecipeForIngredient(ItemRowHandle) end
---@param RecipeRowHandle FDataTableRowHandle
---@param bIncludeHidden boolean
---@return boolean
function UPartyComponent:KnowsRecipe(RecipeRowHandle, bIncludeHidden) end
---@param RecipeRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:KnowsOtherRecipeThatContainsIngredientRecipe(RecipeRowHandle) end
---@param IngredientRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:KnowsOtherRecipeThatContainsIngredient(IngredientRowHandle) end
---@param IngredientRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:KnowsOfRecipeIngredient(IngredientRowHandle) end
---@param Category FGameplayTag
---@return boolean
function UPartyComponent:KnowsCraftingRecipeInCategory(Category) end
---@param IngredientRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:KnowsCraftingRecipeForIngredient(IngredientRowHandle) end
---@param RecipeRowHandle FDataTableRowHandle
---@param bIncludeHidden boolean
---@return boolean
function UPartyComponent:KnowsCraftingRecipe(RecipeRowHandle, bIncludeHidden) end
---@param Category FGameplayTag
---@return boolean
function UPartyComponent:KnowsBuildingRecipeInCategory(Category) end
---@param IngredientRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:KnowsBuildingRecipeForIngredient(IngredientRowHandle) end
---@param RecipeRowHandle FDataTableRowHandle
---@param bIncludeHidden boolean
---@return boolean
function UPartyComponent:KnowsBuildingRecipe(RecipeRowHandle, bIncludeHidden) end
---@param TechTreeRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:IsTechTreeUnlocked(TechTreeRowHandle) end
---@param TechTreeRecipeRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:IsTechTreeRecipeUnlocked(TechTreeRecipeRowHandle) end
---@param TechTreeRecipeRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:IsTechTreeRecipeAvailableForGameMode(TechTreeRecipeRowHandle) end
---@return boolean
function UPartyComponent:IsRestOnCooldown() end
---@param Location FVector
---@param Range float
---@return boolean
function UPartyComponent:IsAnyPartyMemberInRange(Location, Range) end
---@param PlayerState ASurvivalPlayerState
---@return boolean
function UPartyComponent:HasUninspectedResource(PlayerState) end
---@param Category FGameplayTag
---@param PlayerState ASurvivalPlayerState
---@return boolean
function UPartyComponent:HasUninspectedCraftingRecipe(Category, PlayerState) end
---@param Category FGameplayTag
---@param PlayerState ASurvivalPlayerState
---@return boolean
function UPartyComponent:HasUninspectedBuildingRecipe(Category, PlayerState) end
---@param ItemRowName FName
---@return boolean
function UPartyComponent:HasResearchedResourceName(ItemRowName) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:HasResearchedResource(ItemRowHandle) end
---@return boolean
function UPartyComponent:HasPlayerIdentities() end
---@param KeyItemCategory FGameplayTag
---@param KeyItemSubCategory FGameplayTag
---@return boolean
function UPartyComponent:HasKeyItemSubcategory(KeyItemCategory, KeyItemSubCategory) end
---@param KeyItemCategory FGameplayTag
---@return boolean
function UPartyComponent:HasKeyItemCategory(KeyItemCategory) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:HasKeyItem(ItemRowHandle) end
---@return TArray<FDataTableRowHandle_NetCrc>
function UPartyComponent:GetUnlockedTechTrees() end
---@return TArray<FDataTableRowHandle_NetCrc>
function UPartyComponent:GetUnlockedSignSets() end
---@return TArray<UPointOfInterestDataAsset>
function UPartyComponent:GetUnlockedPOIs() end
---@return int32
function UPartyComponent:GetUnlockedDuplicationTier() end
---@return TArray<TSubclassOf<UGlobalColorTheme>>
function UPartyComponent:GetUnlockedColorThemes() end
---@return int32
function UPartyComponent:GetTotalPersonalUpgradePoints() end
---@return int32
function UPartyComponent:GetTotalPartyUpgradePoints() end
---@return int32
function UPartyComponent:GetTotalNumTechTreeUnlocks() end
---@param bCheckUnlocked boolean
---@return FDataTableRowHandle
function UPartyComponent:GetTechTreeKeyItem(bCheckUnlocked) end
---@param TeamRowHandle FDataTableRowHandle
---@return int32
function UPartyComponent:GetTeamReputation(TeamRowHandle) end
---@return int32
function UPartyComponent:GetScienceFound() end
---@return float
function UPartyComponent:GetRestCooldownRemaining() end
---@return int32
function UPartyComponent:GetResearchPoints() end
---@return int32
function UPartyComponent:GetResearchLevel() end
---@param FactionTag FGameplayTag
---@return int32
function UPartyComponent:GetReputation(FactionTag) end
---@return int32
function UPartyComponent:GetRemainingPartyUpgradePoints() end
---@param ResearchLevel int32
---@return TArray<FDataTableRowHandle>
function UPartyComponent:GetRecipesUnlockedForResearchLevel(ResearchLevel) end
---@param Name FName
---@return int32
function UPartyComponent:GetRecipeNumCrafted(Name) end
---@param Items TArray<FDataTableRowHandle>
---@param CraftingBuildingTag FGameplayTag
---@return FDataTableRowHandle
function UPartyComponent:GetRecipeForItems(Items, CraftingBuildingTag) end
---@param Requirements TArray<FRecipeRequirements>
---@param CraftingBuildingTag FGameplayTag
---@return FDataTableRowHandle
function UPartyComponent:GetRecipeForIngredients(Requirements, CraftingBuildingTag) end
---@param Points int32
---@return float
function UPartyComponent:GetProgressTowardsNextResearchLevel(Points) end
---@param TechUnlockRowHandle FDataTableRowHandle
---@return int32
function UPartyComponent:GetPointsSpentOnTechUnlock(TechUnlockRowHandle) end
---@param Level int32
---@return int32
function UPartyComponent:GetPointsRequiredForResearchLevel(Level) end
---@param Points int32
---@return int32
function UPartyComponent:GetPointsRequiredForNextResearchLevel(Points) end
---@param Identity EPlayerCharacterIdentity
---@return ASurvivalPlayerState
function UPartyComponent:GetPlayerStateMatchingIdentity(Identity) end
---@param PlayerState ASurvivalPlayerState
---@return EPlayerCharacterIdentity
function UPartyComponent:GetPlayerIdentityViaPlayerState(PlayerState) end
---@param PlayerController APlayerController
---@return EPlayerCharacterIdentity
function UPartyComponent:GetPlayerIdentityViaController(PlayerController) end
---@param UniqueId FUniqueNetIdRepl
---@return EPlayerCharacterIdentity
function UPartyComponent:GetPlayerIdentity(UniqueId) end
---@return TArray<ASurvivalPlayerCharacter>
function UPartyComponent:GetPartyMembers() end
---@return int32
function UPartyComponent:GetNumTechTreeUnlocksPurchased() end
---@param TechTreeRowHandle FDataTableRowHandle
---@return int32
function UPartyComponent:GetNumTechDatasUnlockedForTreeRowHandle(TechTreeRowHandle) end
---@return int32
function UPartyComponent:GetNumResearchedResources() end
---@return int32
function UPartyComponent:GetNumPartyMembers() end
---@param KeyItemSubCategory FGameplayTag
---@param TechChipQuery ETechChipQuery
---@return int32
function UPartyComponent:GetNumKeyTechTreeKeyItemsWithKeyItemTag(KeyItemSubCategory, TechChipQuery) end
---@param KeyItemSubCategory FGameplayTag
---@return int32
function UPartyComponent:GetNumKeyItemsWithKeyItemTag(KeyItemSubCategory) end
---@return float
function UPartyComponent:GetMaxSpeakingRangeSq() end
---@return float
function UPartyComponent:GetMaxSpeakingRange() end
---@return int32
function UPartyComponent:GetMaxResearchLevel() end
---@return float
function UPartyComponent:GetLastRestTime() end
---@param ItemTag FGameplayTag
---@return TArray<FDataTableRowHandle>
function UPartyComponent:GetKnownResources(ItemTag) end
---@return TArray<FDataTableRowHandle_NetCrc>
function UPartyComponent:GetKeyItems() end
---@param ItemStackTag FGameplayTag
---@return int32
function UPartyComponent:GetItemStackUpgradeTier(ItemStackTag) end
---@param ItemStackTag FGameplayTag
---@return int32
function UPartyComponent:GetItemStackUpgradeCost(ItemStackTag) end
---@param ItemStackTag FGameplayTag
---@return int32
function UPartyComponent:GetItemStackUpgradeBonus(ItemStackTag) end
---@param RarityTag FGameplayTag
---@return int32
function UPartyComponent:GetItemResearchPoints(RarityTag) end
---@return FGameplayTag
function UPartyComponent:GetHighestReputation() end
---@param Identity EPlayerCharacterIdentity
---@return ASurvivalPlayerCharacter
function UPartyComponent:GetFirstPartyMemberByIdentity(Identity) end
---@return TArray<ABuilding>
function UPartyComponent:GetEssentialBuildings() end
---@param Points int32
---@return int32
function UPartyComponent:GetCurrentResearchLevelForPointTotal(Points) end
---@param IngredientRowHandle FDataTableRowHandle
---@param OnlyIncludeKnownRecipes boolean
---@return TArray<FDataTableRowHandle>
function UPartyComponent:GetCraftingRecipesWithIngredient(IngredientRowHandle, OnlyIncludeKnownRecipes) end
---@param Location FVector
---@return ASurvivalPlayerCharacter
function UPartyComponent:GetClosestPlayer(Location) end
---@param Location FVector
---@param Exclusive boolean
---@return float
function UPartyComponent:GetClosestPartyMemberOrBuilderDistanceSquared(Location, Exclusive) end
---@param Location FVector
---@return float
function UPartyComponent:GetClosestPartyMemberDistanceSquared(Location) end
---@param Location FVector
---@return float
function UPartyComponent:GetClosestBuilderDistanceSquared(Location) end
---@param PlayerGuid FGuid
---@return ASurvivalPlayerCharacter
function UPartyComponent:GetCharacterMatchingPlayerGuid(PlayerGuid) end
---@param Builder ABuilderPawn
---@return ASurvivalPlayerCharacter
function UPartyComponent:GetCharacterMatchingBuilder(Builder) end
---@param IngredientRowHandle FDataTableRowHandle
---@param OnlyIncludeKnownRecipes boolean
---@return TArray<FDataTableRowHandle>
function UPartyComponent:GetBuildingRecipesWithIngredient(IngredientRowHandle, OnlyIncludeKnownRecipes) end
---@param Character ASurvivalPlayerCharacter
---@return ABuilderPawn
function UPartyComponent:GetBuilderMatchingCharacter(Character) end
---@param ResearchLevel int32
---@return int32
function UPartyComponent:GetBonusScienceForResearchLevel(ResearchLevel) end
---@param PlayerController APlayerController
function UPartyComponent:FreePlayerIdentityViaPlayerController(PlayerController) end
function UPartyComponent:FinishRestSequence() end
---@param PointOfInterestData UPointOfInterestDataAsset
---@param Instigator ASurvivalPlayerController
---@return boolean
function UPartyComponent:DiscoverPointOfInterestData(PointOfInterestData, Instigator) end
---@param PointOfInterest UPointOfInterestComponent
---@param Instigator ASurvivalPlayerController
---@return boolean
function UPartyComponent:DiscoverPointOfInterest(PointOfInterest, Instigator) end
---@param ItemName FName
---@return boolean
function UPartyComponent:DiscoveredResourceName(ItemName) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UPartyComponent:DiscoveredResource(ItemRowHandle) end
---@param Theme TSubclassOf<UGlobalColorTheme>
---@param Instigator ASurvivalPlayerController
---@return boolean
function UPartyComponent:DiscoverColorTheme(Theme, Instigator) end
---@param FactionTag FGameplayTag
function UPartyComponent:DisableFactionReputation(FactionTag) end
---@param TeamRowHandle FDataTableRowHandle
function UPartyComponent:ClearTeamReputation(TeamRowHandle) end
---@param FactionTag FGameplayTag
function UPartyComponent:ClearReputation(FactionTag) end
function UPartyComponent:ClearAllReputations() end
---@param ItemStackTag FGameplayTag
---@param bIgnoreCost boolean
---@return boolean
function UPartyComponent:CanUpgradeItemStack(ItemStackTag, bIgnoreCost) end
---@param TeamRowHandle FDataTableRowHandle
---@param Value int32
function UPartyComponent:AddTeamReputation(TeamRowHandle, Value) end
---@param ScienceAmount int32
function UPartyComponent:AddScience(ScienceAmount) end
---@param ItemRowHandle FDataTableRowHandle
---@param AquirerPlayerState ASurvivalPlayerState
function UPartyComponent:AddResearchedResource(ItemRowHandle, AquirerPlayerState) end
---@param FactionTag FGameplayTag
---@param Value int32
function UPartyComponent:AddReputation(FactionTag, Value) end
---@param Amount int32
---@param AquirerPlayerState ASurvivalPlayerState
function UPartyComponent:AddPersonalUpgradePoints(Amount, AquirerPlayerState) end
---@param Amount int32
---@param AquirerPlayerState ASurvivalPlayerState
function UPartyComponent:AddPartyUpgadePoints(Amount, AquirerPlayerState) end
---@param RecipeRowHandle FDataTableRowHandle
---@param AquirerPlayerState ASurvivalPlayerState
---@param bMulticastNewRecipeUnlocked boolean
---@return boolean
function UPartyComponent:AddKnownRecipe(RecipeRowHandle, AquirerPlayerState, bMulticastNewRecipeUnlocked) end
---@param RecipeName FName
---@param AquirerPlayerState ASurvivalPlayerState
---@param bMulticastNewRecipeUnlocked boolean
---@return boolean
function UPartyComponent:AddKnownCraftingRecipeByName(RecipeName, AquirerPlayerState, bMulticastNewRecipeUnlocked) end
---@param RecipeRowHandle FDataTableRowHandle
---@param AquirerPlayerState ASurvivalPlayerState
---@param bMulticastNewRecipeUnlocked boolean
---@return boolean
function UPartyComponent:AddKnownCraftingRecipe(RecipeRowHandle, AquirerPlayerState, bMulticastNewRecipeUnlocked) end
---@param RecipeName FName
---@param AquirerPlayerState ASurvivalPlayerState
---@param bMulticastNewRecipeUnlocked boolean
---@return boolean
function UPartyComponent:AddKnownBuildingRecipeByName(RecipeName, AquirerPlayerState, bMulticastNewRecipeUnlocked) end
---@param RecipeRowHandle FDataTableRowHandle
---@param AquirerPlayerState ASurvivalPlayerState
---@param bMulticastNewRecipeUnlocked boolean
---@return boolean
function UPartyComponent:AddKnownBuildingRecipe(RecipeRowHandle, AquirerPlayerState, bMulticastNewRecipeUnlocked) end


---@class UPauseWindowWidget : UWindowWidget
UPauseWindowWidget = {}


---@class UPerkComponent : UActorComponent
---@field OnPerksChanged FPerkComponentOnPerksChanged
---@field OnPerkUnlocked FPerkComponentOnPerkUnlocked
---@field OnPerkLoadoutChanged FPerkComponentOnPerkLoadoutChanged
---@field MaxEquippedPerks int32
---@field Perks TArray<FPerkStatus>
---@field Loadouts TArray<FPerkLoadout>
---@field ActiveLoadout int32
---@field StatPerks TMap<UPlayerStatConfig, int32>
UPerkComponent = {}

---@param PerkRowHandle FDataTableRowHandle
---@param Tier int32
function UPerkComponent:UnlockPerkTier(PerkRowHandle, Tier) end
---@param PerkName FName_NetCrc
function UPerkComponent:ServerUnequipPerk(PerkName) end
---@param Loadout int32
---@param bDisplayPerksEquippedNotification boolean
function UPerkComponent:ServerSwitchLoadout(Loadout, bDisplayPerksEquippedNotification) end
---@param PerkName FName_NetCrc
function UPerkComponent:ServerEquipPerk(PerkName) end
function UPerkComponent:OnRep_Perks() end
---@param PlayerStat UPlayerStatConfig
---@param Value int32
function UPerkComponent:OnPlayerStatChanged(PlayerStat, Value) end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param Instigator AActor
function UPerkComponent:OnGlobalVariableChanged(GlobalVariableID, VariableValue, Instigator) end
---@param PerkRowHandle FDataTableRowHandle
---@return boolean
function UPerkComponent:IsPerkEquipped(PerkRowHandle) end
---@return boolean
function UPerkComponent:HasAvailablePerkEquip() end
---@return TArray<FPerkStatus>
function UPerkComponent:GetPerks() end
---@return int32
function UPerkComponent:GetNumEquippedPerks() end
---@return int32
function UPerkComponent:GetMaxEquippedPerks() end
---@return int32
function UPerkComponent:GetDefaultMaxEquippedPerks() end
---@param Perk FPerkStatus
function UPerkComponent:ClientNotifyUnlockPerk(Perk) end
---@param NewLoadout int32
---@param bDisplaysPerksEquippedNotification boolean
function UPerkComponent:ClientNotifyLoadoutChanged(NewLoadout, bDisplaysPerksEquippedNotification) end


---@class UPerlinNoiseFunctionLibrary : UBlueprintFunctionLibrary
UPerlinNoiseFunctionLibrary = {}

---@param Noise FPerlinNoise
---@param NewSeed int32
function UPerlinNoiseFunctionLibrary:SetPerlinNoiseSeed(Noise, NewSeed) end
---@param Noise FPerlinNoise
---@param Value float
---@return float
function UPerlinNoiseFunctionLibrary:SamplePerlinNoise1D(Noise, Value) end
---@param Noise FPerlinNoise
---@return int32
function UPerlinNoiseFunctionLibrary:GetPerlinNoiseSeed(Noise) end


---@class UPersistenceComponent : UActorComponent
---@field bNeverSpawnAsDynamicActor boolean
---@field bIgnoreTransformRestore boolean
---@field bShouldEditModeSave boolean
---@field bEditModeIgnoreTransformRestore boolean
---@field MinimumVersionToRestore FGameVersion
UPersistenceComponent = {}



---@class UPersistentObject : UObject
---@field UniqueId FGuid
UPersistentObject = {}



---@class UPersistentUtilsStatics : UBlueprintFunctionLibrary
UPersistentUtilsStatics = {}

---@param Writer USaveWriter
---@param Value FString
function UPersistentUtilsStatics:BlueprintWritePersistentString(Writer, Value) end
---@param Writer USaveWriter
---@param Value int32
function UPersistentUtilsStatics:BlueprintWritePersistentInt(Writer, Value) end
---@param Writer USaveWriter
---@param Value float
function UPersistentUtilsStatics:BlueprintWritePersistentFloat(Writer, Value) end
---@param Writer USaveWriter
---@param Value boolean
function UPersistentUtilsStatics:BlueprintWritePersistentBool(Writer, Value) end
---@param Reader USaveReader
---@return FString
function UPersistentUtilsStatics:BlueprintReadPersistentString(Reader) end
---@param Reader USaveReader
---@return int32
function UPersistentUtilsStatics:BlueprintReadPersistentInt(Reader) end
---@param Reader USaveReader
---@return float
function UPersistentUtilsStatics:BlueprintReadPersistentFloat(Reader) end
---@param Reader USaveReader
---@return boolean
function UPersistentUtilsStatics:BlueprintReadPersistentBool(Reader) end


---@class UPhobiaControllerComponent : UActorComponent
---@field MeshData TArray<FPhobiaMeshData>
---@field MaterialSwapComponent UMaterialSwapComponent
UPhobiaControllerComponent = {}

---@param Setting int32
function UPhobiaControllerComponent:SetSafeMode(Setting) end


---@class UPhotoModeCheckBox : UPhotoModeCheckBoxBase
---@field HoverFocusReceivedSound USoundBase
UPhotoModeCheckBox = {}



---@class UPhotoModeComboBox : UPhotoModeComboBoxBase
---@field HoverFocusReceivedSound USoundBase
UPhotoModeComboBox = {}



---@class UPhotoModeHUD : UWindowWidget
---@field CanvasPanel UCanvasPanel
---@field SpeedPips UPipsWidget
---@field NewSettings UMainePhotoModeSettings
---@field UIToggledVisibleSound USoundBase
---@field UIToggledHiddenSound USoundBase
---@field ButtonDownActionSound USoundBase
---@field PhotoModeDefaults FPhotoModeValues
UPhotoModeHUD = {}

function UPhotoModeHUD:ToggleUIVisibility() end
function UPhotoModeHUD:TogglePhotoModeSettings() end
---@param PhotoPawn APhotoPawn
function UPhotoModeHUD:TakePhotoOverride(PhotoPawn) end
function UPhotoModeHUD:ShowUI() end
function UPhotoModeHUD:SetUGCModeVisibility() end
function UPhotoModeHUD:RestoreDefaults() end
function UPhotoModeHUD:OpenPhotoModeSettings() end
function UPhotoModeHUD:OnSettingsOpened() end
function UPhotoModeHUD:OnSettingsClosed() end
function UPhotoModeHUD:OnPhotoTaken() end
function UPhotoModeHUD:OnPhotoModePreExit() end
---@return boolean
function UPhotoModeHUD:IsHUDVisible() end
function UPhotoModeHUD:HideUI() end
---@param Message FString
---@param MessageIcon UTexture2D
function UPhotoModeHUD:HandleGenericMessage(Message, MessageIcon) end
---@return float
function UPhotoModeHUD:GetPhotoPawnSpeed() end
function UPhotoModeHUD:ExitPhotoMode() end
function UPhotoModeHUD:ClosePhotoModeSettings() end
---@return boolean
function UPhotoModeHUD:AreSettingsOpen() end


---@class UPhotoModeSettingsSlider : UPhotoModeSliderBase
---@field HoverFocusReceivedSound USoundBase
---@field CaptureReceivedSound USoundBase
---@field CaptureLostSound USoundBase
---@field ValueChangedSound USoundBase
UPhotoModeSettingsSlider = {}



---@class UPhysicsStateManager : UObject
---@field VitalSimulatingActors TArray<UObject>
---@field VitalStasisActors TArray<AActor>
UPhysicsStateManager = {}



---@class UPipsWidget : UGameUserWidget
---@field PipContainer UPanelWidget
---@field PipActiveTexture UTexture2D
---@field PipInactiveTexture UTexture2D
---@field PipThresholds TArray<float>
UPipsWidget = {}

---@param CurrentValue float
function UPipsWidget:RefreshWidgets(CurrentValue) end
---@return float
function UPipsWidget:GetCurrentValue() end


---@class UPlaceNewActorUndoOperation : UBaseUndoOperation
UPlaceNewActorUndoOperation = {}


---@class UPlaceableFunctionLibrary : UBlueprintFunctionLibrary
UPlaceableFunctionLibrary = {}


---@class UPlaceableLODActor : UBaseLODActor
UPlaceableLODActor = {}


---@class UPlayerCharacterLODActor : UCharacterLODActor
UPlayerCharacterLODActor = {}

---@param CurrentMode EEditMode
---@param NewMode EEditMode
function UPlayerCharacterLODActor:OnPreEditModeChangePlayerCharacterLODActor(CurrentMode, NewMode) end


---@class UPlayerDistanceDebugComponent : UActorComponent
UPlayerDistanceDebugComponent = {}


---@class UPlayerListWidget : UWindowWidget
UPlayerListWidget = {}

---@param TargetPlayerState APlayerState
function UPlayerListWidget:ViewPlayerProfile(TargetPlayerState) end
---@param Controller APlayerController
function UPlayerListWidget:KickPlayer(Controller) end


---@class UPlayerLookTriggerComponent : UBaseLookTriggerComponent
UPlayerLookTriggerComponent = {}


---@class UPlayerNameplateWidget : UGameUserWidget
---@field MarkerData TWeakObjectPtr<UHUDMarkerData>
---@field DistanceText UGameTextBlock
---@field KidFace UImage
---@field HolderBG UBorder
---@field DyingFillbar UProgressBar
---@field CachedDistanceCM int32
---@field ContentCanvas UCanvasPanel
---@field KnockedOutHolder USizeBox
UPlayerNameplateWidget = {}

function UPlayerNameplateWidget:UpdateNameplatePosition() end
function UPlayerNameplateWidget:UpdateInfoForMarker() end
function UPlayerNameplateWidget:ScreenLocationBasedUpdate() end
function UPlayerNameplateWidget:OnMarkerDataSet() end
---@param NewRatio float
function UPlayerNameplateWidget:OnIncapacitationRatioChanged(NewRatio) end
function UPlayerNameplateWidget:IncapacitatedUpdate() end
---@return float
function UPlayerNameplateWidget:GetScreenCenterDistance() end
function UPlayerNameplateWidget:FadeUpdate() end
function UPlayerNameplateWidget:DistanceUpdate() end


---@class UPlayerSFXComponent : UActorComponent
---@field DrowningTimerSFX USoundMix
---@field CriticalDrowningTimerSFX USoundMix
---@field DrowningTimerBreathLeft float
---@field CriticalDrowningTimerBreathLeft float
---@field SwimHeartbeatTimeThreshold float
---@field HeartbeatSFX USoundBase
---@field HeartbeatVolumeCurve UCurveFloat
---@field HeartbeatPitchCurve UCurveFloat
---@field StarvationMix USoundMix
---@field StarvingSFX USoundBase
---@field StarvingReverbEffect UReverbEffect
---@field StarvationReverbSendLevelCurve UCurveFloat
---@field StarvationReverbName FName
---@field StarvationTimerStart float
UPlayerSFXComponent = {}

function UPlayerSFXComponent:TriggerStarvationSFXUpdate() end
function UPlayerSFXComponent:StopSFX() end
---@param InComponent USurvivalComponent
function UPlayerSFXComponent:SetSurvivalComponent(InComponent) end


---@class UPlayerScalingReceiverComponent : UAuraReceiverComponent
---@field ScalingTable UDefenseScalingData
UPlayerScalingReceiverComponent = {}

---@return float
function UPlayerScalingReceiverComponent:GetStunDurationMultiplier() end
---@return float
function UPlayerScalingReceiverComponent:GetMaxStunMultiplier() end
---@return float
function UPlayerScalingReceiverComponent:GetMaxHealthMultiplier() end
---@return float
function UPlayerScalingReceiverComponent:GetDamageResistanceMultiplier() end


---@class UPlayerStatConfig : UDataAsset
---@field DisplayString FLocString
---@field StatType EPlayerStatType
UPlayerStatConfig = {}



---@class UPlayerStatsComponent : UActorComponent
---@field OnPlayerStatChanged FPlayerStatsComponentOnPlayerStatChanged
---@field PlayerStatConfigs TArray<UPlayerStatConfig>
---@field PlayerStats TMap<UPlayerStatConfig, int32>
---@field PostGameStatValues TArray<int32>
UPlayerStatsComponent = {}

---@param PlayerStat UPlayerStatConfig
---@param NewValue int32
function UPlayerStatsComponent:SetPlayerStatIfLarger(PlayerStat, NewValue) end
---@param StaminaRatio float
function UPlayerStatsComponent:OnStaminaDepleted(StaminaRatio) end
---@param RevivedActor AActor
function UPlayerStatsComponent:OnReviveTarget(RevivedActor) end
---@param PointOfInterest UPointOfInterestDataAsset
---@param UnlockerPlayerState ASurvivalPlayerState
function UPlayerStatsComponent:OnPointOfInterestDiscovered(PointOfInterest, UnlockerPlayerState) end
function UPlayerStatsComponent:OnPhotoTaken() end
---@param Pet ASurvivalCreature
function UPlayerStatsComponent:OnPetTamed(Pet) end
---@param KilledActor AActor
---@param DamageInfo FDamageInfo
function UPlayerStatsComponent:OnKill(KilledActor, DamageInfo) end
---@param KeyItemRowHandle FDataTableRowHandle
---@param AcquirerPlayerState ASurvivalPlayerState
---@param RecipesLearned TArray<FDataTableRowHandle_NetCrc>
function UPlayerStatsComponent:OnKeyItemObtained(KeyItemRowHandle, AcquirerPlayerState, RecipesLearned) end
---@param User ASurvivalCharacter
---@param ItemRowHandle FDataTableRowHandle
function UPlayerStatsComponent:OnItemUsed(User, ItemRowHandle) end
---@param Sender UInventoryComponent
---@param RecipeHandle FDataTableRowHandle
---@param ItemsAdded FAddItemResult
function UPlayerStatsComponent:OnItemCrafted(Sender, RecipeHandle, ItemsAdded) end
---@param InventoryComponent UInventoryComponent
---@param ItemHandle FDataTableRowHandle
---@param IsNewItem boolean
---@param Count int32
---@param TotalCount int32
function UPlayerStatsComponent:OnItemAdded(InventoryComponent, ItemHandle, IsNewItem, Count, TotalCount) end
---@param DefensePoint UDefensePointComponent
function UPlayerStatsComponent:OnDefensePointComplete(DefensePoint) end
function UPlayerStatsComponent:OnDefenseBaseVictory() end
---@param DamageInfo FDamageInfo
function UPlayerStatsComponent:OnDeath(DamageInfo) end
---@param NewLevel int32
function UPlayerStatsComponent:OnCozinessLevelChanged(NewLevel) end
---@param PlayerStat UPlayerStatConfig
---@param ValueToAdd int32
function UPlayerStatsComponent:IncrementPlayerStat(PlayerStat, ValueToAdd) end
---@param PlayerStat UPlayerStatConfig
---@return int32
function UPlayerStatsComponent:GetPostGameStat(PlayerStat) end


---@class UPlayerStatusWidget : UGameUserWidget
UPlayerStatusWidget = {}


---@class UPlayerUpgradeComponent : UActorComponent
---@field OnPlayerUpgradesChanged FPlayerUpgradeComponentOnPlayerUpgradesChanged
---@field PlayerUpgrades TArray<FPlayerUpgrade>
---@field LegacyEffects TArray<FDataTableRowHandle_NetCrc>
UPlayerUpgradeComponent = {}

---@param UpgradeRowHandle FDataTableRowHandle_NetCrc
---@param bIgnoreCost boolean
function UPlayerUpgradeComponent:ServerUnlockUpgradeTier(UpgradeRowHandle, bIgnoreCost) end
function UPlayerUpgradeComponent:OnRep_PlayerUpgrades() end
---@param UpgradeRowHandle FDataTableRowHandle
---@return int32
function UPlayerUpgradeComponent:GetUpgradeTier(UpgradeRowHandle) end
---@param UpgradeRowHandle FDataTableRowHandle
---@return int32
function UPlayerUpgradeComponent:GetUpgradeCost(UpgradeRowHandle) end
---@return int32
function UPlayerUpgradeComponent:GetTotalSpentPoints() end
---@return int32
function UPlayerUpgradeComponent:GetRemainingUpgradePoints() end
---@return int32
function UPlayerUpgradeComponent:GetPerkCountBonus() end
---@param UpgradeRowHandle FDataTableRowHandle
---@return int32
function UPlayerUpgradeComponent:GetMaxUpgradeTier(UpgradeRowHandle) end
---@param StatusEffectRowHandle FDataTableRowHandle
---@return float
function UPlayerUpgradeComponent:GetMatchingLegacyEffectValue(StatusEffectRowHandle) end
---@param UpgradeRowHandle FDataTableRowHandle
---@param bIgnoreCost boolean
---@return boolean
function UPlayerUpgradeComponent:CanUpgradeTier(UpgradeRowHandle, bIgnoreCost) end


---@class UPointOfInterestComponent : UActorComponent
---@field PointOfInterestData UPointOfInterestDataAsset
---@field bSubscribeAutomatically boolean
---@field ActorInstigator TWeakObjectPtr<AActor>
UPointOfInterestComponent = {}

function UPointOfInterestComponent:PlayBanter() end
---@param Sender UBaseLookTriggerComponent
---@param Params FLookTriggeredParams
function UPointOfInterestComponent:OnLookTriggered(Sender, Params) end
---@return UPointOfInterestDataAsset
function UPointOfInterestComponent:GetPointOfInterestData() end
---@param Instigator ASurvivalPlayerController
function UPointOfInterestComponent:Discover(Instigator) end


---@class UPointOfInterestDataAsset : UDataAsset
---@field CategoryTag FGameplayTag
---@field Tags FGameplayTagContainer
---@field DisplayName FLocString
---@field NotificationIcon FSlateBrush
---@field BanterConversation FConversationReference
---@field BanterStartNode int32
---@field OnDiscoveredSFX TSoftObjectPtr<USoundCue>
---@field ItemReward FDataTableRowHandle
UPointOfInterestDataAsset = {}



---@class UPopulationMonitorComponent : UActorComponent
UPopulationMonitorComponent = {}

---@param DayHour int32
---@param Day int32
function UPopulationMonitorComponent:OnHourChanged(DayHour, Day) end
function UPopulationMonitorComponent:DumpSamplesToFile() end


---@class UPostGameReportDataAsset : UDataAsset
---@field CategoryData TMap<EReportCategory, FReportCategoryData>
---@field GlobalVariableData TArray<FReportGlobalVariableData>
---@field Stats TArray<UPlayerStatConfig>
---@field MinScoreAdded float
UPostGameReportDataAsset = {}



---@class UPowerNetworkManagerComponent : UActorComponent
---@field OnPowerConnectionRemoved FPowerNetworkManagerComponentOnPowerConnectionRemoved
---@field OnNetworksCoalesced FPowerNetworkManagerComponentOnNetworksCoalesced
---@field OnNodeChangedNetwork FPowerNetworkManagerComponentOnNodeChangedNetwork
---@field OnNodeRemoved FPowerNetworkManagerComponentOnNodeRemoved
---@field OnNetworkPowerChanged FPowerNetworkManagerComponentOnNetworkPowerChanged
---@field OnBuildingRelocated FPowerNetworkManagerComponentOnBuildingRelocated
---@field NextNodeId int32
---@field NextNetworkId int32
---@field Networks TArray<FBuildingPowerNetwork>
UPowerNetworkManagerComponent = {}

---@param NetworkId int32
---@return float
function UPowerNetworkManagerComponent:GetTotalPowerForNetwork(NetworkId) end
---@param ID FBuildingPowerId
---@return ABuilding
function UPowerNetworkManagerComponent:GetPoweredBuilding(ID) end


---@class UPowerReservoirLibrary : UBlueprintFunctionLibrary
UPowerReservoirLibrary = {}

---@param Reservoir FPowerReservoir
---@param PowerType FGameplayTag
---@return boolean
function UPowerReservoirLibrary:UsesPowerType(Reservoir, PowerType) end
---@param Reservoir FPowerReservoir
---@param Count float
---@return boolean
function UPowerReservoirLibrary:RemoveCharges(Reservoir, Count) end
---@param Reservoir FPowerReservoir
---@return boolean
function UPowerReservoirLibrary:IsValid(Reservoir) end
---@param Reservoir FPowerReservoir
---@return boolean
function UPowerReservoirLibrary:IsFull(Reservoir) end
---@param Reservoir FPowerReservoir
---@return boolean
function UPowerReservoirLibrary:IsEmpty(Reservoir) end
---@param Reservoir FPowerReservoir
---@return float
function UPowerReservoirLibrary:GetPowerPercentage(Reservoir) end
---@param Reservoir FPowerReservoir
---@return float
function UPowerReservoirLibrary:GetEmptySpace(Reservoir) end
---@param Reservoir FPowerReservoir
---@return FGameplayTag
function UPowerReservoirLibrary:GetCurrentPowerType(Reservoir) end
---@param Reservoir FPowerReservoir
---@return float
function UPowerReservoirLibrary:GetCurrentCharges(Reservoir) end
---@param Reservoir FPowerReservoir
---@return float
function UPowerReservoirLibrary:GetCapacity(Reservoir) end
---@param Reservoir FPowerReservoir
---@return FGameplayTag
function UPowerReservoirLibrary:GetAllowedPowerType(Reservoir) end
---@param Reservoir FPowerReservoir
---@param PowerType FGameplayTag
---@return boolean
function UPowerReservoirLibrary:CanAcceptPowerType(Reservoir, PowerType) end
---@param Reservoir FPowerReservoir
---@param PowerTag FGameplayTag
---@param Count float
---@return boolean
function UPowerReservoirLibrary:AddCharges(Reservoir, PowerTag, Count) end


---@class UProceduralAnimationComponent : USceneComponent
---@field bAdditiveRotationEnabled boolean
UProceduralAnimationComponent = {}

---@param Handle FProceduralAnimationHandle
function UProceduralAnimationComponent:StopAnimation(Handle) end
---@param Source UObject
---@param Rotation FQuat
function UProceduralAnimationComponent:SetAdditiveRotationQuat(Source, Rotation) end
---@param Source UObject
---@param Rotation FRotator
function UProceduralAnimationComponent:SetAdditiveRotation(Source, Rotation) end
---@param Source UObject
---@param InStrengthCurve UCurveFloat
---@param Frequency float
---@param Delay float
---@param bLoop boolean
---@return FProceduralAnimationHandle
function UProceduralAnimationComponent:PlayWiggle(Source, InStrengthCurve, Frequency, Delay, bLoop) end
---@param Source UObject
---@param InStrengthXCurve UCurveFloat
---@param InStrengthYCurve UCurveFloat
---@param InStrengthZCurve UCurveFloat
---@param Delay float
---@param bLoop boolean
---@return FProceduralAnimationHandle
function UProceduralAnimationComponent:PlayScaleAnimation(Source, InStrengthXCurve, InStrengthYCurve, InStrengthZCurve, Delay, bLoop) end


---@class UProfanityFilter : UDataAsset
---@field MixedBlacklist FString
---@field Blacklist TArray<FString>
---@field MixedGreylist FString
---@field Greylist TArray<FString>
UProfanityFilter = {}

---@param InText FText
---@return FText
function UProfanityFilter:CensorText(InText) end
---@param inString FString
---@return FString
function UProfanityFilter:CensorString(inString) end


---@class UPropManagerComponent : UActorComponent
---@field ClassesToManage TArray<TSubclassOf<AActor>>
UPropManagerComponent = {}



---@class UProximityInventoryComponent : UActorComponent
---@field OnProximityInventoriesChanged FProximityInventoryComponentOnProximityInventoriesChanged
---@field StorageRadius float
---@field TypeRestrictedStorageRadius float
---@field ForcedRelevantBuildings TArray<ABuilding>
UProximityInventoryComponent = {}

---@param Item UItem
---@param Count int32
---@return int32
function UProximityInventoryComponent:RemoveItem(Item, Count) end
---@param Sender UInventoryComponent
function UProximityInventoryComponent:OnInventoryChanged(Sender) end
---@param Actor AActor
function UProximityInventoryComponent:OnInventoryActorDestroyed(Actor) end
---@param Interactable TScriptInterface<IInteractableInterface>
function UProximityInventoryComponent:OnInteractableChanged(Interactable) end
---@param Controller APlayerController
---@param bIsInBuildMode boolean
function UProximityInventoryComponent:OnBuildModeStateChanged(Controller, bIsInBuildMode) end
---@param InventoryComponent UInventoryComponent
---@return boolean
function UProximityInventoryComponent:IsInventoryNearby(InventoryComponent) end
---@param bOnlyIncludeStorageInventories boolean
---@return int32
function UProximityInventoryComponent:GetNumNearbyInventories(bOnlyIncludeStorageInventories) end
---@return TArray<UItem>
function UProximityInventoryComponent:GetItems() end
---@param ItemRowHandle FDataTableRowHandle
---@return int32
function UProximityInventoryComponent:GetItemCount(ItemRowHandle) end
function UProximityInventoryComponent:ClearInventories() end
function UProximityInventoryComponent:CacheInventories() end


---@class UProxyActor : UObject
---@field LODActor UBaseLODActor
UProxyActor = {}



---@class UProxyAttractionComponent : UProxySceneComponent
---@field AdvertisedActions TArray<UGoapAction>
---@field OwnerAttractionLODComponent UAttractionLODComponent
UProxyAttractionComponent = {}

---@param ColonyIdentifier FColonyIdentifier
---@return boolean
function UProxyAttractionComponent:CanColonyUse(ColonyIdentifier) end
---@param Character UCharacterLODActor
---@return boolean
function UProxyAttractionComponent:CanCharacterUse(Character) end


---@class UProxyBuildingActor : UProxyActor
UProxyBuildingActor = {}


---@class UProxyBurrowComponent : UProxyComponent
UProxyBurrowComponent = {}


---@class UProxyCharacterActor : UProxyActor
---@field CurrentNavigationPath UNavigationPath
---@field InterestCore UInterestCore
---@field TargetAction FGoapActionInstance
---@field AttachedSpline FClimbableSplineKey
UProxyCharacterActor = {}

function UProxyCharacterActor:UpdateHomeLocation() end
---@param AffectedPath UNavigationPath
---@param PathEvent ENavPathEvent::Type
function UProxyCharacterActor:OnNavigationPathUpdated(AffectedPath, PathEvent) end
---@param bObstructed boolean
function UProxyCharacterActor:MarkDesiredActionUnreachable(bObstructed) end
---@return FVector
function UProxyCharacterActor:GetWaveDestination() end
---@return FVector
function UProxyCharacterActor:GetSearchOrigin() end
---@return FVector
function UProxyCharacterActor:GetHomeLocation() end


---@class UProxyColonyMemberComponent : UProxyComponent
UProxyColonyMemberComponent = {}

---@param ColonyId FColonyIdentifier
---@return boolean
function UProxyColonyMemberComponent:IsMemberOf(ColonyId) end
---@return FColonyIdentifier
function UProxyColonyMemberComponent:GetColonyIdentifier() end


---@class UProxyColorCollectibleActor : UProxyActor
---@field UnlockedTheme TSubclassOf<UGlobalColorTheme>
UProxyColorCollectibleActor = {}



---@class UProxyComponent : UObject
---@field PrimaryComponentTick FProxyComponentTickFunction
UProxyComponent = {}



---@class UProxyCreatureActor : UProxyCharacterActor
---@field TameData UTamedCreatureData
UProxyCreatureActor = {}



---@class UProxyCustomPropertyComponent : UProxyComponent
UProxyCustomPropertyComponent = {}


---@class UProxyEquipmentComponent : UProxyComponent
---@field EquippedItems TArray<UItem>
UProxyEquipmentComponent = {}

---@param Slot EEquipmentSlot
---@return boolean
function UProxyEquipmentComponent:HasSlot(Slot) end
---@param Slot EEquipmentSlot
---@return UItem
function UProxyEquipmentComponent:GetItemInSlot(Slot) end
---@return TArray<EEquipmentSlot>
function UProxyEquipmentComponent:GetEquipmentSlots() end


---@class UProxyHarvestNodeActor : UProxyActor
---@field SourceFoliage FFoliageKey
UProxyHarvestNodeActor = {}



---@class UProxyHaulingComponent : UProxyComponent
---@field HauledItems TArray<UItem>
---@field AdjustedCapacity int32
UProxyHaulingComponent = {}

---@return int32
function UProxyHaulingComponent:GetAdjustedCapacity() end


---@class UProxyHealthComponent : UProxyComponent
UProxyHealthComponent = {}


---@class UProxyInventoryComponent : UProxyComponent
---@field Items TArray<UItem>
---@field MaxSize int32
UProxyInventoryComponent = {}

---@return boolean
function UProxyInventoryComponent:IsInventoryFull() end
---@return boolean
function UProxyInventoryComponent:IsInventoryEmpty() end
---@param ItemRowHandle FDataTableRowHandle
---@return UItem
function UProxyInventoryComponent:FindPartialItemStackForItemHandle(ItemRowHandle) end
---@param Item UItem
---@return UItem
function UProxyInventoryComponent:FindPartialItemStackForItem(Item) end


---@class UProxyLODableActor : UProxyActor
UProxyLODableActor = {}


---@class UProxyLootBagActor : UProxyActor
---@field OwnerPlayerGuid FGuid
---@field OwnerName FString
UProxyLootBagActor = {}



---@class UProxyLootComponent : UProxyComponent
UProxyLootComponent = {}


---@class UProxyPlaceableActor : UProxyActor
UProxyPlaceableActor = {}


---@class UProxyPlayerCharacterActor : UProxyCharacterActor
---@field CurrentPet TWeakObjectPtr<UCreatureLODActor>
UProxyPlayerCharacterActor = {}



---@class UProxySceneComponent : UProxyComponent
---@field RelativeTransform FTransform
UProxySceneComponent = {}



---@class UProxyScienceCollectableActor : UProxyActor
UProxyScienceCollectableActor = {}


---@class UProxySimplePhysicsBaseActor : UProxyActor
UProxySimplePhysicsBaseActor = {}


---@class UProxySpawnedItemActor : UProxyPlaceableActor
---@field Item UItem
---@field DroppedBy TWeakObjectPtr<UBaseLODActor>
---@field GoapRegionTag FGameplayTag
UProxySpawnedItemActor = {}



---@class UProxySpawnedItemDropletActor : UProxySpawnedItemActor
UProxySpawnedItemDropletActor = {}


---@class UProxyTeamComponent : UProxyComponent
UProxyTeamComponent = {}

---@param Other UBaseLODActor
---@return ETeamAttitude::Type
function UProxyTeamComponent:GetRelationshipToLODActor(Other) end
---@param Other AActor
---@return ETeamAttitude::Type
function UProxyTeamComponent:GetRelationshipToActor(Other) end
---@return FDataTableRowHandle
function UProxyTeamComponent:GetCurrentTeamRowHandle() end


---@class UProxyUpgradeCollectibleActor : UProxyActor
UProxyUpgradeCollectibleActor = {}


---@class UProxyWendellBotActor : UProxyCharacterActor
UProxyWendellBotActor = {}


---@class UQuadAudioBedComponent : USceneComponent
---@field SatelliteComponentsMap TMap<EQuadAudioSatelliteType, UQuadAudioSatelliteComponent>
UQuadAudioBedComponent = {}

---@param ZoneAudioDataTableRowHandle FDataTableRowHandle
---@param bIsSubmerged boolean
function UQuadAudioBedComponent:OnUpdateZoneAmbience(ZoneAudioDataTableRowHandle, bIsSubmerged) end


---@class UQuadAudioBedSounds : UDataAsset
---@field DaySounds FQuadAudioBedSoundData
---@field NightSounds FQuadAudioBedSoundData
---@field SubmergedSounds FQuadAudioBedSoundData
---@field TransitionToTime float
---@field TransitionFromTime float
UQuadAudioBedSounds = {}



---@class UQuadAudioSatelliteComponent : USceneComponent
---@field FadeInDuration float
---@field FadeOutDuration float
---@field SatelliteType EQuadAudioSatelliteType
---@field CurrentAudioComponent UAudioComponent
---@field FadingAudioComponents TArray<UAudioComponent>
UQuadAudioSatelliteComponent = {}



---@class UQuest : UBaseQuest
---@field QuestDataRowHandle FDataTableRowHandle_NetCrc
---@field Started boolean
---@field Completed boolean
---@field Objectives TArray<UObjective>
---@field BaseObjectives TArray<UBaseObjective>
UQuest = {}

function UQuest:OnRep_QuestChanged() end
---@return boolean
function UQuest:IsValidForGameType() end
---@return boolean
function UQuest:IsValidForGamePackage() end
---@return boolean
function UQuest:IsTutorialQuest() end
---@return FDataTableRowHandle
function UQuest:GetQuestDataRowHandle() end
---@param Index int32
---@return FString
function UQuest:GetObjectiveName(Index) end


---@class UQuestManagerComponent : UActorComponent
---@field OnQuestStarted FQuestManagerComponentOnQuestStarted
---@field OnQuestComplete FQuestManagerComponentOnQuestComplete
---@field OnQuestReplicationUpdated FQuestManagerComponentOnQuestReplicationUpdated
---@field OnObjectiveActivated FQuestManagerComponentOnObjectiveActivated
---@field OnObjectiveComplete FQuestManagerComponentOnObjectiveComplete
---@field PartyQuests FQuestArray
---@field DummyClientQuestList TArray<UQuest>
UQuestManagerComponent = {}

---@param QuestRowHandle FDataTableRowHandle
---@param QuestIndex int32
---@param PlayerState ASurvivalPlayerState
---@param Instigator AActor
function UQuestManagerComponent:UncompleteObjective(QuestRowHandle, QuestIndex, PlayerState, Instigator) end
---@param QuestRowHandle FDataTableRowHandle
---@param PlayerState ASurvivalPlayerState
---@param Instigator AActor
function UQuestManagerComponent:StartQuest(QuestRowHandle, PlayerState, Instigator) end
---@param QuestRowHandle FDataTableRowHandle
function UQuestManagerComponent:ResetQuest(QuestRowHandle) end
function UQuestManagerComponent:OnRep_PartyQuests() end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param Instigator AActor
function UQuestManagerComponent:OnGlobalVariableChangedEvent(GlobalVariableID, VariableValue, Instigator) end
---@param QuestRowHandle FDataTableRowHandle_NetCrc
---@param PlayerState ASurvivalPlayerState
function UQuestManagerComponent:MulticastStartQuest(QuestRowHandle, PlayerState) end
---@param QuestRowHandle FDataTableRowHandle_NetCrc
---@param PlayerState ASurvivalPlayerState
function UQuestManagerComponent:MulticastCompleteQuest(QuestRowHandle, PlayerState) end
---@param QuestRowHandle FDataTableRowHandle_NetCrc
---@param QuestIndex int32
---@param PlayerState ASurvivalPlayerState
function UQuestManagerComponent:MulticastCompleteObjective(QuestRowHandle, QuestIndex, PlayerState) end
---@param QuestRowHandle FDataTableRowHandle_NetCrc
---@param QuestIndex int32
---@param PlayerState ASurvivalPlayerState
function UQuestManagerComponent:MulticastActivateObjective(QuestRowHandle, QuestIndex, PlayerState) end
---@param QuestRowHandle FDataTableRowHandle
---@param PlayerState ASurvivalPlayerState
---@return boolean
function UQuestManagerComponent:IsQuestStarted(QuestRowHandle, PlayerState) end
---@param QuestRowHandle FDataTableRowHandle
---@param PlayerState ASurvivalPlayerState
---@return boolean
function UQuestManagerComponent:IsQuestCompleted(QuestRowHandle, PlayerState) end
---@param QuestHandle FDataTableRowHandle
---@param ObjectiveIndex int32
function UQuestManagerComponent:HandleObjectiveAddedToExistingQuest(QuestHandle, ObjectiveIndex) end
---@return TArray<UQuest>
function UQuestManagerComponent:GetQuests() end
---@return TArray<UQuest>
function UQuestManagerComponent:GetPartyQuests() end
---@param PlayerState ASurvivalPlayerState
---@return TArray<UQuest>
function UQuestManagerComponent:GetClientQuests(PlayerState) end
---@return TArray<UQuest>
function UQuestManagerComponent:GetActiveTutorialQuests() end
---@param QuestRowHandle FDataTableRowHandle
---@param PlayerState ASurvivalPlayerState
---@param Instigator AActor
function UQuestManagerComponent:CompleteQuest(QuestRowHandle, PlayerState, Instigator) end
---@param QuestRowHandle FDataTableRowHandle
---@param QuestIndex int32
---@param PlayerState ASurvivalPlayerState
---@param Instigator AActor
function UQuestManagerComponent:CompleteObjective(QuestRowHandle, QuestIndex, PlayerState, Instigator) end
---@param QuestRowHandle FDataTableRowHandle
---@param PlayerState ASurvivalPlayerState
---@return boolean
function UQuestManagerComponent:AreAllObjectivesActiveAndComplete(QuestRowHandle, PlayerState) end
---@param QuestRowHandle FDataTableRowHandle
---@param QuestIndex int32
---@param PlayerState ASurvivalPlayerState
---@param Instigator AActor
function UQuestManagerComponent:ActivateObjective(QuestRowHandle, QuestIndex, PlayerState, Instigator) end


---@class UQuestObjectiveListItem : UGameUserWidget
---@field bNeverFade boolean
---@field BurgleNugget UBorder
---@field TutorialNugget UBorder
UQuestObjectiveListItem = {}



---@class URandomAnimEffect : UBaseAnimEffect
---@field Anims TArray<UAnimMontage>
URandomAnimEffect = {}



---@class UReactionComponent : UActorComponent
---@field OnPlayReaction FReactionComponentOnPlayReaction
---@field CurrentStunValue float
---@field MaxStunValue float
---@field StunDecayRate float
---@field StunDuration float
---@field StunCooldown float
---@field bOnlyStunFromBlocks boolean
---@field bOnlyStunWhileFlying boolean
---@field bFlinchOnTakeDamageDuringStun boolean
---@field StunState EStunState
---@field StaggerThreshold int32
---@field StaggerCooldown float
---@field FlinchAnim UBaseAnimEffect
---@field StunAnim UBaseAnimEffect
---@field StaggerAnim UBaseAnimEffect
---@field Capture UBaseAnimEffect
---@field StunEffect UVisualEffect
UReactionComponent = {}

---@param PrevStunState EStunState
function UReactionComponent:OnRep_StunState(PrevStunState) end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function UReactionComponent:OnHit(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@param NewHealthState EHealthState
function UReactionComponent:OnHealthStateChanged(NewHealthState) end
---@param Character ACharacter
---@param PrevMovementMode EMovementMode
---@param PreviousCustomMode uint8
function UReactionComponent:OnCharacterMovementChanged(Character, PrevMovementMode, PreviousCustomMode) end
---@return boolean
function UReactionComponent:IsStunned() end
---@return EStunState
function UReactionComponent:GetStunState() end
---@return float
function UReactionComponent:GetStunRatio() end
---@return float
function UReactionComponent:GetStunDuration() end
---@return float
function UReactionComponent:GetMaxStun() end
---@return boolean
function UReactionComponent:CanBeStunned() end
function UReactionComponent:BeginStun() end


---@class URecreateActorOperation : UBaseUndoOperation
URecreateActorOperation = {}


---@class URelocateUndoOperation : UBaseUndoOperation
URelocateUndoOperation = {}


---@class URenderStateManager : UObject
URenderStateManager = {}


---@class URenderTargetManagerComponent : UActorComponent
---@field ManagedRenderTargets TArray<FManagedRenderTarget>
URenderTargetManagerComponent = {}

---@return boolean
function URenderTargetManagerComponent:IsLowEndPlatform() end


---@class UReplicationGraphNode_AlwaysRelevant_ForConnection_Maine : UReplicationGraphNode_ActorList
---@field PastRelevantActors TArray<FMaineAlwaysRelevantActorInfo>
UReplicationGraphNode_AlwaysRelevant_ForConnection_Maine = {}



---@class UResourceSurveyComponent : UActorComponent
---@field OnSurveyedResourceChanged FResourceSurveyComponentOnSurveyedResourceChanged
---@field OnRescan FResourceSurveyComponentOnRescan
---@field SurveyWindow TSoftClassPtr<UWindowWidget>
---@field SurveyedResource FDataTableRowHandle_NetCrc
---@field BucketSize float
---@field BucketColorCap int32
---@field EmptyBucketColor FColor
---@field HeatmapTexture UTexture2D
---@field RegionsTexture UTexture2D
---@field LastScanRealTime float
---@field LastScanWorldHours float
---@field LastScanPlayerName FString
---@field ScanInterval float
---@field ReplicationData TArray<FResourceSurveyReplicationData>
---@field ActiveOrigins TArray<UResourceSurveyOriginComponent>
UResourceSurveyComponent = {}

---@param Source UObject
function UResourceSurveyComponent:UnregisterManualSource(Source) end
function UResourceSurveyComponent:ToggleScanEverything() end
function UResourceSurveyComponent:ShowSurveyingInterface() end
---@param Source UObject
function UResourceSurveyComponent:RegisterManualSource(Source) end
function UResourceSurveyComponent:OnRep_SurveyedResource() end
function UResourceSurveyComponent:OnRep_ActiveOrigins() end
---@param StartIndex int32
---@param Buffer TArray<uint8>
function UResourceSurveyComponent:MulticastReplicateDataChunk(StartIndex, Buffer) end
function UResourceSurveyComponent:MulticastNotifyRescan() end
function UResourceSurveyComponent:MulticastNotifyEmptyRescan() end
---@return FDataTableRowHandle
function UResourceSurveyComponent:GetSurveyedResource() end
---@return UTexture2D
function UResourceSurveyComponent:GetSurveyedRegionTexture() end
---@return TArray<FDataTableRowHandle>
function UResourceSurveyComponent:GetSurveyableItems() end
---@return float
function UResourceSurveyComponent:GetLastScanWorldHours() end
---@return FString
function UResourceSurveyComponent:GetLastScanPlayerName() end
---@return UTexture2D
function UResourceSurveyComponent:GetHeatmapTexture() end
function UResourceSurveyComponent:ActivateAllSurveyors() end


---@class UResourceSurveyOriginComponent : USceneComponent
---@field ScanRadius float
UResourceSurveyOriginComponent = {}



---@class URestCutsceneDataAsset : URestDataAssetBase
---@field RestCutsceneDataAsset UCutsceneDataAsset
URestCutsceneDataAsset = {}



---@class URestDataAssetBase : UDataAsset
---@field Conversation FConversationReference
---@field GlobalVariableConditional FGlobalVariableReferenceConditional
---@field GlobalVariable FGlobalVariableReference
---@field NewGlobalValue int32
---@field IncrementGlobalVariable FGlobalVariableReference
---@field AdditionalPostRestGlobalSets TArray<FGlobalVariableSetCommand>
URestDataAssetBase = {}



---@class URestMovieDataAsset : URestDataAssetBase
---@field RestMovie UFileMediaSource
URestMovieDataAsset = {}



---@class USMInstancerCommandlet : UCommandlet
USMInstancerCommandlet = {}


---@class USMInstancerWidget : UUserWidget
---@field InstanceButton UButton
---@field InstanceAllButton UButton
---@field DeinstanceButton UButton
---@field DeinstanceAllButton UButton
---@field Config USMInstancingWidgetConfig
---@field AdvancedConfig USMInstancingWidgetAdvancedConfig
USMInstancerWidget = {}



---@class USMInstancingWidgetAdvancedConfig : UDataAsset
---@field Enabled boolean
---@field GlobalConfig FStaticMeshInstancingData
---@field LevelToAdd UWorld
---@field PerLevelConfig TMap<FString, FStaticMeshInstancingData>
USMInstancingWidgetAdvancedConfig = {}



---@class USMInstancingWidgetConfig : UDataAsset
---@field Level UWorld
---@field ExcludedLevelToAdd UWorld
---@field LevelName FString
---@field ExcludedLevels TArray<FString>
---@field ExcludedMeshToAdd UStaticMesh
---@field ExcludedMeshes TArray<FString>
---@field StaticMesh UStaticMesh
---@field NoSourceControl boolean
---@field ConvertSublevels boolean
---@field InstancingComponentType EInstancingComponentType
---@field ClusterMethod EInstancingClusterMethod
---@field BatchRadius float
---@field NoLightBakeLevelToAdd UWorld
---@field NoLightBakeLevels TArray<FString>
USMInstancingWidgetConfig = {}



---@class USaveGameHeaderData : UObject
---@field BuildNumberString FString
---@field SaveGameVersion int32
---@field SaveGameHeaderVersionData int32
---@field SaveGameType ESaveGameType
---@field AutoSaveIndex int32
---@field PlaythroughGuid FGuid
---@field TimeOfSave FDateTime
---@field GameDay int32
---@field GameHour int32
---@field GameMinute int32
---@field LevelName FString
---@field ZoneRowHandle FDataTableRowHandle
---@field GameMode EGameMode
---@field GameType EGameType
---@field GamePackageType EGamePackageType
---@field GameContentType EGameContentType
---@field LastSavePlayerCountType ESaveGamePlayerCountType
---@field SaveName FString
---@field PlaythroughName FString
---@field NewGamePlusVersion int32
---@field SaveFilePath FString
---@field SaveFolderName FString
---@field ScreenshotBufferData TArray<uint8>
---@field PlaygroundsBufferData TArray<uint8>
---@field SaveGameValidity ESaveGameHeaderDataValidity
---@field SharedSaveState ESharedSaveState
---@field SharedSaveAdminLevel ESharedSavePermissionsLevel
---@field SharedSaveID FString
---@field SharedSaveOwner FString
---@field CurrentSharedSaveHostName FString
---@field CurrentSharedSaveHostId FString
---@field PreviousSharedSaveHostId FString
---@field SharedSaveValidBackupID FGuid
---@field UserMapCode FString
---@field UserMapSaveType EUserMapSaveType
---@field UserMapAuthor FString
---@field bCanEditUserMap boolean
---@field bUserMapUpdateAvailable boolean
---@field PlaygroundsPlayerCount EPlaygroundsPlayerCount
---@field PlaygroundsGenreTags TArray<EPlaygroundsGenreTag>
---@field PlaygroundsDescription FString
---@field PlaygroundsDescriptionFiltered FString
---@field LocalUserMapRating EUserMapRating
---@field UserMapUpvoteCount int32
---@field UserMapDownvoteCount int32
---@field PlaygroundsStartTime double
---@field PlaygroundsDefaultMusic FDataTableRowHandle
---@field PlaygroundsBuildingDamage boolean
---@field NumBuildingActors int32
---@field NumBuildingInstances int32
---@field NumLODActors int32
---@field NumSpawnedItemLODActors int32
---@field NumPlaceableStaticMeshActors int32
---@field UserMapAuthorPsnId FString
---@field UserMapAuthorNintendoId FString
---@field UserMapAuthorNativeNickname FString
USaveGameHeaderData = {}

---@return boolean
function USaveGameHeaderData:PublishedUserMapExistsForSave() end
---@return boolean
function USaveGameHeaderData:IsUserMapSave() end
---@return boolean
function USaveGameHeaderData:IsSharedSaveBackup() end
---@return boolean
function USaveGameHeaderData:IsSharedSave() end
---@return boolean
function USaveGameHeaderData:IsPublishedUserMapSave() end
---@return boolean
function USaveGameHeaderData:IsDownloadedUserMapSave() end
---@return boolean
function USaveGameHeaderData:HasAssignedGenreTag() end
---@return FString
function USaveGameHeaderData:GetUserMapServerID() end
---@return EUserMapPublishPermissionsLevel
function USaveGameHeaderData:GetUserMapPublishPermissions() end
---@return FString
function USaveGameHeaderData:GetUserMapCode() end
---@return FString
function USaveGameHeaderData:GetSaveGameScreenshotPath() end
---@return int32
function USaveGameHeaderData:GetPublishedUserMapVersion() end
---@return FString
function USaveGameHeaderData:GetPlaygroundsDescription() end
---@return int32
function USaveGameHeaderData:GetNumUserMapDownloads() end


---@class USaveGameSlotWidget : UGameUserWidget
USaveGameSlotWidget = {}


---@class USaveLiteDataRegistryCommandlet : UCommandlet
USaveLiteDataRegistryCommandlet = {}


---@class USaveLoadManager : UObject
---@field SaveInProgressSaveGameHeaderData USaveGameHeaderData
---@field OnSaveBegin FSaveLoadManagerOnSaveBegin
---@field OnSaveFailDueToNoSpace FSaveLoadManagerOnSaveFailDueToNoSpace
---@field OnSaveComplete FSaveLoadManagerOnSaveComplete
---@field OnHeaderDataUpdateComplete FSaveLoadManagerOnHeaderDataUpdateComplete
---@field OnActiveUserChanged FSaveLoadManagerOnActiveUserChanged
---@field OnLoadComplete FSaveLoadManagerOnLoadComplete
---@field OnDeleteComplete FSaveLoadManagerOnDeleteComplete
---@field OnSaveGameHeadersLoadedComplete FSaveLoadManagerOnSaveGameHeadersLoadedComplete
---@field OnCheckIfNeedsSaveConversionComplete FSaveLoadManagerOnCheckIfNeedsSaveConversionComplete
---@field OnConvertOldSavesComplete FSaveLoadManagerOnConvertOldSavesComplete
---@field OnUserGameSettingsLoadComplete FSaveLoadManagerOnUserGameSettingsLoadComplete
---@field SaveGameHeaderDatas TArray<USaveGameHeaderData>
---@field bSaveDataExceededLimitFailure boolean
---@field SaveDataToLoad USaveGameHeaderData
---@field QuickLoadSaveData USaveGameHeaderData
---@field ScreenshotRenderTarget UTextureRenderTarget2D
---@field MaineSettings UMaineGameUserSettings
---@field GlobalSaveLoadData UGlobalSaveLoadData
---@field CurrentPlaythroughSharedSaveID FString
---@field OnSharedSaveAddAuthorizeCompleteDelegate FSaveLoadManagerOnSharedSaveAddAuthorizeCompleteDelegate
---@field OnSharedSaveRemoveAuthorizeCompleteDelegate FSaveLoadManagerOnSharedSaveRemoveAuthorizeCompleteDelegate
---@field OnSharedSaveAuthorizeFailureDelegate FSaveLoadManagerOnSharedSaveAuthorizeFailureDelegate
---@field OnServerSaveAPIStatusUpdateDelegate FSaveLoadManagerOnServerSaveAPIStatusUpdateDelegate
---@field OnUserMapPublishedComplete FSaveLoadManagerOnUserMapPublishedComplete
---@field OnUserMapVersionsSynced FSaveLoadManagerOnUserMapVersionsSynced
---@field OnUserMapDownloadCopySuccess FSaveLoadManagerOnUserMapDownloadCopySuccess
---@field OnUserMapDownloadCopyFailure FSaveLoadManagerOnUserMapDownloadCopyFailure
---@field OnUserMapUpdateExistingDownloadSuccess FSaveLoadManagerOnUserMapUpdateExistingDownloadSuccess
---@field bDownloadUserMapAsDesignCopy boolean
---@field bLoadPlaygroundAsPlaythrough boolean
---@field BrowserUserMapSaveGameHeaderDatas TArray<USaveGameHeaderData>
---@field UserMapKeywordFilter FString
---@field UserMapPlayerCountFilter EPlaygroundsPlayerCount
---@field UserMapGenreTagFilter EPlaygroundsGenreTag
---@field UserMapBrowserPage int32
USaveLoadManager = {}

---@param PlaythroughGuid FGuid
function USaveLoadManager:UpdatePlaygroundSettings(PlaythroughGuid) end
function USaveLoadManager:UnpauseSave() end
function USaveLoadManager:SyncUserMapSaves() end
function USaveLoadManager:SyncSharedSaves() end
---@param Category EUserMapBrowserCategory
function USaveLoadManager:SyncBrowserUserMapSaves(Category) end
function USaveLoadManager:SignalSharedSaveHeartbeat() end
---@param SaveGame USaveGameHeaderData
---@return boolean
function USaveLoadManager:ShouldShowSaveInUI(SaveGame) end
---@return boolean
function USaveLoadManager:ShouldRestorePersistence() end
function USaveLoadManager:SharedSavedStopPost() end
---@param UserMapCode FString
---@param Rating EUserMapRating
function USaveLoadManager:SetUserMapSaveRatingScore(UserMapCode, Rating) end
---@param PlayerCount EPlaygroundsPlayerCount
function USaveLoadManager:SetUserMapPlayerCountFilter(PlayerCount) end
---@param GenreTag EPlaygroundsGenreTag
function USaveLoadManager:SetUserMapGenreTagFilter(GenreTag) end
---@param KeywordFilter FString
---@param PlayerCountFilter EPlaygroundsPlayerCount
---@param GenreTagFilter EPlaygroundsGenreTag
function USaveLoadManager:SetUserMapFilters(KeywordFilter, PlayerCountFilter, GenreTagFilter) end
---@param PageNum int32
function USaveLoadManager:SetUserMapBrowserPage(PageNum) end
function USaveLoadManager:SetSaveGameHeaderDatasRequireLoad() end
---@param IsUsingSharedSaves boolean
function USaveLoadManager:SetCurrentPlaythroughUsingSharedSaves(IsUsingSharedSaves) end
function USaveLoadManager:SaveUserGameSettings() end
---@param SaveGameType ESaveGameType
function USaveLoadManager:Save(SaveGameType) end
---@param PlayerController APlayerController
---@return EPlayerRestoreResult
function USaveLoadManager:RestoreNewPlayerFromController(PlayerController) end
function USaveLoadManager:ResetUserMapFilters() end
function USaveLoadManager:RequestAutoSave() end
---@param UserMapCode FString
---@param ReportReason EUserMapReportReason
function USaveLoadManager:ReportUserMapSave(UserMapCode, ReportReason) end
---@param HeaderData USaveGameHeaderData
---@param NewSaveName FString
function USaveLoadManager:RenameSave(HeaderData, NewSaveName) end
---@param PlaythroughGrid FGuid
---@param NewPlaythroughName FString
function USaveLoadManager:RenamePlaythrough(PlaythroughGrid, NewPlaythroughName) end
---@param PlayerController ASurvivalPlayerController
function USaveLoadManager:RemovePlayerFile(PlayerController) end
---@param Save USaveGameHeaderData
function USaveLoadManager:PublishSaveAsUserMap(Save) end
---@param PlaythroughGuid FGuid
---@return boolean
function USaveLoadManager:PlaythroughContainsEarlyAccessSave(PlaythroughGuid) end
function USaveLoadManager:PauseSave() end
function USaveLoadManager:LoadUserGameSettings() end
function USaveLoadManager:LoadSaveGameHeaderDatas() end
---@param SaveGameHeader USaveGameHeaderData
---@return boolean
function USaveLoadManager:Load(SaveGameHeader) end
---@param ServerId FString
---@return boolean
function USaveLoadManager:IsUserMapOwnPublishedPlayground(ServerId) end
---@return boolean
function USaveLoadManager:IsSyncingSharedSaves() end
---@param xuid FString
---@param Username FString
---@param SharedSaveID FString
---@return boolean
function USaveLoadManager:IsSharedSaveBeingHostedBy(xuid, Username, SharedSaveID) end
---@param SaveGameHeaderData USaveGameHeaderData
---@return boolean
function USaveLoadManager:IsSaveFromEarlyAccess(SaveGameHeaderData) end
---@return boolean
function USaveLoadManager:IsRenamingSharedSavesEnabled() end
---@return boolean
function USaveLoadManager:IsProcessingServerSaveCommand() end
---@param PlaythroughGuid FGuid
---@return boolean
function USaveLoadManager:IsPlaythroughSharedWorld(PlaythroughGuid) end
---@return boolean
function USaveLoadManager:IsLoadingPlaygroundAsPlaythrough() end
---@param VersionToCheck FGameVersion
---@return boolean
function USaveLoadManager:IsLoadingGameVersionLessThan(VersionToCheck) end
---@return boolean
function USaveLoadManager:IsLoading() end
---@return boolean
function USaveLoadManager:IsCurrentPlaythroughUsingSharedSaves() end
function USaveLoadManager:InitDynamicMemoryLimit() end
function USaveLoadManager:IncrementUserMapBrowserPage() end
---@return boolean
function USaveLoadManager:HasReachedMaxPublishedUserMapSaves() end
---@return boolean
function USaveLoadManager:HasEnoughStorageForNewSave() end
---@return boolean
function USaveLoadManager:HasEarlyAccessSave() end
function USaveLoadManager:HandleSaveConversion() end
function USaveLoadManager:HandleCheckIfNeedsSaveConversion() end
---@return EServerSaveAPIStatus
function USaveLoadManager:GetUserMapSaveAPIStatus() end
---@param SharedSaveID FString
---@return TArray<FString>
function USaveLoadManager:GetSharedSaveUsers(SharedSaveID) end
---@param SharedSaveID FString
---@return TArray<FString>
function USaveLoadManager:GetSharedSaveUserIDs(SharedSaveID) end
---@param xuid FString
---@param Username FString
---@param SharedSaveID FString
---@return ESharedSavePermissionsLevel
function USaveLoadManager:GetSharedSavePermissionsLevel(xuid, Username, SharedSaveID) end
---@return EServerSaveAPIStatus
function USaveLoadManager:GetSharedSaveAPIStatus() end
---@return FString
function USaveLoadManager:GetServerSaveUserID() end
---@return FString
function USaveLoadManager:GetServerSaveUserDisplayName() end
---@return USaveGameHeaderData
function USaveLoadManager:GetSaveDataToLoad() end
---@return float
function USaveLoadManager:GetSaveConvertPercentage() end
---@return int64
function USaveLoadManager:GetRemainingStorage() end
---@param PlaythroughGuid FGuid
---@param IncludeEarlyAccessSaves boolean
---@return USaveGameHeaderData
function USaveLoadManager:GetOldestSaveForPlaythrough(PlaythroughGuid, IncludeEarlyAccessSaves) end
---@param PlaythroughGuid FGuid
---@param IncludeEarlyAccessSaves boolean
---@return int32
function USaveLoadManager:GetNumSavesForPlaythrough(PlaythroughGuid, IncludeEarlyAccessSaves) end
---@return int32
function USaveLoadManager:GetNumberOfPublishedUserMapSaves() end
---@return int32
function USaveLoadManager:GetNumberOfOwnedSharedSaves() end
---@return int32
function USaveLoadManager:GetMaxNumberOfPublishedUserMapSaves() end
---@param SharedSaveID FString
---@return USaveGameHeaderData
function USaveLoadManager:GetMasterSharedSaveForID(SharedSaveID) end
---@param SharedSave USaveGameHeaderData
---@return USaveGameHeaderData
function USaveLoadManager:GetLocalBackupSaveForSharedWorldSave(SharedSave) end
---@return ESharedSavePermissionsLevel
function USaveLoadManager:GetCurrentPlaythroughSharedSavePermissionsLevel() end
---@param HeaderData USaveGameHeaderData
---@return FString
function USaveLoadManager:ExportSave(HeaderData) end
---@return boolean
function USaveLoadManager:EnsureSignIn() end
---@param Code FString
---@param bAsDesignCopy boolean
function USaveLoadManager:DownloadUserMapCopyViaCode(Code, bAsDesignCopy) end
---@param UserMapSave USaveGameHeaderData
---@param bAsDesignCopy boolean
function USaveLoadManager:DownloadUserMapCopy(UserMapSave, bAsDesignCopy) end
---@return boolean
function USaveLoadManager:DoSaveGameHeaderDatasRequireLoad() end
---@return boolean
function USaveLoadManager:DidLoadFromSaveGame() end
---@param UserMapSaveID FString
function USaveLoadManager:DeleteFromUserMapServer(UserMapSaveID) end
function USaveLoadManager:DeleteAllSharedSavesSelf() end
---@param SaveGameHeader USaveGameHeaderData
function USaveLoadManager:Delete(SaveGameHeader) end
function USaveLoadManager:DecrementUserMapBrowserPage() end
---@param SharedSaveID FString
function USaveLoadManager:DeauthorizeSharedSaveUserSelf(SharedSaveID) end
---@param xuid FString
---@param SharedSaveID FString
function USaveLoadManager:DeauthorizeSharedSaveUser(xuid, SharedSaveID) end
---@param PublishedUserMap USaveGameHeaderData
function USaveLoadManager:CreateUserMapCopyAndServerDelete(PublishedUserMap) end
---@param SharedSave USaveGameHeaderData
function USaveLoadManager:CreateStandardSaveCopyAndDelete(SharedSave) end
---@param SharedSave USaveGameHeaderData
function USaveLoadManager:CreateStandardSaveCopy(SharedSave) end
---@param StandardSave USaveGameHeaderData
function USaveLoadManager:ConvertStandardSaveToSharedSave(StandardSave) end
function USaveLoadManager:ClearQuickLoadSaveHandle() end
---@param SaveGameType ESaveGameType
---@return ESaveLoadRestriction
function USaveLoadManager:CanSaveGame(SaveGameType) end
---@param SaveGameType ESaveGameType
---@return boolean
function USaveLoadManager:CanSave(SaveGameType) end
---@param SaveGame USaveGameHeaderData
---@return boolean
function USaveLoadManager:CanLoadSharedSave(SaveGame) end
---@return boolean
function USaveLoadManager:CanLoad() end
---@return boolean
function USaveLoadManager:CanDelete() end
---@param xuid FString
---@param Username FString
---@param SharedSaveID FString
function USaveLoadManager:AuthorizeSharedSaveUser(xuid, Username, SharedSaveID) end


---@class USaveLoadWidget : UWindowWidget
---@field ImportSaveButton UUserWidget
---@field SaveLoadMenuMode ESaveLoadMenuMode
---@field SaveLoadGameTypeMode ESaveLoadGameTypeMode
---@field CommunityPlaygroundsCategory EUserMapBrowserCategory
USaveLoadWidget = {}

function USaveLoadWidget:TrySyncCloudSaveData() end
---@param MenuMode ESaveLoadMenuMode
---@param GameTypeMode ESaveLoadGameTypeMode
function USaveLoadWidget:SetMenuMode(MenuMode, GameTypeMode) end
---@param Category EUserMapBrowserCategory
function USaveLoadWidget:SetCommunityPlaygroundsCatagory(Category) end
---@return EImportSaveResult
function USaveLoadWidget:OpenImportSaveDialog() end
function USaveLoadWidget:OnSaveDataExceededLimitFailure() end
function USaveLoadWidget:OnMenuModeSet() end
function USaveLoadWidget:OnCommunityPlaygroundsCategorySet() end
---@param SharedSaveUserID FString
---@param saveId FString
function USaveLoadWidget:DeauthorizeFriendFromSharedSave(SharedSaveUserID, saveId) end
---@param xuid FString
---@param Username FString
---@param saveId FString
function USaveLoadWidget:AuthorizeFriendForSharedSave(xuid, Username, saveId) end


---@class USaveReader : UObject
USaveReader = {}


---@class USaveWriter : UObject
USaveWriter = {}


---@class USceneLODComponent : UBaseLODComponent
USceneLODComponent = {}


---@class UScienceCollectableLODActor : UBaseLODActor
UScienceCollectableLODActor = {}


---@class UScienceCollectableLiteData : UActorLiteData
---@field ScienceAmount int32
---@field LODFullActorMaxDistance float
UScienceCollectableLiteData = {}



---@class UScreenEffectComponent : UActorComponent
---@field OwnerCharacter ASurvivalCharacter
---@field CameraComponents TArray<UCameraComponent>
UScreenEffectComponent = {}

---@param Owner AActor
---@param StatusEffect UStatusEffect
function UScreenEffectComponent:OnStatusEffectRemoved(Owner, StatusEffect) end
---@param Owner AActor
---@param StatusEffect UStatusEffect
function UScreenEffectComponent:OnStatusEffectAdded(Owner, StatusEffect) end
---@param ScreenEffectData UScreenEffectData
function UScreenEffectComponent:EndScreenEffect(ScreenEffectData) end
---@param ScreenEffectData UScreenEffectData
---@param Direction FVector
function UScreenEffectComponent:BeginScreenEffectWithDirection(ScreenEffectData, Direction) end
---@param ScreenEffectData UScreenEffectData
function UScreenEffectComponent:BeginScreenEffect(ScreenEffectData) end


---@class UScreenEffectData : UDataAsset
---@field MaterialParameterCollection UMaterialParameterCollection
---@field PostProcessMaterial UObject
---@field DisplayType EScreenEffectType
---@field IntensityCurve FRuntimeFloatCurve
---@field MaterialParameterIntensityScalar float
---@field ChromaticAberrationIntensityScalar float
UScreenEffectData = {}



---@class UScripts : UScriptLibrary
UScripts = {}

function UScripts:WendellMarkInteractionUsed() end
function UScripts:WendellFollowListener() end
function UScripts:OpenUpgradesUIForConversationOwner() end
function UScripts:OpenScienceStoreUIForConversationOwner() end
function UScripts:OpenBurgleQuestUIForConversationOwner() end
---@param Object FGuid
function UScripts:LogObject(Object) end
function UScripts:GiveSpeakerTechChip() end
function UScripts:GiveSpeakerSuperTechChip() end
function UScripts:GiveSpeakerAllNormalTechChips() end
function UScripts:EndEarlyAccessContent() end


---@class UServerBrowserWidget : UWindowWidget
UServerBrowserWidget = {}

---@param Session FBlueprintSessionResult
function UServerBrowserWidget:ViewPlayerProfileFromSession(Session) end


---@class USettingsButton : UBaseSettingsWidget
---@field Button UGameButtonWidget
USettingsButton = {}



---@class USimplePhysicsBaseLODActor : UBaseLODActor
USimplePhysicsBaseLODActor = {}


---@class USimplePhysicsBaseLiteData : UActorLiteData
---@field LODFullActorMaxDistance float
USimplePhysicsBaseLiteData = {}



---@class USoftPointerFunctionLibrary : UBlueprintFunctionLibrary
USoftPointerFunctionLibrary = {}

---@param MeshComponent UStaticMeshComponent
---@param SoftMesh TSoftObjectPtr<UStaticMesh>
---@param SoftMaterials TArray<TSoftObjectPtr<UMaterialInterface>>
function USoftPointerFunctionLibrary:SetStaticMeshFromSoft(MeshComponent, SoftMesh, SoftMaterials) end


---@class USpawnedItemDropletLODActor : USpawnedItemLODActor
USpawnedItemDropletLODActor = {}


---@class USpawnedItemDropletLiteData : USpawnedItemLiteData
---@field UnfrozenReplacement TSoftClassPtr<ASpawnedItemDroplet>
USpawnedItemDropletLiteData = {}



---@class USpawnedItemLODActor : UPlaceableLODActor
USpawnedItemLODActor = {}

---@return UItem
function USpawnedItemLODActor:GetItem() end


---@class USpawnedItemLiteData : UActorLiteData
---@field PlacedItemData FDataTableRowHandle
---@field GameLifetimeHours float
---@field OverrideGameHourLifetime float
---@field bUseOverrideGameHourLifetime boolean
---@field bLifetimeDespawnWhenProxiedOnly boolean
---@field MeshComponentHeight float
---@field BlueprintMesh TSoftObjectPtr<UStreamableRenderAsset>
---@field BlueprintMaterials TArray<TSoftObjectPtr<UMaterialInterface>>
USpawnedItemLiteData = {}



---@class USpawnedWave : UObject
---@field DestroyedBuildings TMap<int32, FDestroyedBuildingsData>
---@field TargetBaseInitialBuildingCount int32
USpawnedWave = {}



---@class USpeakerFunctionLibrary : UBlueprintFunctionLibrary
USpeakerFunctionLibrary = {}

---@param Bundle FSpeakerBundle
---@return FString
function USpeakerFunctionLibrary:GetSpeakerBundleVOPrefix(Bundle) end
---@param Bundle FSpeakerBundle
---@return FString
function USpeakerFunctionLibrary:GetSpeakerBundleObjectName(Bundle) end
---@param Bundle FSpeakerBundle
---@return boolean
function USpeakerFunctionLibrary:GetSpeakerBundleIsUniqueNPC(Bundle) end
---@param Bundle FSpeakerBundle
---@return FGuid
function USpeakerFunctionLibrary:GetSpeakerBundleID(Bundle) end
---@param Bundle FSpeakerBundle
---@return EOEIGender
function USpeakerFunctionLibrary:GetSpeakerBundleGender(Bundle) end
---@param Bundle FSpeakerBundle
---@return FLocString
function USpeakerFunctionLibrary:GetSpeakerBundleDisplayName(Bundle) end
---@param Bundle FSpeakerBundle
---@return FGuid
function USpeakerFunctionLibrary:GetSpeakerBundleChatterFileID(Bundle) end


---@class UStaminaComponent : UActorComponent
---@field OnStaminaDepleted FStaminaComponentOnStaminaDepleted
---@field CurrentStamina float
---@field MaxStamina float
---@field RegenDelay float
---@field RegenRate float
---@field ExhaustedStaminaDelay float
---@field bExhausted boolean
---@field StaminaToHungerRatio float
UStaminaComponent = {}

function UStaminaComponent:Restore() end
function UStaminaComponent:OnStatusEffectChanged() end
---@param RestDuration float
function UStaminaComponent:OnRest(RestDuration) end
---@param PrevStamina float
function UStaminaComponent:OnRep_CurrentStamina(PrevStamina) end
---@return boolean
function UStaminaComponent:IsStaminaCapped() end
---@return boolean
function UStaminaComponent:IsEmpty() end
---@return float
function UStaminaComponent:GetStaminaRatio() end
---@return float
function UStaminaComponent:GetMaxStaminaCapped() end
---@return float
function UStaminaComponent:GetMaxStamina() end
---@return float
function UStaminaComponent:GetEnergyRatio() end
---@return float
function UStaminaComponent:GetCurrentStamina() end
---@param AmountToConsume float
function UStaminaComponent:ConsumeStamina(AmountToConsume) end
---@return boolean
function UStaminaComponent:CanRegenerate() end
---@param AmountToAdd float
function UStaminaComponent:AddStamina(AmountToAdd) end


---@class UStaminaReadoutWidget : UGameUserWidget
---@field LastStamina float
---@field CurrentDisplayedStamina float
---@field StaminaRatio float
UStaminaReadoutWidget = {}

function UStaminaReadoutWidget:UpdateStaminaAnim() end
---@param NewRatio float
function UStaminaReadoutWidget:CheckStaminaRatio(NewRatio) end


---@class UStatBaseDefenseWin : UPlayerStatConfig
UStatBaseDefenseWin = {}


---@class UStatBasketballShotConfig : UPlayerStatConfig
UStatBasketballShotConfig = {}


---@class UStatBlockConfig : UPlayerStatConfig
---@field BlockType EBlockType
---@field bTrackCurrentInARowOnly boolean
UStatBlockConfig = {}



---@class UStatCozinessConfig : UPlayerStatConfig
UStatCozinessConfig = {}


---@class UStatCraftConfig : UStatItemConfig
UStatCraftConfig = {}


---@class UStatDeathConfig : UPlayerStatConfig
UStatDeathConfig = {}


---@class UStatDefensePointConfig : UPlayerStatConfig
UStatDefensePointConfig = {}


---@class UStatDiscoverConfig : UPlayerStatConfig
---@field PointOfInterestData UPointOfInterestDataAsset
---@field Tags FGameplayTagContainer
UStatDiscoverConfig = {}



---@class UStatItemConfig : UPlayerStatConfig
---@field TargetItem FDataTableRowHandle
---@field Tags FGameplayTagContainer
UStatItemConfig = {}



---@class UStatKillConfig : UPlayerStatConfig
---@field TargetClass TSoftClassPtr<ASurvivalCharacter>
---@field TargetTags FGameplayTagContainer
---@field AttackTags FGameplayTagContainer
UStatKillConfig = {}



---@class UStatPhotoConfig : UPlayerStatConfig
UStatPhotoConfig = {}


---@class UStatPickupConfig : UStatItemConfig
UStatPickupConfig = {}


---@class UStatProcessItemConfig : UPlayerStatConfig
---@field TargetProcessingBuildingTypes FGameplayTagContainer
---@field TargetItem FDataTableRowHandle
---@field ItemTags FGameplayTagContainer
UStatProcessItemConfig = {}



---@class UStatRangedAttackConfig : UPlayerStatConfig
---@field TargetHitCharacterClass TSoftClassPtr<ASurvivalCharacter>
---@field TargetCharacterTags FGameplayTagContainer
---@field TargetTags FGameplayTagContainer
---@field bRequiresKillingBlow boolean
---@field bTrackMaxDistance boolean
UStatRangedAttackConfig = {}



---@class UStatReviveConfig : UPlayerStatConfig
UStatReviveConfig = {}


---@class UStatScriptedConfig : UPlayerStatConfig
UStatScriptedConfig = {}


---@class UStatStaminaConfig : UPlayerStatConfig
UStatStaminaConfig = {}


---@class UStatTamePetConfig : UPlayerStatConfig
---@field TargetClass TSoftClassPtr<ASurvivalCreature>
---@field TargetTags FGameplayTagContainer
UStatTamePetConfig = {}



---@class UStatUseItemConfig : UStatItemConfig
UStatUseItemConfig = {}


---@class UStatWeaknessHits : UPlayerStatConfig
UStatWeaknessHits = {}


---@class UStatWeakpointHits : UPlayerStatConfig
UStatWeakpointHits = {}


---@class UStatZiplineDistanceConfig : UPlayerStatConfig
---@field bTrackMaxDistanceOnly boolean
UStatZiplineDistanceConfig = {}



---@class UStaticMeshReportCommandlet : UCommandlet
UStaticMeshReportCommandlet = {}


---@class UStatusEffect : UObject
---@field StatusEffectRowHandle FDataTableRowHandle_NetCrc
---@field TimeElapsed float
---@field bEnabled boolean
---@field ResetTime int32
---@field TriggeredAttack UAttack
---@field OriginType EStatusEffectOriginType
---@field OnStatusEffectTimerReset FStatusEffectOnStatusEffectTimerReset
UStatusEffect = {}

---@return boolean
function UStatusEffect:ShowInUI() end
---@param PreviousHandle FDataTableRowHandle_NetCrc
function UStatusEffect:OnRep_StatusEffectRowHandle(PreviousHandle) end
function UStatusEffect:OnRep_ResetTime() end
---@return float
function UStatusEffect:GetTimeRemaining() end
---@return float
function UStatusEffect:GetTimeElapsed() end
---@return EStatusEffectType
function UStatusEffect:GetStatusEffectType() end
---@return EStatusEffectOriginType
function UStatusEffect:GetOriginType() end
---@return FGameplayTagContainer
function UStatusEffect:GetEffectTags() end
---@return EStatusEffectDurationType
function UStatusEffect:GetDurationType() end
---@return float
function UStatusEffect:GetDuration() end
---@return FDataTableRowHandle
function UStatusEffect:GetDataHandle() end
---@return EStatusEffectApplyType
function UStatusEffect:GetApplicationType() end


---@class UStatusEffectComponent : UActorComponent
---@field OnStatusEffectsChanged FStatusEffectComponentOnStatusEffectsChanged
---@field OnStatusEffectAdded FStatusEffectComponentOnStatusEffectAdded
---@field OnStatusEffectRemoved FStatusEffectComponentOnStatusEffectRemoved
---@field DefaultStatusEffects TArray<FDataTableRowHandle>
---@field NewGamePlusStatusEffects TMap<int32, FDataTableRowHandle>
---@field ImmunityTags FGameplayTagContainer
---@field StatusEffects TArray<UStatusEffect>
---@field InfiniteDefaultStatusEffects TArray<UStatusEffect>
---@field SerializedStatusEffects TArray<UStatusEffect>
UStatusEffectComponent = {}

---@param StatusEffect UStatusEffect
---@param bBroadcastChangedEvent boolean
function UStatusEffectComponent:RemoveEffect(StatusEffect, bBroadcastChangedEvent) end
---@param RestDuration float
function UStatusEffectComponent:OnRest(RestDuration) end
---@param PreviousStatusEffects TArray<UStatusEffect>
function UStatusEffectComponent:OnRep_StatusEffects(PreviousStatusEffects) end
---@param NewHealthState EHealthState
function UStatusEffectComponent:OnHealthStateChange(NewHealthState) end
---@param Item UItem
---@param Slot EEquipmentSlot
function UStatusEffectComponent:OnEquipmentSlotChange(Item, Slot) end
---@param bbIsDayTime boolean
function UStatusEffectComponent:OnDayNightChange(bbIsDayTime) end
---@param Character ASurvivalCharacter
---@param bInCombat boolean
function UStatusEffectComponent:OnCombatChange(Character, bInCombat) end
---@param EffectTag FGameplayTag
---@return boolean
function UStatusEffectComponent:HasStatusEffectTag(EffectTag) end
---@param StatType EStatusEffectType
---@return boolean
function UStatusEffectComponent:HasStatusEffectOfType(StatType) end
---@param StatType EStatusEffectType
---@param DamageType TSubclassOf<USurvivalDamageType>
---@return boolean
function UStatusEffectComponent:HasStatusEffectOfDamageType(StatType, DamageType) end
---@param EffectTags FGameplayTagContainer
---@return boolean
function UStatusEffectComponent:HasAnyStatusEffectTag(EffectTags) end
---@param StatType EStatusEffectType
---@param ExtraData FDataTableRowHandle
---@return float
function UStatusEffectComponent:GetValueForStatWithExtraData(StatType, ExtraData) end
---@param StatType EStatusEffectType
---@param Flags int32
---@return float
function UStatusEffectComponent:GetValueForStatForDamageTypeFlags(StatType, Flags) end
---@param StatType EStatusEffectType
---@param DamageInfo FDamageInfo
---@return float
function UStatusEffectComponent:GetValueForStatForDamageInfo(StatType, DamageInfo) end
---@param StatType EStatusEffectType
---@param TargetToCheck AActor
---@return float
function UStatusEffectComponent:GetValueForStatForApplicationTags(StatType, TargetToCheck) end
---@param StatType EStatusEffectType
---@return float
function UStatusEffectComponent:GetValueForStat(StatType) end
---@return TArray<UStatusEffect>
function UStatusEffectComponent:GetStatusEffects() end
---@param StatType EStatusEffectType
---@return int32
function UStatusEffectComponent:GetNumStatusEffectOfType(StatType) end
---@return TArray<FDataTableRowHandle>
function UStatusEffectComponent:GetDefaultStatusEffects() end
---@return TArray<UStatusEffect>
function UStatusEffectComponent:GetAllStatusEffects() end
---@param StatusEffectRowHandle FDataTableRowHandle
---@return UStatusEffect
function UStatusEffectComponent:CreateAndAddEffect(StatusEffectRowHandle) end
---@param StatusEffectRowHandle FDataTableRowHandle
---@return boolean
function UStatusEffectComponent:CanAddEffect(StatusEffectRowHandle) end
---@param StatusEffect UStatusEffect
function UStatusEffectComponent:AddEffect(StatusEffect) end


---@class UStatusEffectTimerWidget : UGameUserWidget
---@field TimerFill UImage
---@field StatusEffectIcon UImage
---@field MatchingStatusEffects TArray<UStatusEffect>
---@field bNegativeEffect boolean
UStatusEffectTimerWidget = {}

---@return UStatusEffect
function UStatusEffectTimerWidget:GetFirstStatusEffectNative() end
---@return UStatusEffect
function UStatusEffectTimerWidget:GetEffectWithLongestTimerNative() end


---@class USteamAccountLinkWidget : UGameUserWidget
USteamAccountLinkWidget = {}

---@param ErrorCode EAccountLinkErrorCode
function USteamAccountLinkWidget:SetFailureErrorString(ErrorCode) end
---@param Error EAccountLinkErrorCode
function USteamAccountLinkWidget:OnSetError(Error) end


---@class UStickiedObjectiveWidget : UGameUserWidget
---@field bShouldShow boolean
---@field ReminderTimer float
---@field AlphaTimer float
---@field CritPathObjectiveOpacity float
---@field BurglObjectiveOpacity float
---@field ActiveQuests TArray<UBaseQuest>
---@field ObjectiveList UVerticalBox
---@field ObjectiveNotificationWidget UObjectiveNotificationWidget
---@field Show UWidgetAnimation
---@field Hide UWidgetAnimation
UStickiedObjectiveWidget = {}

function UStickiedObjectiveWidget:UpdateVisibilityNative() end
---@param DeltaTime float
function UStickiedObjectiveWidget:UpdateQuestAlphaNative(DeltaTime) end
function UStickiedObjectiveWidget:ShowQuestReminderNative() end


---@class UStreamingFunctionLibrary : UBlueprintFunctionLibrary
UStreamingFunctionLibrary = {}


---@class USubtitleWindow : UWindowWidget
USubtitleWindow = {}

---@return boolean
function USubtitleWindow:ShouldShowSubtitles() end
---@param SubtitleVerbosity ESubtitleVerbositySettings
function USubtitleWindow:OnSubtitleVerbosityChanged(SubtitleVerbosity) end
function USubtitleWindow:OnPhotoModeExited() end
---@param PhotoPawn APhotoPawn
function USubtitleWindow:OnPhotoModeEntered(PhotoPawn) end
---@param bShowSubtitles boolean
function USubtitleWindow:OnGameUIShowSubtitlesChanged(bShowSubtitles) end
---@param bShowSubtitles boolean
function USubtitleWindow:HandleShowSubtitlesChanged(bShowSubtitles) end


---@class USurfaceEffectData : UDataAsset
---@field DefaultEffect FSurfaceEffect
---@field OverrideEffects TArray<FSurfaceEffect>
USurfaceEffectData = {}



---@class USurvivalAutoPlayer : UObject
USurvivalAutoPlayer = {}

function USurvivalAutoPlayer:StopAutoPlayer() end
function USurvivalAutoPlayer:StartAutoPlayer() end
---@param Result ESaveGameResult
---@param SaveType ESaveGameType
function USurvivalAutoPlayer:OnAsyncSaveComplete(Result, SaveType) end


---@class USurvivalAutoPlayerTestSettings : UDeveloperSettings
---@field bUseFixedRandomSeed boolean
---@field FixedRandomSeed int32
---@field bUsedFixedPlaythroughID boolean
---@field FixedPlaythroughGuid FGuid
---@field DeltaTimeCap float
---@field bDisableTimeCapIfLowFramerate boolean
---@field DisableTimeCapFrameCount int32
---@field TestLevels TArray<TSoftObjectPtr<UWorld>>
---@field bEnableTraveling boolean
---@field MinTravelTime float
---@field MaxTravelTime float
---@field bAllowTravelingToCurrentMap boolean
---@field bCanReturnToMainMenu boolean
---@field ChanceToReturnToMenu float
---@field MainMenuSoakTime float
---@field bEnableQuickSave boolean
---@field bEnableQuickSaveLoad boolean
---@field bOnlyLoadQuickSavesMadeOnCurrentMap boolean
---@field MinQuickSaveWaitTime float
---@field MaxQuickSaveWaitTime float
---@field MinQuickLoadWaitTime float
---@field MaxQuickLoadWaitTime float
---@field bGhost boolean
---@field bEnableRandomPathing boolean
---@field PathingNewLocationRadius float
---@field PathingNewLocationHeightVariance float
---@field bFaceAlongPath boolean
---@field bTeleportIfStuckPathing boolean
---@field PathingStuckTeleportRadius float
---@field PathingVisitedTileSize float
---@field PathingGoalProjectionExtents float
---@field PathingVisitingRadius float
---@field bAllowControlRotationSnapping boolean
---@field MinSnapRotationWaitTime float
---@field MaxSnapRotationWaitTime float
---@field SnapRotationAxis FVector
---@field MinSnapRotationAmount float
---@field MaxSnapRotationAmount float
---@field bEnableTeleporting boolean
---@field bTeleportPlaceOnGround boolean
---@field TeleportHeight float
---@field TeleportNewLocationDistance float
---@field MinTeleportWaitTime float
---@field MaxTeleportWaitTime float
---@field bGodMode boolean
---@field bResurrect boolean
---@field bAttackAI boolean
---@field MaximumAttackDistance float
---@field bOnlyAttackEnemies boolean
---@field MinAttackWaitTime float
---@field MaxAttackWaitTime float
---@field bEnableWeaponSwapping boolean
---@field MinWeaponSwapWaitTime float
---@field MaxWeaponSwapWaitTime float
---@field bEnableArmorSwapping boolean
---@field MinArmorSwapWaitTime float
---@field MaxArmorSwapWaitTime float
---@field bEnableScreenshots boolean
---@field ScreenshotRate float
---@field NumberOfScreenshotsToKeep int32
---@field ScreenshotDirectoryOverride FDirectoryPath
---@field bEnableMemoryInfoLogging boolean
---@field MemoryInfoLogRate float
---@field bLogMemoryInfoOnMapLoad boolean
---@field bConsoleCommandsEnabled boolean
---@field ConsoleCommandProperties TArray<FAutoConsoleCommandProperties>
---@field bInfoTrackingEnabled boolean
---@field InfoTrackingRate float
---@field bAddReportTimeColumn boolean
---@field bAddEngineRuntimeColumn boolean
---@field bAddTestRuntimeColumn boolean
---@field bAddCurrentMapColumn boolean
---@field bAddReportTimeAndMapColumn boolean
---@field bAddEngineRuntimeAndMapColumn boolean
---@field bAddRuntimeAndMapColumn boolean
---@field bAddPlayerLocationColumn boolean
---@field bTrackRenderTargetPoolUsage boolean
---@field bTrackAudioMemoryUsage boolean
---@field bTrackMemoryUsageInformation boolean
---@field bTrackMemoryStatInformation boolean
---@field bTrackTextureStreamingInformation boolean
---@field bTryToFilterStatErrors boolean
---@field StatsToTrack TArray<FString>
---@field bGenerateMemoryReports boolean
---@field MemoryReportCommands TArray<FString>
---@field MemoryPeakIncreaseReportThreshold float
---@field MemoryUtilizationReportThreshold float
---@field ExtraMemoryUtilizationReportAmount float
---@field TexturePoolUtilizationReportThreadhold float
---@field ExtraTexturePoolUtilizationReportAmount float
---@field UtilizationReportThresholdResetTime float
---@field TexturePoolOverBudgetReportRate float
---@field bInputEnabled boolean
---@field RandomInputKeyProperties TArray<FAutoRandomInputProperties>
---@field EquipmentProperties TArray<FAutoEquipmentProperties>
USurvivalAutoPlayerTestSettings = {}



---@class USurvivalCharacterDataFunctionLibrary : UBlueprintFunctionLibrary
USurvivalCharacterDataFunctionLibrary = {}

---@param CharacterData FSurvivalCharacterData
---@param FilterText FString
---@return boolean
function USurvivalCharacterDataFunctionLibrary:GetCharacterDataFilterMatches(CharacterData, FilterText) end


---@class USurvivalCharacterLiteData : UActorLiteData
---@field ProxyStandInClass TSubclassOf<AProxyStandInActor>
---@field CharacterDataRow FDataTableRowHandle
---@field TypeName FLocString
---@field bShouldActorLOD boolean
---@field MaxFullActorDistance float
---@field AverageDamage float
---@field ActivePetPassiveEffects TArray<FDataTableRowHandle>
---@field WaveWeightClass EWaveCreatureWeightClass
---@field NavAgentProperties FNavAgentProperties
---@field DefaultHalfHeight float
---@field MaxSwimSpeed float
---@field MaxFlySpeed float
---@field MaxWalkSpeed float
---@field RotationRate FRotator
---@field bIsFlyer boolean
---@field bIsSwimmer boolean
---@field bHasAttacks boolean
---@field bIsLargeCreature boolean
---@field SkeletalMeshOffset FVector
---@field MaxPitch float
---@field InMotionWiggleAmplitude float
---@field IdleWiggleAmplitude float
---@field DefaultStatusEffects TArray<FDataTableRowHandle>
---@field bHasController boolean
---@field bIsStationary boolean
---@field TetherRange float
---@field WanderRange float
---@field DefaultBehaviorType EDefaultBehaviorType
---@field ExploreMinAltitude float
---@field ExploreMaxAltitude float
---@field bHasInterestComponent boolean
---@field Interest FInterestConfig
USurvivalCharacterLiteData = {}



---@class USurvivalCheatManager : UCheatManager
USurvivalCheatManager = {}

function USurvivalCheatManager:WendellFollow() end
---@param RecipeName FName
function USurvivalCheatManager:UnlockRecipe(RecipeName) end
---@param UpgradeName FName
function USurvivalCheatManager:UnlockPlayerUpgrade(UpgradeName) end
function USurvivalCheatManager:UnlockMonthlyTechTrees() end
---@param ItemStackTag FGameplayTag
function USurvivalCheatManager:UnlockItemStackUpgrade(ItemStackTag) end
function USurvivalCheatManager:UnlockAllTechTrees() end
function USurvivalCheatManager:UnlockAllTechTreeRecipes() end
---@param Mode RecipeUnlockMode
function USurvivalCheatManager:UnlockAllRecipes(Mode) end
function USurvivalCheatManager:UnlockAllPOIs() end
function USurvivalCheatManager:UnlockAllPerks() end
function USurvivalCheatManager:UnlockAllKeyItems() end
function USurvivalCheatManager:UnlockAllColorThemes() end
function USurvivalCheatManager:TryKill() end
---@param DamageAmount float
function USurvivalCheatManager:TryDamage(DamageAmount) end
function USurvivalCheatManager:ToggleSubtitles() end
function USurvivalCheatManager:ToggleSpawnPointDebug() end
function USurvivalCheatManager:TogglePlayerSpectatorMode() end
function USurvivalCheatManager:ToggleHUD() end
function USurvivalCheatManager:ToggleCameraShake() end
function USurvivalCheatManager:ToggleAlternateRecipeMode() end
---@param Multiplier float
function USurvivalCheatManager:TimeSpeed(Multiplier) end
---@param Level int32
function USurvivalCheatManager:TestNewGamePlusIntro(Level) end
function USurvivalCheatManager:TeleportPartyToMe() end
function USurvivalCheatManager:TameNearest() end
---@param Radius float
function USurvivalCheatManager:SwapNearbyFoliage(Radius) end
---@param Enabled boolean
function USurvivalCheatManager:Stamina(Enabled) end
---@param EncounterName FString
function USurvivalCheatManager:SpawnEncounter(EncounterName) end
function USurvivalCheatManager:SpawnBird() end
function USurvivalCheatManager:ShowWaveStats() end
function USurvivalCheatManager:ShowActorPlacement() end
---@param bSetting boolean
function USurvivalCheatManager:SetWideInteraction(bSetting) end
---@param Hour int32
---@param Lock boolean
function USurvivalCheatManager:SetTime(Hour, Lock) end
---@param LevelName FString
function USurvivalCheatManager:SetOverrideLevelName(LevelName) end
---@param bShouldKill boolean
function USurvivalCheatManager:SetHungerThirstKill(bShouldKill) end
---@param Global FString
---@param Value int32
function USurvivalCheatManager:SetGlobalValue(Global, Value) end
---@param Mode EEditMode
function USurvivalCheatManager:SetEditMode(Mode) end
---@param Count int32
function USurvivalCheatManager:SetCompletedBurgleQuestCount(Count) end
---@param EnhancementTag FGameplayTag
---@param BonusEnhancementLevel int32
function USurvivalCheatManager:SetBonusEnhancementLevel(EnhancementTag, BonusEnhancementLevel) end
---@param BaseEnhancementLevel int32
function USurvivalCheatManager:SetBaseEnhancementLevel(BaseEnhancementLevel) end
---@param Level int32
function USurvivalCheatManager:SetArachnophobiaSafeMode(Level) end
function USurvivalCheatManager:Revive() end
function USurvivalCheatManager:ResetConversations() end
function USurvivalCheatManager:ResearchAllItems() end
function USurvivalCheatManager:RepairAllItems() end
function USurvivalCheatManager:RecoverBackpacks() end
function USurvivalCheatManager:PopulationMonitorDump() end
---@param Log FString
function USurvivalCheatManager:MakeNote(Log) end
function USurvivalCheatManager:LogFactionReputations() end
function USurvivalCheatManager:LogActorAndFoliageCount() end
function USurvivalCheatManager:InfiniteDamage() end
---@param ItemName FName
---@param Quantity int32
function USurvivalCheatManager:GiveItem(ItemName, Quantity) end
function USurvivalCheatManager:FullRestore() end
---@param Freeze boolean
function USurvivalCheatManager:FreezePlayerSizzle(Freeze) end
---@param TeamName FGameplayTag
---@param Heat int32
function USurvivalCheatManager:ForceSpawnWave(TeamName, Heat) end
function USurvivalCheatManager:ForceRegenerateBurgleQuests() end
function USurvivalCheatManager:ForceEndWave() end
function USurvivalCheatManager:Fish() end
function USurvivalCheatManager:Fireproof() end
---@param PheromoneTag FGameplayTag
function USurvivalCheatManager:FillPheromoneBroadcasters(PheromoneTag) end
---@param ItemName FName
function USurvivalCheatManager:EquipItem(ItemName) end
function USurvivalCheatManager:DumpPreplacedNotProxyableObjects() end
function USurvivalCheatManager:DumpOnlyRelevantToOwnerClasses() end
function USurvivalCheatManager:DumpMobileReplicatedActors() end
function USurvivalCheatManager:DumpAlwaysReplicatedClasses() end
function USurvivalCheatManager:DestroyCreaturesHalf() end
---@param BlueprintName FString
function USurvivalCheatManager:DestroyAllCreaturesExcept(BlueprintName) end
function USurvivalCheatManager:CompleteActiveDefensePoint() end
function USurvivalCheatManager:ClearWaveCooldown() end
---@param Radius float
function USurvivalCheatManager:Clean(Radius) end
function USurvivalCheatManager:BuildAllBuildings() end
function USurvivalCheatManager:BreakAllItems() end
function USurvivalCheatManager:AlmostBreakAllItems() end
---@param Hour int32
function USurvivalCheatManager:AdvanceTimeToHour(Hour) end
---@param Hours float
function USurvivalCheatManager:AdvanceTimeByHours(Hours) end
---@param StatusEffectName FName
function USurvivalCheatManager:AddStatusEffect(StatusEffectName) end
---@param Amount int32
function USurvivalCheatManager:AddScience(Amount) end
---@param Faction FGameplayTag
---@param Value int32
function USurvivalCheatManager:AddReputation(Faction, Value) end
---@param Amount int32
function USurvivalCheatManager:AddPersonalUpgradePoints(Amount) end
---@param Amount int32
function USurvivalCheatManager:AddPartyUpgradePoints(Amount) end


---@class USurvivalComponent : UActorComponent
---@field OnFoodChanged FSurvivalComponentOnFoodChanged
---@field OnWaterChanged FSurvivalComponentOnWaterChanged
---@field HungerSettings FSurvivalTraitSettings
---@field ThirstSettings FSurvivalTraitSettings
---@field BreathSettings FBreathSettings
---@field CurrentFood float
---@field CurrentWater float
---@field CurrentBreath float
---@field MinimumRestPercentage float
---@field RestRateMultiplier float
---@field bKillOnEmptyFoodOrWater boolean
---@field DeathDelayTime float
---@field DeathTimer float
---@field DeathVignetteIntensityCurve FRuntimeFloatCurve
---@field OnRest FSurvivalComponentOnRest
---@field PassiveHungerEffect UOverTimeEffect
---@field PassiveThirstEffect UOverTimeEffect
---@field HungerDamageEffect UStatusEffect
---@field HungerBonusEffect UStatusEffect
---@field ThirstDamageEffect UStatusEffect
---@field ThirstBonusEffect UStatusEffect
---@field BreathDamageEffect UStatusEffect
USurvivalComponent = {}

---@param NewWaterLevel float
function USurvivalComponent:SetCurrentWater(NewWaterLevel) end
---@param NewSizzle float
function USurvivalComponent:SetCurrentSizzle(NewSizzle) end
---@param NewFoodLevel float
function USurvivalComponent:SetCurrentFood(NewFoodLevel) end
---@param NewBreath float
function USurvivalComponent:SetCurrentBreath(NewBreath) end
---@param BreathAmount float
function USurvivalComponent:RestoreBreath(BreathAmount) end
function USurvivalComponent:RestoreAll() end
---@param RestDuration float
function USurvivalComponent:Rest(RestDuration) end
function USurvivalComponent:OnStatusEffectsChanged() end
---@param PrevWater float
function USurvivalComponent:OnRep_CurrentWater(PrevWater) end
---@param PrevFood float
function USurvivalComponent:OnRep_CurrentFood(PrevFood) end
function USurvivalComponent:OnGameModeChanged() end
---@return boolean
function USurvivalComponent:IsFullBreath() end
---@return boolean
function USurvivalComponent:IsFoodOrWaterEmpty() end
---@return float
function USurvivalComponent:GetThirstRatio() end
---@return float
function USurvivalComponent:GetHungerRatio() end
---@return float
function USurvivalComponent:GetDeathSecondsTimerRatio() end
---@return int32
function USurvivalComponent:GetDeathSecondsLeft() end
---@return float
function USurvivalComponent:GetCurrentSizzleRatio() end
---@return int32
function USurvivalComponent:GetBreathSecondsLeft() end
---@return float
function USurvivalComponent:GetBreathRatio() end
---@return int32
function USurvivalComponent:GetBreathAlertTime() end
---@return float
function USurvivalComponent:GetBreathAdjustmentRate() end
---@return boolean
function USurvivalComponent:CanBreathe() end
---@param WaterAmount float
function USurvivalComponent:AddWater(WaterAmount) end
---@param FoodAmount float
function USurvivalComponent:AddFood(FoodAmount) end


---@class USurvivalDamageType : UDamageType
---@field LocalizedDisplayName FLocString
---@field Icons TArray<UObject>
---@field DamageTypeFlags uint32
---@field bCanBlock boolean
---@field bCanBlockWithWeapon boolean
---@field bCanApplyDamageReduction boolean
---@field bCanPlayHitReaction boolean
---@field bDamageDurability boolean
---@field bCanKill boolean
---@field bCanRepair boolean
---@field DeathNotification FDataTableRowHandle
USurvivalDamageType = {}

---@param Flag ESurvivalDamageTypeFlags
---@return boolean
function USurvivalDamageType:HasDamageTypeFlag(Flag) end
---@param Flag int32
---@return boolean
function USurvivalDamageType:HasAnyDamageTypeFlag(Flag) end
---@return UObject
function USurvivalDamageType:GetFirstIcon() end


---@class USurvivalGameInstance : UGameInstance
---@field ExpectedPlayersAfterLoadScreen TArray<EPlayerCharacterIdentity>
---@field OnAllPlayersLoadedDelegate FSurvivalGameInstanceOnAllPlayersLoadedDelegate
---@field OnUsingGamepadChanged FSurvivalGameInstanceOnUsingGamepadChanged
---@field OnGameInputTypeChanged FSurvivalGameInstanceOnGameInputTypeChanged
---@field OnAnyKeyPressed FSurvivalGameInstanceOnAnyKeyPressed
---@field OnHostGameFailure FSurvivalGameInstanceOnHostGameFailure
---@field OnJoinGameFailure FSurvivalGameInstanceOnJoinGameFailure
---@field OnAcceptOnlineInvite FSurvivalGameInstanceOnAcceptOnlineInvite
---@field OnJoinOnlineInvite FSurvivalGameInstanceOnJoinOnlineInvite
---@field OnReceiveOnlineInvite FSurvivalGameInstanceOnReceiveOnlineInvite
---@field OnProfileLoggedOut FSurvivalGameInstanceOnProfileLoggedOut
---@field bIsUsingGamepadControls boolean
---@field CurrentGameInputType EGameInputType
---@field GameOptions UGameOptions
---@field WidgetManager UWidgetManager
---@field NarrationConfig UInterfaceNarrationConfig
---@field GlobalBuildingData UGlobalBuildingData
---@field GlobalCombatData UGlobalCombatData
---@field GlobalItemData UGlobalItemData
---@field GlobalUIData UGlobalUIData
---@field GlobalAIData UGlobalAIData
---@field GlobalAudioData UGlobalAudioData
---@field GlobalControlsData UGlobalControlsData
---@field GlobalFoliageData UGlobalFoliageData
---@field GlobalTableData UGlobalTableData
---@field GlobalPlayerData UGlobalPlayerData
---@field GlobalSaveLoadData UGlobalSaveLoadData
---@field GlobalLiteData UGlobalLiteData
---@field ProfanityFilter UProfanityFilter
---@field FoliageMappings TMap<TSoftObjectPtr<UStaticMesh>, FFoliageMapping>
---@field CompanyIntroLevel TSoftObjectPtr<UWorld>
---@field MainMenuLevel TSoftObjectPtr<UWorld>
---@field LobbyLevel TSoftObjectPtr<UWorld>
---@field GameLevelDevelopmentName FString
---@field GameLevelReleaseName FString
---@field EmptyCreativeLevel TSoftObjectPtr<UWorld>
---@field LevelData TMap<FGameplayTag, FLevelData>
---@field DefaultLevelTag FGameplayTag
---@field DefaultPlaygroundLevelTag FGameplayTag
---@field DroppedScience TSubclassOf<AScienceCollectable>
---@field GenericDeathNotificationDataHandle FDataTableRowHandle
---@field PvpDeathNotificationDataHandle FDataTableRowHandle
---@field PlayerColors TArray<FColor>
---@field DefaultGameModes TMap<EGameMode, TSubclassOf<USurvivalGameModeSettings>>
---@field RestCancelDistance float
---@field RestCancelTimeout float
---@field SaveLoadManager USaveLoadManager
---@field InterfaceNarrationManager UInterfaceNarrationManager
---@field AnalyticsManager UMaineAnalyticsManager
---@field MusicManager UMusicManager
---@field GoapActionCacheData UGoapActionCacheData
---@field GoapActionCache UGoapActionCache
---@field IsSinglePlayer boolean
---@field NewGameType EGameType
---@field PasswordProtectedGameSelected boolean
---@field ForceShowLoginUIRequested boolean
---@field HasVisitedMenuLevel boolean
---@field SelectedGameMode EGameMode
---@field CustomGameModeSettings FCustomGameModeSettings
---@field NewGamePlusSettings UNewGamePlusSettings
---@field CachedMeshVolumes TMap<UStaticMesh, float>
---@field AutoPlayer USurvivalAutoPlayer
---@field MemoryReport USurvivalMemoryReport
---@field PhysicsStateManager UPhysicsStateManager
---@field RenderStateManager URenderStateManager
---@field EditorOverrideContentType EGameContentType
---@field EditorOverridePackageType EGamePackageType
---@field PhotoModeConfiguration UPhotoModeConfiguration
---@field HandheldModeChangedDelegate FSurvivalGameInstanceHandheldModeChangedDelegate
---@field bIsHandheldMode boolean
---@field StencilStandIns TArray<AStencilStandInActor>
---@field InstancedStaticMeshComponentsForDisplaceLevel TMap<EFoliageSwapLevel, FISMList>
---@field PlayerDistanceSwappableFoliageComponents TArray<UInstancedStaticMeshComponent>
---@field IsInMapLoad boolean
USurvivalGameInstance = {}

function USurvivalGameInstance:ValidateColorTheme() end
---@return boolean
function USurvivalGameInstance:UserLoggedIntoValidProfile() end
---@param ActorToUpdate AActor
---@param ComponentToUpdate UPrimitiveComponent
function USurvivalGameInstance:UpdateOverlapCullDistanceVolume(ActorToUpdate, ComponentToUpdate) end
---@param WorldContextObject UObject
function USurvivalGameInstance:UpdateCullDistances(WorldContextObject) end
---@param LocalUserNum int32
function USurvivalGameInstance:UnlinkMicrosoftAccount(LocalUserNum) end
---@param resumeIntent ECrossplayResumeIntent
function USurvivalGameInstance:ToggleCrossplayAndSetIntent(resumeIntent) end
---@param activityID FString
function USurvivalGameInstance:StartActivity(activityID) end
---@param Index int32
function USurvivalGameInstance:SetUIThemeByIndex(Index) end
---@param Theme TSubclassOf<UGlobalColorTheme>
function USurvivalGameInstance:SetUITheme(Theme) end
---@param GameMode EGameMode
function USurvivalGameInstance:SetSelectedGameMode(GameMode) end
---@param LoadLevelTag FGameplayTag
function USurvivalGameInstance:SetPendingLevelTag(LoadLevelTag) end
---@param Password FString
function USurvivalGameInstance:SetOnlineGamePassword(Password) end
---@param Index int32
function USurvivalGameInstance:SetNightUIThemeByIndex(Index) end
---@param Theme TSubclassOf<UGlobalColorTheme>
function USurvivalGameInstance:SetNightUITheme(Theme) end
---@param CustomSettings FCustomGameModeSettings
function USurvivalGameInstance:SetCustomGameSettings(CustomSettings) end
---@param NewValue ECrossplayResumeIntent
function USurvivalGameInstance:SetCrossplayResumeIntent(NewValue) end
function USurvivalGameInstance:ServerTravelToGameLevel() end
---@param activityID FString
function USurvivalGameInstance:ResumeActivity(activityID) end
function USurvivalGameInstance:ResetGameState() end
function USurvivalGameInstance:ResetCustomGameSettings() end
function USurvivalGameInstance:RequestReconnect() end
---@param WorldContextObject UObject
---@param SpecificPlayer APlayerController
function USurvivalGameInstance:QuitToDesktop(WorldContextObject, SpecificPlayer) end
---@param LevelName FName
function USurvivalGameInstance:OpenLevel(LevelName) end
---@param NewSharedSaveStatus EServerSaveAPIStatus
---@param ServerSaveAPIType EServerSaveAPIType
function USurvivalGameInstance:OnServerSaveAPIStatusUpdate(NewSharedSaveStatus, ServerSaveAPIType) end
function USurvivalGameInstance:OnInitializeStringCrcTable() end
---@param IgnoreList TArray<FName>
function USurvivalGameInstance:OnGetIgnoredStringCrcTableAudioPaths(IgnoreList) end
---@param IgnoreList TArray<FName>
function USurvivalGameInstance:OnGetIgnoredStringCrcTableAssetClasses(IgnoreList) end
function USurvivalGameInstance:NotifyOnlineConnectionLost() end
function USurvivalGameInstance:NotifyMPGameConnectionLost() end
function USurvivalGameInstance:LoadMainMenuLevel() end
function USurvivalGameInstance:LoadLobbyLevel() end
function USurvivalGameInstance:JoinPendingAcceptedInvite() end
---@param SessionResult FBlueprintSessionResult
function USurvivalGameInstance:JoinOnlineSession(SessionResult) end
---@return boolean
function USurvivalGameInstance:IsUsingGamepadControls() end
---@return boolean
function USurvivalGameInstance:IsSelectedLevelStory() end
---@return boolean
function USurvivalGameInstance:IsPlatformLoggedIn() end
---@return boolean
function USurvivalGameInstance:IsPendingAcceptedInviteNetworkCompatible() end
---@param showErrors boolean
---@return boolean
function USurvivalGameInstance:IsNetworkConnectionStatusOnline(showErrors) end
---@return boolean
function USurvivalGameInstance:IsMainMenuInOnlineRequiredState() end
---@return boolean
function USurvivalGameInstance:IsLoadingMap() end
---@param Invite FBlueprintSessionResult
---@return boolean
function USurvivalGameInstance:IsInviteNetworkCompatible(Invite) end
---@param StaticMesh UStaticMesh
---@return boolean
function USurvivalGameInstance:IsGroundFoliage(StaticMesh) end
---@return boolean
function USurvivalGameInstance:IsCurrentLevelMenuLevel() end
---@return boolean
function USurvivalGameInstance:IsCurrentLevelMainMenuLevel() end
---@return boolean
function USurvivalGameInstance:IsCurrentLevelLobbyLevel() end
---@param bByPassRecache boolean
---@return boolean
function USurvivalGameInstance:IsCurrentLevelGameOrLobby(bByPassRecache) end
---@return boolean
function USurvivalGameInstance:IsCurrentLevelEmptyCreativeLevel() end
---@param bIsLAN boolean
---@param bIsPresence boolean
---@param bPasswordProtected boolean
---@param MaxNumPlayers int32
---@param SessionMemoryUsage int32
---@param DestinationLevelName FString
---@return boolean
function USurvivalGameInstance:HostSession(bIsLAN, bIsPresence, bPasswordProtected, MaxNumPlayers, SessionMemoryUsage, DestinationLevelName) end
---@return boolean
function USurvivalGameInstance:HasPendingAcceptedInvite() end
---@return boolean
function USurvivalGameInstance:HasAllPlayersFinishedLoading() end
---@param Value float
function USurvivalGameInstance:HandleVOIPVolumeChanged(Value) end
---@param Value float
function USurvivalGameInstance:HandleVoiceVolumeChanged(Value) end
---@param Value float
function USurvivalGameInstance:HandleUIVolumeChanged(Value) end
---@param SinglePlayer boolean
function USurvivalGameInstance:HandleSetIsSinglePlayer(SinglePlayer) end
---@param Name FString
function USurvivalGameInstance:HandleReadToMeVoiceChanged(Name) end
---@param Speed float
function USurvivalGameInstance:HandleReadToMeSpeedChanged(Speed) end
---@param bReadToMe boolean
function USurvivalGameInstance:HandleReadToMeChanged(bReadToMe) end
---@param Value float
function USurvivalGameInstance:HandleNarrationVolumeChanged(Value) end
---@param Value float
function USurvivalGameInstance:HandleMusicVolumeChanged(Value) end
---@param Value float
function USurvivalGameInstance:HandleMasterVolumeChanged(Value) end
---@param Value float
function USurvivalGameInstance:HandleEffectsVolumeChanged(Value) end
---@param bEnabled boolean
function USurvivalGameInstance:HandleChatTextToSpeechChanged(bEnabled) end
---@param bEnabled boolean
function USurvivalGameInstance:HandleChatSpeechToTextChanged(bEnabled) end
---@param Value float
function USurvivalGameInstance:HandleAmbienceVolumeChanged(Value) end
---@return TArray<TSubclassOf<UGlobalColorTheme>>
function USurvivalGameInstance:GetUnlockedUIThemes() end
---@return TSubclassOf<UGlobalColorTheme>
function USurvivalGameInstance:GetUITheme() end
---@param Mesh UStaticMesh
---@param Transform FTransform
---@param ZPlane float
---@param CenterOfMass FVector
---@return float
function USurvivalGameInstance:GetSubmergedVolume(Mesh, Transform, ZPlane, CenterOfMass) end
---@param Mesh UStaticMesh
---@param Transform FTransform
---@param ZPlane float
---@param CenterOfMass FVector
---@return float
function USurvivalGameInstance:GetSubmergedCollisionVolume(Mesh, Transform, ZPlane, CenterOfMass) end
---@param FoliageKey FFoliageKey
---@param BuildingKey FBuildingGridBuildingId
---@return AStencilStandInActor
function USurvivalGameInstance:GetStencilStandInActorWithKey(FoliageKey, BuildingKey) end
---@return AStencilStandInActor
function USurvivalGameInstance:GetStencilStandInActor() end
---@param Mesh UStaticMesh
---@return float
function USurvivalGameInstance:GetStaticMeshVolume(Mesh) end
---@return FLevelData
function USurvivalGameInstance:GetSelectedLevelData() end
---@return TSubclassOf<USurvivalGameModeSettings>
function USurvivalGameInstance:GetSelectedGameModeClass() end
---@param Tag FGameplayTag
---@param Data FPowerTypeData
---@return boolean
function USurvivalGameInstance:GetPowerTypeData(Tag, Data) end
---@return TSubclassOf<UGlobalColorTheme>
function USurvivalGameInstance:GetNightUITheme() end
---@return UNewGamePlusSettings
function USurvivalGameInstance:GetNewGamePlusSettings() end
---@param LevelName FString
---@return FGameplayTag
function USurvivalGameInstance:GetLevelTagForLevelName(LevelName) end
---@param HitResult FHitResult
---@return TSubclassOf<AActor>
function USurvivalGameInstance:GetInstancedBlueprintFromHitResult(HitResult) end
---@return FText
function USurvivalGameInstance:GetGameVersionStringWithTags() end
---@return FString
function USurvivalGameInstance:GetGameVersionString() end
---@param ItemRowHandle FDataTableRowHandle
---@param bForObjective boolean
---@return TArray<TSoftObjectPtr<UStaticMesh>>
function USurvivalGameInstance:GetFoliageMeshesFromItemHandle(ItemRowHandle, bForObjective) end
---@param StaticMesh UStaticMesh
---@param ClimberTag FGameplayTag
---@return boolean
function USurvivalGameInstance:GetFoliageIsClimbable(StaticMesh, ClimberTag) end
---@param StaticMesh UStaticMesh
---@param RoleTag FGameplayTag
---@return boolean
function USurvivalGameInstance:GetFoliageHasClimbRole(StaticMesh, RoleTag) end
---@param StaticMesh UStaticMesh
---@return TArray<UActorComponent>
function USurvivalGameInstance:GetFoliageClimbableSplines(StaticMesh) end
---@param StaticMesh UStaticMesh
---@return TSubclassOf<AActor>
function USurvivalGameInstance:GetFoliageBlueprintFromStaticMesh(StaticMesh) end
---@param Key FFoliageKey
---@return TSubclassOf<AActor>
function USurvivalGameInstance:GetFoliageBlueprintFromKey(Key) end
---@param FoliageType UFoliageType
---@return TSubclassOf<AActor>
function USurvivalGameInstance:GetFoliageBlueprintFromFoliageType(FoliageType) end
---@return FCustomGameModeSettings
function USurvivalGameInstance:GetCustomGameSettings() end
---@return TSubclassOf<UGlobalColorTheme>
function USurvivalGameInstance:GetCurrentUITheme() end
---@return EGameInputType
function USurvivalGameInstance:GetCurrentGameInputType() end
---@return ECrossplayResumeIntent
function USurvivalGameInstance:GetCrossplayResumeIntent() end
---@param Actor AActor
---@return TArray<UActorComponent>
function USurvivalGameInstance:GetActorClimbableSplines(Actor) end
---@return boolean
function USurvivalGameInstance:ExitOnlineSession() end
---@param InLoadedWorld UWorld
function USurvivalGameInstance:EndLoadingScreen(InLoadedWorld) end
---@param activityID FString
function USurvivalGameInstance:EndActivity(activityID) end
---@param DismissedInvite FBlueprintSessionResult
function USurvivalGameInstance:DismissInvite(DismissedInvite) end
---@param ActiveStandIn AStencilStandInActor
function USurvivalGameInstance:DisableOtherStencilStandInActors(ActiveStandIn) end
---@return boolean
function USurvivalGameInstance:ConsumeSharedSavedAPIDisabledDuringPlay() end
---@return boolean
function USurvivalGameInstance:ConsumeProfileLoggedOutDuringPlay() end
---@return boolean
function USurvivalGameInstance:ConsumeOnlineConnectionLost() end
---@param OutKickReason FText
---@return boolean
function USurvivalGameInstance:ConsumeLocalPlayerKicked(OutKickReason) end
---@return boolean
function USurvivalGameInstance:ConsumeGameWasResumedFromSuspend() end
---@return boolean
function USurvivalGameInstance:ConsumeConnectionLostDuringPlay() end
function USurvivalGameInstance:CheckInputMode() end
function USurvivalGameInstance:CheckForCloudSavePrivilegeAndFetch() end
---@param StaticMesh UStaticMesh
---@return boolean
function USurvivalGameInstance:CanSwapFoliageWithAttacks(StaticMesh) end
---@param StaticMesh UStaticMesh
---@param DamageData FDamageData
---@param Tier int32
---@return boolean
function USurvivalGameInstance:CanSwapFoliageWithAttack(StaticMesh, DamageData, Tier) end
---@param StaticMesh UStaticMesh
---@param DisplaceLevel EFoliageSwapLevel
---@return boolean
function USurvivalGameInstance:CanDisplaceFoliage(StaticMesh, DisplaceLevel) end
---@param InMapName FString
function USurvivalGameInstance:BeginLoadingScreen(InMapName) end
---@param bLoaded boolean
function USurvivalGameInstance:AllPlayersLoadedSignature__DelegateSignature(bLoaded) end
---@param AcceptedInvite FBlueprintSessionResult
function USurvivalGameInstance:AcceptInvite(AcceptedInvite) end


---@class USurvivalGameModeSettings : UObject
---@field DisplayName FLocString
---@field GameDifficulty EGameDifficulty
---@field DynamicMemoryLimitMode EDynamicMemoryLimitMode
---@field bUnlockAllRecipes boolean
---@field bAutoCompleteBuildings boolean
---@field bEnableBuildingIntegrity boolean
---@field bRecipesRequireIngredients boolean
---@field bEncountersEnabled boolean
---@field bCreaturesIgnorePlayers boolean
---@field bStaminaEnabled boolean
---@field bDamageEnabled boolean
---@field bFriendlyFire boolean
---@field bSizzleEnabled boolean
---@field bSpoilingEnabled boolean
---@field bMenusPauseGame boolean
---@field bQuestsEnabled boolean
---@field bPetInvincible boolean
---@field bWavesEnabled boolean
---@field bPerksUnlocked boolean
---@field bUpgradesUnlocked boolean
---@field bBuildModeAvailable boolean
---@field bBuildingsEnabled boolean
---@field bCraftingEnabled boolean
---@field bCreaturesFightEachOther boolean
---@field bPhotoModeEnabled boolean
---@field PlayerDamageMultiplier float
---@field EnemyDamageMultiplier float
---@field BuildingHealthMultiplier float
---@field HeatMultiplier float
---@field ItemSpoilageMultiplier float
---@field ItemDurabilityMultiplier float
---@field ItemDurabilityPenaltyOnDeathPercentage float
---@field SizzleMultiplier float
---@field TimeOfDaySpeedMultiplier float
---@field HungerMultiplier float
---@field ThirstMultiplier float
---@field ResourceRespawnMultiplier float
---@field CreatureHealthMultiplier float
---@field FallDamageMultiplier float
---@field DeathBehavior EPlayerDeathBehavior
USurvivalGameModeSettings = {}

---@return FCustomGameModeSettings
function USurvivalGameModeSettings:CreateCustomSettings() end


---@class USurvivalGameStateComponent : UActorComponent
USurvivalGameStateComponent = {}


---@class USurvivalGameplayStatics : UBlueprintFunctionLibrary
USurvivalGameplayStatics = {}

---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:WaveOrDefensePointActive(WorldContextObject) end
---@param DeltaTime float
---@param Mid UMaterialInstanceDynamic
---@param Actor AActor
---@param PreviousLocation FVector
---@return FVector
function USurvivalGameplayStatics:VertexSecondaryAnim(DeltaTime, Mid, Actor, PreviousLocation) end
---@param Actor AActor
---@param StencilMaskValue int32
function USurvivalGameplayStatics:UnregisterStencilMaskRenderer(Actor, StencilMaskValue) end
---@param Instigator ASurvivalCharacter
function USurvivalGameplayStatics:TestChatter(Instigator) end
---@param Temperature float
---@return FLinearColor
function USurvivalGameplayStatics:TemperatureToRGB(Temperature) end
---@param WorldContextObject UObject
---@param OwnerActor AActor
---@param ConversationId FGuid
---@param NodeId int32
---@param Priority EConversationPlayPriority
function USurvivalGameplayStatics:StartFieldConversation(WorldContextObject, OwnerActor, ConversationId, NodeId, Priority) end
---@param WorldContextObject UObject
---@param OwnerActor AActor
---@param ConversationId FGuid
---@param NodeId int32
---@param Priority EConversationPlayPriority
function USurvivalGameplayStatics:StartConversation(WorldContextObject, OwnerActor, ConversationId, NodeId, Priority) end
---@param WorldContextObject UObject
---@param AudioDataHandle FDataTableRowHandle
---@return UAudioComponent
function USurvivalGameplayStatics:SpawnUISound(WorldContextObject, AudioDataHandle) end
---@param WorldContextObject UObject
---@param CreatureClass TSubclassOf<ASurvivalCreature>
---@param SpawnTransform FTransform
---@param PetOwner AActor
---@return AActor
function USurvivalGameplayStatics:SpawnTamedCreature(WorldContextObject, CreatureClass, SpawnTransform, PetOwner) end
---@param Context UObject
---@param DecalMaterial UMaterialInterface
---@param DecalSize FVector
---@param Location FVector
---@param Rotation FRotator
---@param LifeSpan float
---@return ADecalActor
function USurvivalGameplayStatics:SpawnDecalActor(Context, DecalMaterial, DecalSize, Location, Rotation, LifeSpan) end
---@param WorldContextObject UObject
---@param ActorClass TSubclassOf<AActor>
---@param SpawnTransform FTransform
---@param InteractionObject AActor
---@return AActor
function USurvivalGameplayStatics:SpawnAI(WorldContextObject, ActorClass, SpawnTransform, InteractionObject) end
---@param WorldContextObject UObject
---@param ActorClass TSubclassOf<AActor>
---@param AtComponent USceneComponent
---@param AtSocket FName
---@return AActor
function USurvivalGameplayStatics:SpawnActorAtSocket(WorldContextObject, ActorClass, AtComponent, AtSocket) end
---@param WorldContextObject UObject
---@param TechTreeRecipeRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:ShouldShowTechTreeRecipeAvailableForGameMode(WorldContextObject, TechTreeRecipeRowHandle) end
---@param WorldContextObject UObject
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:ShouldShowResourceInMenu(WorldContextObject, ItemRowHandle) end
---@return boolean
function USurvivalGameplayStatics:ShouldShowCrossplayToggle() end
---@param Actor AActor
---@param bEnabled boolean
function USurvivalGameplayStatics:SetTriggerHighlight(Actor, bEnabled) end
---@param WorldContextObject UObject
---@param State boolean
function USurvivalGameplayStatics:SetRealtimeMultiplay(WorldContextObject, State) end
---@param ClipPlane float
function USurvivalGameplayStatics:SetNearClipPlane(ClipPlane) end
---@param PrimitiveComponent UPrimitiveComponent
---@param LightChannel int32
---@param ChannelActive boolean
function USurvivalGameplayStatics:SetLightChannel(PrimitiveComponent, LightChannel, ChannelActive) end
---@param Actor AActor
---@param bEnabled boolean
function USurvivalGameplayStatics:SetInteractHighlight(Actor, bEnabled) end
---@param Actor AActor
---@param Level int32
function USurvivalGameplayStatics:SetFragilityHighlight(Actor, Level) end
---@param ViewDistanceScale float
function USurvivalGameplayStatics:SetFoliageOverrideViewDistanceScale(ViewDistanceScale) end
---@param WorldContextObject UObject
---@param LevelName FString
function USurvivalGameplayStatics:ServerTravel(WorldContextObject, LevelName) end
---@param StaticMeshComponent UStaticMeshComponent
---@param StaticMesh UStaticMesh
---@param ResetMaterials boolean
function USurvivalGameplayStatics:ResetStaticMesh(StaticMeshComponent, StaticMesh, ResetMaterials) end
---@param WorldContextObject UObject
function USurvivalGameplayStatics:ResetPetLocations(WorldContextObject) end
---@param WorldContextObject UObject
---@param MaxRequiredDistanceFromPartyToResetCreatureLocation float
function USurvivalGameplayStatics:ResetCreatureLocations(WorldContextObject, MaxRequiredDistanceFromPartyToResetCreatureLocation) end
---@param Actor AActor
function USurvivalGameplayStatics:RerunConstructionScript(Actor) end
---@param Actor AActor
---@param StencilMaskValue int32
function USurvivalGameplayStatics:RegisterStencilMaskRenderer(Actor, StencilMaskValue) end
---@param WorldContextObject UObject
function USurvivalGameplayStatics:RecoverPlayerBackpacks(WorldContextObject) end
---@param WorldContextObject UObject
---@param NewViewDistanceScale float
function USurvivalGameplayStatics:PushOriginalAndSetNewViewDistanceScale(WorldContextObject, NewViewDistanceScale) end
---@param WorldContextObject UObject
function USurvivalGameplayStatics:PopOriginalViewDistanceScale(WorldContextObject) end
---@param WorldContextObject UObject
---@param AudioDataHandle FDataTableRowHandle
function USurvivalGameplayStatics:PlayUISound(WorldContextObject, AudioDataHandle) end
---@param WorldContextObject UObject
---@param Sound TSoftObjectPtr<USoundBase>
---@param Location FVector
---@param Rotation FRotator
---@param VolumeMultiplier float
---@param PitchMultiplier float
---@param StartTime float
---@param AttenuationSettings USoundAttenuation
---@param ConcurrencySettings USoundConcurrency
---@param OwningActor AActor
function USurvivalGameplayStatics:PlaySoundAtLocation(WorldContextObject, Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, OwningActor) end
---@param WorldContextObject UObject
---@param PlayerIndex int32
---@param SoundToPlay USoundBase
---@param MinSpawnDistance float
---@param MaxSpawnDistance float
function USurvivalGameplayStatics:PlayOneShotAtRandomLocationAroundPlayer(WorldContextObject, PlayerIndex, SoundToPlay, MinSpawnDistance, MaxSpawnDistance) end
---@param WorldContextObject UObject
---@param Shake TSubclassOf<UCameraShakeBase>
---@param Epicenter FVector
---@param InnerRadius float
---@param OuterRadius float
---@param Falloff float
---@param bOrientShakeTowardsEpicenter boolean
function USurvivalGameplayStatics:PlayLocalCameraShakeAtLocation(WorldContextObject, Shake, Epicenter, InnerRadius, OuterRadius, Falloff, bOrientShakeTowardsEpicenter) end
---@param WorldContextObject UObject
---@param Location FVector
---@param Distance float
---@param ChatterEvent FChatterEventReference
---@param Param1 int32
---@param Param2 int32
function USurvivalGameplayStatics:PlayChatterRandomPlayerAroundLocation(WorldContextObject, Location, Distance, ChatterEvent, Param1, Param2) end
---@param WorldContextObject UObject
---@param ChatterEvent FChatterEventReference
---@param Param1 int32
---@param Param2 int32
function USurvivalGameplayStatics:PlayChatterRandomPlayer(WorldContextObject, ChatterEvent, Param1, Param2) end
---@param Character ASurvivalCharacter
---@param SoundTag FGameplayTag
---@param AttachToComponent USceneComponent
---@param AttachPointName FName
---@param Location FVector
---@param Rotation FRotator
---@param LocationType EAttachLocation::Type
---@param bStopWhenAttachedToDestroyed boolean
---@param VolumeMultiplier float
---@param PitchMultiplier float
---@param StartTime float
---@param AttenuationSettings USoundAttenuation
---@param ConcurrencySettings USoundConcurrency
---@param bAutoDestroy boolean
function USurvivalGameplayStatics:PlayCharacterSoundAttached(Character, SoundTag, AttachToComponent, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy) end
---@param Character ASurvivalCharacter
---@param SoundTag FGameplayTag
---@param Location FVector
---@param Rotation FRotator
---@param VolumeMultiplier float
---@param PitchMultiplier float
---@param StartTime float
---@param AttenuationSettings USoundAttenuation
---@param ConcurrencySettings USoundConcurrency
function USurvivalGameplayStatics:PlayCharacterSoundAtLocation(Character, SoundTag, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings) end
---@param AttackRowHandle FDataTableRowHandle
---@param Owner AActor
---@param Outer UObject
---@return UAttack
function USurvivalGameplayStatics:NewAttack(AttackRowHandle, Owner, Outer) end
---@param Actor AActor
function USurvivalGameplayStatics:MarkPrimitiveRenderStatesDirty(Actor) end
---@param WorldContextObject UObject
---@param Content FString
function USurvivalGameplayStatics:LogUnrealInsightsBookmark(WorldContextObject, Content) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:LoadGameInProgress(WorldContextObject) end
---@param A FTransform
---@param B FTransform
---@param Alpha float
---@return FTransform
function USurvivalGameplayStatics:LerpTransforms(A, B, Alpha) end
---@param WorldContextObject UObject
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:KnowsRecipe(WorldContextObject, ItemRowHandle) end
---@return UMaineGameUserSettings
function USurvivalGameplayStatics:K2_GetMaineGameUserSettings() end
---@return boolean
function USurvivalGameplayStatics:IsXblEnabled() end
---@return boolean
function USurvivalGameplayStatics:IsWinterHoliday() end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsWakeupTimeAtNight(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsVoiceChatSupported(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsVirtualKeyboardSupported(WorldContextObject) end
---@return boolean
function USurvivalGameplayStatics:IsValentinesHoliday() end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsUsingGamepadControls(WorldContextObject) end
---@param WorldContextObject UObject
---@param TechTreeRecipeRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:IsTechTreeRecipeAvailableForGameMode(WorldContextObject, TechTreeRecipeRowHandle) end
---@return boolean
function USurvivalGameplayStatics:IsStPatricksHoliday() end
---@return boolean
function USurvivalGameplayStatics:IsSteamDeckPlatform() end
---@param Object UObject
---@return boolean
function USurvivalGameplayStatics:IsStaticObstacle(Object) end
---@param WorldContextObject UObject
---@param bReset boolean
---@return boolean
function USurvivalGameplayStatics:IsSingleplayerSaveResumeFromActivity(WorldContextObject, bReset) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsSinglePlayer(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsSavingEditModeSave(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsRestoringEditModeSave(WorldContextObject) end
---@param DataTableRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:IsRecipeRowHandle(DataTableRowHandle) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsPublicTestBuild(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsPreviewMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsPlaygroundMode(WorldContextObject) end
---@param SessionResult FBlueprintSessionResult
---@return boolean
function USurvivalGameplayStatics:IsPasswordProtectedGame(SessionResult) end
---@param Actor AActor
---@return boolean
function USurvivalGameplayStatics:IsOverlappingWaterVolume(Actor) end
---@param Component UPrimitiveComponent
---@return boolean
function USurvivalGameplayStatics:IsOverlappingBuilding(Component) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsNightTime(WorldContextObject) end
---@return boolean
function USurvivalGameplayStatics:IsNewYearHoliday() end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsNewGamePlus(WorldContextObject) end
---@param ItemRow FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:IsNaturalResource(ItemRow) end
---@return boolean
function USurvivalGameplayStatics:IsLowEndPlatform() end
---@param Actor UBaseLODActor
---@return boolean
function USurvivalGameplayStatics:IsLODActorStaticObstacle(Actor) end
---@param WorldContextObject UObject
---@param Location FVector
---@param Range float
---@return boolean
function USurvivalGameplayStatics:IsLocalPlayerInRange(WorldContextObject, Location, Range) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsLocalPlayerInBuildMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsLoadingSave(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsInCutscene(WorldContextObject) end
---@param WorldContextObject UObject
---@param Character AActor
---@return boolean
function USurvivalGameplayStatics:IsInConversation(WorldContextObject, Character) end
---@param WorldContextObject UObject
---@param Hour float
---@return boolean
function USurvivalGameplayStatics:IsHourNightTime(WorldContextObject, Hour) end
---@param WorldContextObject UObject
---@param Hour float
---@return boolean
function USurvivalGameplayStatics:IsHourDayTime(WorldContextObject, Hour) end
---@param WorldContextObject UObject
---@param SessionResult FBlueprintSessionResult
---@return boolean
function USurvivalGameplayStatics:IsHostAvailable(WorldContextObject, SessionResult) end
---@param Actor AActor
---@return boolean
function USurvivalGameplayStatics:IsHaulingItems(Actor) end
---@return boolean
function USurvivalGameplayStatics:IsHalloweenHoliday() end
---@return boolean
function USurvivalGameplayStatics:IsGDKPlatform() end
---@return boolean
function USurvivalGameplayStatics:IsGamepadAttached() end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsFlightBuild(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsEditMode(WorldContextObject) end
---@return boolean
function USurvivalGameplayStatics:IsEasterHoliday() end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsDemoMode(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsDayTime(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsCurrentLevelMenuLevel(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsCurrentLevelMainMenuLevel(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsCurrentLevelLobbyLevel(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsCurrentLevelGameLevel(WorldContextObject) end
---@return boolean
function USurvivalGameplayStatics:IsCrossplayEnabled() end
---@param DataTableRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:IsCraftingRecipeFromDataTableRowHandle(DataTableRowHandle) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsConversationPlaying(WorldContextObject) end
---@param ControlName FName
---@param bUsingGamepad boolean
---@return boolean
function USurvivalGameplayStatics:IsControlBound(ControlName, bUsingGamepad) end
---@return boolean
function USurvivalGameplayStatics:IsConsolePlatform() end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsCharacterSelectionReady(WorldContextObject) end
---@param DataTableRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:IsBuildingRecipeFromDataTableRowHandle(DataTableRowHandle) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:IsBossActive(WorldContextObject) end
---@param WorldContextObject UObject
---@param Location FVector
---@param Range float
---@return boolean
function USurvivalGameplayStatics:IsAnyPartyMemberInRange(WorldContextObject, Location, Range) end
---@param Actor AActor
---@return boolean
function USurvivalGameplayStatics:IsActorStaticObstacle(Actor) end
---@param LightComponent ULightComponent
function USurvivalGameplayStatics:InvalidateLightingCache(LightComponent) end
---@param InstigatedBy AActor
---@param PowerType FGameplayTag
---@return UItem
function USurvivalGameplayStatics:InteractShouldProvidePower(InstigatedBy, PowerType) end
---@param WorldContextObject UObject
---@param TechTreeRecipeRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:HasUnlockedTechTreeRecipe(WorldContextObject, TechTreeRecipeRowHandle) end
---@param SourceActor AActor
---@param KeyItemRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:HasKeyItem(SourceActor, KeyItemRowHandle) end
---@param WorldContextObject UObject
---@param PlayerState APlayerState
---@param ItemRowHandle FDataTableRowHandle
---@param RecipeUnlockType ERecipeUnlockType
---@return TArray<FDataTableRowHandle_NetCrc>
function USurvivalGameplayStatics:HandleRecipeUnlockFromItem(WorldContextObject, PlayerState, ItemRowHandle, RecipeUnlockType) end
---@param WorldContextObject UObject
---@param PlayerState APlayerState
---@param ItemRowHandle FDataTableRowHandle
function USurvivalGameplayStatics:HandleNewResourceNotify(WorldContextObject, PlayerState, ItemRowHandle) end
---@param WorldContextObject UObject
---@return UZoneManagerComponent
function USurvivalGameplayStatics:GetZoneManager(WorldContextObject) end
---@param InRotator FRotator
---@param Yaw float
---@param Pitch float
---@param Roll float
function USurvivalGameplayStatics:GetYawPitchRoll(InRotator, Yaw, Pitch, Roll) end
---@param WorldContext UObject
---@return int32
function USurvivalGameplayStatics:GetWorldType(WorldContext) end
---@param WorldContextObject UObject
---@return UWorldTraceManagerComponent
function USurvivalGameplayStatics:GetWorldTraceManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UWidgetManager
function USurvivalGameplayStatics:GetWidgetManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return TArray<AWaveSpawnRegionVolume>
function USurvivalGameplayStatics:GetWaveSpawnRegions(WorldContextObject) end
---@param WorldContextObject UObject
---@return UWaveManagerComponent
function USurvivalGameplayStatics:GetWaveManager(WorldContextObject) end
---@param Actor AActor
---@return float
function USurvivalGameplayStatics:GetWaterSurfaceZ(Actor) end
---@param WorldContextObject UObject
---@return UWaterManagerComponent
function USurvivalGameplayStatics:GetWaterManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UVisualStateManagerComponent
function USurvivalGameplayStatics:GetVisualStateManager(WorldContextObject) end
---@param AudioDataHandle FDataTableRowHandle
---@return USoundBase
function USurvivalGameplayStatics:GetUISound(AudioDataHandle) end
---@param WorldContextObject UObject
---@return UTriggerManagerComponent
function USurvivalGameplayStatics:GetTriggerManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return float
function USurvivalGameplayStatics:GetTotalGameHoursPassed(WorldContextObject) end
---@param WorldContextObject UObject
---@return ATimeOfDayLightingManager
function USurvivalGameplayStatics:GetTimeOfDayManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return TSubclassOf<USurvivalDamageType>
function USurvivalGameplayStatics:GetThirstDamageType(WorldContextObject) end
---@param WorldContextObject UObject
---@return ASurvivalWorldSettings
function USurvivalGameplayStatics:GetSurvivalWorldSettingsFrom(WorldContextObject) end
---@param WorldContextObject UObject
---@return ASurvivalWorldSettings
function USurvivalGameplayStatics:GetSurvivalWorldSettings(WorldContextObject) end
---@param Pawn APawn
---@return ASurvivalPlayerController
function USurvivalGameplayStatics:GetSurvivalPlayerController(Pawn) end
---@param WorldContextObject UObject
---@return ASurvivalGameState
function USurvivalGameplayStatics:GetSurvivalGameStateWorldSafe(WorldContextObject) end
---@param WorldContextObject UObject
---@return ASurvivalGameState
function USurvivalGameplayStatics:GetSurvivalGameStateFrom(WorldContextObject) end
---@param WorldContextObject UObject
---@return ASurvivalGameState
function USurvivalGameplayStatics:GetSurvivalGameState(WorldContextObject) end
---@param WorldContextObject UObject
---@return USurvivalModeManagerComponent
function USurvivalGameplayStatics:GetSurvivalGameModeManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return USurvivalGameInstance
function USurvivalGameplayStatics:GetSurvivalGameInstanceFrom(WorldContextObject) end
---@param WorldContextObject UObject
---@return USurvivalGameInstance
function USurvivalGameplayStatics:GetSurvivalGameInstance(WorldContextObject) end
---@param Pawn APawn
---@return ASurvivalAIController
function USurvivalGameplayStatics:GetSurvivalController(Pawn) end
---@param WorldContextObject UObject
---@param OutHit FHitResult
---@param Point FVector
---@return EPhysicalSurface
function USurvivalGameplayStatics:GetSurfaceMaterial(WorldContextObject, OutHit, Point) end
---@param StatusEffectType EStatusEffectType
---@return float
function USurvivalGameplayStatics:GetStatusEffectBaseValue(StatusEffectType) end
---@param WorldContextObject UObject
---@return USaveLoadManager
function USurvivalGameplayStatics:GetSaveLoadManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UResourceSurveyComponent
function USurvivalGameplayStatics:GetResourceSurveyComponent(WorldContextObject) end
---@param WorldContextObject UObject
---@return URenderTargetManagerComponent
function USurvivalGameplayStatics:GetRenderTargetManager(WorldContextObject) end
---@param WorldContextObject UObject
---@param PlayerIndex int32
---@param MinSpawnDistance float
---@param MaxSpawnDistance float
---@return FVector
function USurvivalGameplayStatics:GetRandomLocationAroundPlayer(WorldContextObject, PlayerIndex, MinSpawnDistance, MaxSpawnDistance) end
---@param WorldContextObject UObject
---@return UQuestManagerComponent
function USurvivalGameplayStatics:GetQuestManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UPropManagerComponent
function USurvivalGameplayStatics:GetPropManager(WorldContextObject) end
---@param MinimalViewInfo FMinimalViewInfo
---@return FMatrix
function USurvivalGameplayStatics:GetProjectionMatrix(MinimalViewInfo) end
---@param Actor AActor
---@return EPreplacedType
function USurvivalGameplayStatics:GetPreplacedType(Actor) end
---@param WorldContextObject UObject
---@return UPowerNetworkManagerComponent
function USurvivalGameplayStatics:GetPowerNetwork(WorldContextObject) end
---@param WorldContextObject UObject
---@param UniqueId FUniqueNetIdRepl
---@return ASurvivalPlayerState
function USurvivalGameplayStatics:GetPlayerStateMatchingUniqueID(WorldContextObject, UniqueId) end
---@param WorldContextObject UObject
---@param PlayerGuid FGuid
---@return ASurvivalPlayerState
function USurvivalGameplayStatics:GetPlayerStateMatchingPlayerGuid(WorldContextObject, PlayerGuid) end
---@param Character ACharacter
---@return ASurvivalPlayerState
function USurvivalGameplayStatics:GetPlayerStateMatchingCharacter(Character) end
---@param Character AActor
---@return ASurvivalPlayerState
function USurvivalGameplayStatics:GetPlayerStateMatchingActor(Character) end
---@param TargetPlayerState APlayerState
---@return FString
function USurvivalGameplayStatics:GetPlayerPlayFabID(TargetPlayerState) end
---@param WorldContextObject UObject
---@param PlayerState APlayerState
---@return ASurvivalPlayerController
function USurvivalGameplayStatics:GetPlayerControllerMatchingPlayerState(WorldContextObject, PlayerState) end
---@param WorldContextObject UObject
---@param PlayerGuid FGuid
---@return ASurvivalPlayerCharacter
function USurvivalGameplayStatics:GetPlayerCharacterFromPlayerGuid(WorldContextObject, PlayerGuid) end
---@param Builder ABuilderPawn
---@return ASurvivalPlayerCharacter
function USurvivalGameplayStatics:GetPlayerCharacterForBuilder(Builder) end
---@param Hit FHitResult
---@return UPhysicalMaterial
function USurvivalGameplayStatics:GetPhysicalMaterialFromHit(Hit) end
---@param WorldContextObject UObject
---@return UPlayerStatsComponent
function USurvivalGameplayStatics:GetPartyStatsComponent(WorldContextObject) end
---@param WorldContextObject UObject
---@return TArray<ASurvivalPlayerCharacter>
function USurvivalGameplayStatics:GetPartyMembers(WorldContextObject) end
---@param WorldContextObject UObject
---@return UPartyComponent
function USurvivalGameplayStatics:GetPartyComponent(WorldContextObject) end
---@param WorldContextObject UObject
---@return UPartyBarrierComponent
function USurvivalGameplayStatics:GetPartyBarrierComponent(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USurvivalGameplayStatics:GetNumberPlayerDrivenConversationsPlaying(WorldContextObject) end
---@param WorldContextObject UObject
---@return int32
function USurvivalGameplayStatics:GetNewGamePlusVersion(WorldContextObject) end
---@param WorldContextObject UObject
---@return UNewGamePlusSettings
function USurvivalGameplayStatics:GetNewGamePlusSettings(WorldContextObject) end
---@return float
function USurvivalGameplayStatics:GetNearClipPlane() end
---@param WorldContextObject UObject
---@return UMusicManager
function USurvivalGameplayStatics:GetMusicManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UMovieSkipComponent
function USurvivalGameplayStatics:GetMovieSkipManager(WorldContextObject) end
---@return boolean
function USurvivalGameplayStatics:GetMetaBuildingsFeatureEnabled() end
---@param WorldContextObject UObject
---@return UMapComponent
function USurvivalGameplayStatics:GetMapComponent(WorldContextObject) end
---@param WorldContextObject UObject
---@return ULookTriggerManagerComponent
function USurvivalGameplayStatics:GetLookTriggerManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return ULODActorManagerComponent
function USurvivalGameplayStatics:GetLODActorManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return FTransform
function USurvivalGameplayStatics:GetLocalSurvivalPlayerTransform(WorldContextObject) end
---@param WorldContextObject UObject
---@return ASurvivalPlayerState
function USurvivalGameplayStatics:GetLocalSurvivalPlayerState(WorldContextObject) end
---@param WorldContextObject UObject
---@return ASurvivalPlayerController
function USurvivalGameplayStatics:GetLocalSurvivalPlayerController(WorldContextObject) end
---@param WorldContextObject UObject
---@return ASurvivalPlayerCharacter
function USurvivalGameplayStatics:GetLocalSurvivalPlayerCharacter(WorldContextObject) end
---@param WorldContextObject UObject
---@return UCapsuleComponent
function USurvivalGameplayStatics:GetLocalSurvivalPlayerCapsule(WorldContextObject) end
---@param WorldContextObject UObject
---@return APlayerState
function USurvivalGameplayStatics:GetLocalPlayerState(WorldContextObject) end
---@param WorldContextObject UObject
---@return ABuilderPawn
function USurvivalGameplayStatics:GetLocalBuilderPawn(WorldContextObject) end
---@param WorldContextObject UObject
---@return AItemSpawnManager
function USurvivalGameplayStatics:GetItemSpawnManager(WorldContextObject) end
---@param RowHandle FDataTableRowHandle
---@return FDataTableRowHandle
function USurvivalGameplayStatics:GetItemCraftingRecipeForRow(RowHandle) end
---@param WorldContextObject UObject
---@return UInterfaceNarrationManager
function USurvivalGameplayStatics:GetInterfaceNarrationManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UInterfaceManagerComponent
function USurvivalGameplayStatics:GetInterfaceManagerComponent(WorldContextObject) end
---@param WorldContextObject UObject
---@return UInterestManagerComponent
function USurvivalGameplayStatics:GetInterestManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return TSubclassOf<USurvivalDamageType>
function USurvivalGameplayStatics:GetHungerDamageType(WorldContextObject) end
---@param WorldContextObject UObject
---@return UHUDMarkerManagerComponent
function USurvivalGameplayStatics:GetHUDMarkerManager(WorldContextObject) end
---@return UGlobalUIData
function USurvivalGameplayStatics:GetGlobalUIData() end
---@return UGlobalTamingData
function USurvivalGameplayStatics:GetGlobalTamingData() end
---@return UGlobalTableData
function USurvivalGameplayStatics:GetGlobalTableData() end
---@return UGlobalLiteData
function USurvivalGameplayStatics:GetGlobalLiteData() end
---@return UGlobalItemData
function USurvivalGameplayStatics:GetGlobalItemData() end
---@return UGlobalControlsData
function USurvivalGameplayStatics:GetGlobalControlsData() end
---@return UGlobalCombatData
function USurvivalGameplayStatics:GetGlobalCombatData() end
---@return UGlobalBuildingData
function USurvivalGameplayStatics:GetGlobalBuildingData() end
---@return UGlobalAIData
function USurvivalGameplayStatics:GetGlobalAIData() end
---@param WorldContextObject UObject
---@return TSubclassOf<USurvivalDamageType>
function USurvivalGameplayStatics:GetGenericDamageType(WorldContextObject) end
---@return EGamePlatform
function USurvivalGameplayStatics:GetGamePlatform() end
---@param WorldContextObject UObject
---@return EGamePackageType
function USurvivalGameplayStatics:GetGamePackageType(WorldContextObject) end
---@param WorldContextObject UObject
---@return EGameContentType
function USurvivalGameplayStatics:GetGameContentType(WorldContextObject) end
---@param WorldContextObject UObject
---@return UFoliageManagerComponent
function USurvivalGameplayStatics:GetFoliageManagerComponent(WorldContextObject) end
---@param Actor AActor
---@return UMeshComponent
function USurvivalGameplayStatics:GetEquipmentMeshComponent(Actor) end
---@param WorldContextObject UObject
---@return TSubclassOf<USurvivalDamageType>
function USurvivalGameplayStatics:GetEnvironmentalDamageType(WorldContextObject) end
---@param WorldContextObject UObject
---@return UEncounterManagerComponent
function USurvivalGameplayStatics:GetEncounterManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UEditModeManagerComponent
function USurvivalGameplayStatics:GetEditModeManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UDynamicMaterialCache
function USurvivalGameplayStatics:GetDynamicMaterialCache(WorldContextObject) end
---@param ObjectClass UClass
---@return UObject
function USurvivalGameplayStatics:GetDefaultObject(ObjectClass) end
---@param Component UActorComponent
---@return UActorComponent
function USurvivalGameplayStatics:GetDefaultComponent(Component) end
---@param WorldContextObject UObject
---@return UCVarManagerComponent
function USurvivalGameplayStatics:GetCVarManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UCutsceneComponent
function USurvivalGameplayStatics:GetCutsceneComponent(WorldContextObject) end
---@param WorldContextObject UObject
---@return EGameInputType
function USurvivalGameplayStatics:GetCurrentGameInputType(WorldContextObject) end
---@param CraftingRecipe FDataTableRowHandle
---@return FDataTableRowHandle
function USurvivalGameplayStatics:GetCraftingResultFromCraftingRecipe(CraftingRecipe) end
---@param BuildingRecipe FDataTableRowHandle
---@return FDataTableRowHandle
function USurvivalGameplayStatics:GetCraftingResultFromBuildingRecipe(BuildingRecipe) end
---@param ItemRowHandle FDataTableRowHandle
---@return FDataTableRowHandle
function USurvivalGameplayStatics:GetCraftingRecipeForItem(ItemRowHandle) end
---@param WorldContextObject UObject
---@return UConversationNavigatorComponent
function USurvivalGameplayStatics:GetConversationNavigatorComponent(WorldContextObject) end
---@return EColorBlindModeSettings
function USurvivalGameplayStatics:GetColorblindSetting() end
---@param WorldContextObject UObject
---@return UColonyManagerComponent
function USurvivalGameplayStatics:GetColonyManager(WorldContextObject) end
---@param WorldContextObject UObject
---@param Location FVector
---@return float
function USurvivalGameplayStatics:GetClosestPartyMemberOrBuilderDistanceSquaredNonExclusive(WorldContextObject, Location) end
---@param WorldContextObject UObject
---@param Location FVector
---@return float
function USurvivalGameplayStatics:GetClosestPartyMemberOrBuilderDistanceSquared(WorldContextObject, Location) end
---@param WorldContextObject UObject
---@param Location FVector
---@return float
function USurvivalGameplayStatics:GetClosestPartyMemberDistanceSquared(WorldContextObject, Location) end
---@param WorldContextObject UObject
---@param Location FVector
---@return ASurvivalPlayerCharacter
function USurvivalGameplayStatics:GetClosestPartyMember(WorldContextObject, Location) end
---@param WorldContextObject UObject
---@param Location FVector
---@return float
function USurvivalGameplayStatics:GetClosestBuilderDistanceSquared(WorldContextObject, Location) end
---@param TypeTag FGameplayTag
---@return FLocString
function USurvivalGameplayStatics:GetCharacterTypeNameByTag(TypeTag) end
---@param Instigator AActor
---@param Range float
---@return int32
function USurvivalGameplayStatics:GetCancelNearbyBlueprintsCount(Instigator, Range) end
---@param WorldContextObject UObject
---@return UCalendarComponent
function USurvivalGameplayStatics:GetCalendarComponent(WorldContextObject) end
---@param WorldContextObject UObject
---@return UBurgleQuestManagerComponent
function USurvivalGameplayStatics:GetBurgleQuestManager(WorldContextObject) end
---@param WorldContextObject UObject
---@param Results TArray<FRecipeRequirements>
function USurvivalGameplayStatics:GetBuildingShoppingList(WorldContextObject, Results) end
---@param WorldContextObject UObject
---@return UBuildingReplicationManager
function USurvivalGameplayStatics:GetBuildingReplicationManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UBuildingPlacementManager
function USurvivalGameplayStatics:GetBuildingPlacementManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UBuildingManagerComponent
function USurvivalGameplayStatics:GetBuildingManager(WorldContextObject) end
---@param InISMComponent UInstancedStaticMeshComponent
---@return UBuildingGridComponent
function USurvivalGameplayStatics:GetBuildingGridFromISM(InISMComponent) end
---@param Character ASurvivalPlayerCharacter
---@return ABuilderPawn
function USurvivalGameplayStatics:GetBuilderMatchingPlayerCharacter(Character) end
---@param Actor AActor
---@return ABuilderPawn
function USurvivalGameplayStatics:GetBuilderFromActor(Actor) end
---@param WorldContextObject UObject
---@return EBuildConfigationType
function USurvivalGameplayStatics:GetBuildConfigationType(WorldContextObject) end
---@param World UWorld
---@return FBox
function USurvivalGameplayStatics:GetBroadphaseBounds(World) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:GetBigHeadsState(WorldContextObject) end
---@param WorldContextObject UObject
---@return UBestiaryComponent
function USurvivalGameplayStatics:GetBestiaryComponent(WorldContextObject) end
---@param WorldContextObject UObject
---@return UBaseManagerComponent
function USurvivalGameplayStatics:GetBaseManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return TSubclassOf<USurvivalDamageType>
function USurvivalGameplayStatics:GetBadFoodDamageType(WorldContextObject) end
---@param WorldContextObject UObject
---@return UAuraManagerComponent
function USurvivalGameplayStatics:GetAuraManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UAsyncTraceShareComponent
function USurvivalGameplayStatics:GetAsyncTraceShareManager(WorldContextObject) end
---@param Character AActor
---@return ASurvivalPlayerState
function USurvivalGameplayStatics:GetAssociatedPlayerState(Character) end
---@param Actor AActor
---@param ArmorSlot EEquipmentSlot
---@return USkeletalMeshComponent
function USurvivalGameplayStatics:GetArmorMeshComponent(Actor, ArmorSlot) end
---@return int32
function USurvivalGameplayStatics:GetArachnophobiaSafeSetting() end
---@param WorldContextObject UObject
---@return UMaineAnalyticsManager
function USurvivalGameplayStatics:GetAnalyticsManager(WorldContextObject) end
---@param WorldContextObject UObject
---@return UAmbienceManager
function USurvivalGameplayStatics:GetAmbienceManager(WorldContextObject) end
---@param Actor AActor
---@return float
function USurvivalGameplayStatics:GetActorMassForPressurePlate(Actor) end
---@param Player ASurvivalPlayerCharacter
---@return ABossManager
function USurvivalGameplayStatics:GetActiveBossForPlayer(Player) end
---@param WorldContextObject UObject
---@param PhysicsVolume APhysicsVolume
---@param Origin FVector
---@param Range float
---@param Result FVector
---@return boolean
function USurvivalGameplayStatics:GenerateRandomPhysicsVolumeLocation(WorldContextObject, PhysicsVolume, Origin, Range, Result) end
---@param WorldContextObject UObject
---@param Origin FVector
---@param Range float
---@param NavAgentProperties FNavAgentProperties
---@param Result FVector
---@return boolean
function USurvivalGameplayStatics:GenerateRandomNavLocation(WorldContextObject, Origin, Range, NavAgentProperties, Result) end
---@param WorldContextObject UObject
function USurvivalGameplayStatics:FlushPrestreamTextures(WorldContextObject) end
---@return float
function USurvivalGameplayStatics:FloatPositiveInfinity() end
---@return float
function USurvivalGameplayStatics:FloatNegativeInfinity() end
---@param Object UObject
---@return UBaseLODActor
function USurvivalGameplayStatics:FindLODActorForObject(Object) end
---@param Component UActorComponent
---@return UBaseLODActor
function USurvivalGameplayStatics:FindLODActorForComponent(Component) end
---@param Object UObject
---@return UBaseLODActor
function USurvivalGameplayStatics:FindLODActorForAny(Object) end
---@param Actor AActor
---@return UBaseLODActor
function USurvivalGameplayStatics:FindLODActorForActor(Actor) end
---@param Actor AActor
---@param ComponentClass TSubclassOf<UActorComponent>
---@return TArray<UActorComponent>
function USurvivalGameplayStatics:FindDefaultComponentsByClass(Actor, ComponentClass) end
---@param Actor AActor
---@param ComponentName FName
---@return UActorComponent
function USurvivalGameplayStatics:FindDefaultComponentByName(Actor, ComponentName) end
---@param Actor AActor
---@param ComponentClass TSubclassOf<UActorComponent>
---@return UActorComponent
function USurvivalGameplayStatics:FindDefaultComponentByClass(Actor, ComponentClass) end
---@param Class TSubclassOf<AActor>
---@param ComponentClass TSubclassOf<UActorComponent>
---@return UActorComponent
function USurvivalGameplayStatics:FindClassDefaultComponentByClass(Class, ComponentClass) end
---@param Primitive UPrimitiveComponent
---@return FVector
function USurvivalGameplayStatics:FastForwardPhysics(Primitive) end
---@param MaxRadius float
function USurvivalGameplayStatics:EnableForegroundDOF(MaxRadius) end
function USurvivalGameplayStatics:DisableForegroundDOF() end
---@param ItemList TArray<UItem>
---@param SingleItem boolean
---@return boolean
function USurvivalGameplayStatics:DefragItemList(ItemList, SingleItem) end
---@param TargetActor AActor
---@param DamageData FDamageData
---@param InstigatedBy AController
---@param DamageCauser AActor
function USurvivalGameplayStatics:DealDamage(TargetActor, DamageData, InstigatedBy, DamageCauser) end
---@param inArray TArray<FDataTableRowHandle_NetCrc>
---@return TArray<FDataTableRowHandle>
function USurvivalGameplayStatics:DataTableNetCrcArrayToDataTableArray(inArray) end
---@param inArray TArray<FDataTableRowHandle>
---@return TArray<FDataTableRowHandle_NetCrc>
function USurvivalGameplayStatics:DataTableArrayToNetCrc(inArray) end
---@param WorldContextObject UObject
---@param ItemType FDataTableRowHandle
---@return UItem
function USurvivalGameplayStatics:CreateItem(WorldContextObject, ItemType) end
---@param ConsumableDataHandle FDataTableRowHandle
---@param Stat EStatusEffectType
---@return boolean
function USurvivalGameplayStatics:ConsumableHasPositiveSurvivalStat(ConsumableDataHandle, Stat) end
---@param ConsumableDataHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:ConsumableHasNegativeEffect(ConsumableDataHandle) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:CanUseMultiplayerSaveLoad(WorldContextObject) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:CanItemBeAnalyzed(ItemRowHandle) end
---@param ItemList TArray<UItem>
---@return boolean
function USurvivalGameplayStatics:CanDefragItemList(ItemList) end
---@param IngredientRowHandle FDataTableRowHandle
---@return boolean
function USurvivalGameplayStatics:CanCraftIngredientViaRecipe(IngredientRowHandle) end
---@param Instigator AActor
---@param Range float
function USurvivalGameplayStatics:CancelNearbyBlueprints(Instigator, Range) end
---@param SourceActor AActor
---@return boolean
function USurvivalGameplayStatics:CanAscendZiplines(SourceActor) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:AreBossOptimizationsAllowed(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:AreAnyPlayersAliveInSameActiveBossRoom(WorldContextObject) end
---@param WorldContextObject UObject
---@return boolean
function USurvivalGameplayStatics:AreAllPlayersInSameActiveBossRoom(WorldContextObject) end
---@param InstigatedBy AActor
---@param ConsumableData TArray<FDataTableRowHandle>
---@param PlayChatter boolean
function USurvivalGameplayStatics:ApplyConsumableEffects(InstigatedBy, ConsumableData, PlayChatter) end
---@param InstigatedBy AActor
---@param ConsumableDataHandle FDataTableRowHandle
---@param PlayChatter boolean
function USurvivalGameplayStatics:ApplyConsumableEffect(InstigatedBy, ConsumableDataHandle, PlayChatter) end
---@param Mesh UStaticMeshComponent
---@param SurfaceWorldZ float
function USurvivalGameplayStatics:ApplyBuoyantForceWithSurface(Mesh, SurfaceWorldZ) end
---@param Mesh UStaticMeshComponent
function USurvivalGameplayStatics:ApplyBuoyantForceToMesh(Mesh) end
---@param Mesh UStaticMeshComponent
---@param WaterVolume AActor
function USurvivalGameplayStatics:ApplyBuoyantForce(Mesh, WaterVolume) end
---@param ConsumableData TArray<FDataTableRowHandle>
---@param Stat EStatusEffectType
---@return boolean
function USurvivalGameplayStatics:AnyConsumableHasPositiveSurvivalStat(ConsumableData, Stat) end
---@param ConsumableData TArray<FDataTableRowHandle>
---@return boolean
function USurvivalGameplayStatics:AnyConsumableHasNegativeEffect(ConsumableData) end
---@param WorldContextObject UObject
---@param ItemRowHandle FDataTableRowHandle
---@param Location FVector
---@param Radius float
function USurvivalGameplayStatics:AddObjectiveToItem(WorldContextObject, ItemRowHandle, Location, Radius) end
---@param Actor AActor
---@param Tags FGameplayTagContainer
---@return boolean
function USurvivalGameplayStatics:ActorHasGameplayTag(Actor, Tags) end
---@param activityID FString
function USurvivalGameplayStatics:ActivityStart(activityID) end
---@param activityID FString
function USurvivalGameplayStatics:ActivityResume(activityID) end
---@param activityID FString
function USurvivalGameplayStatics:ActivityEnd(activityID) end
---@param WorldContextObject UObject
function USurvivalGameplayStatics:AbortAllConversations(WorldContextObject) end


---@class USurvivalMemoryReport : UObject
USurvivalMemoryReport = {}

function USurvivalMemoryReport:VerifyGlobalActorMetrics() end
function USurvivalMemoryReport:GenerateTextureReport() end
function USurvivalMemoryReport:GenerateStreamingTextureReport() end
function USurvivalMemoryReport:GenerateStaticMeshComponentReport() end
function USurvivalMemoryReport:GenerateStatGroupsReport() end
function USurvivalMemoryReport:GenerateSolidColorTextureReport() end
function USurvivalMemoryReport:GenerateSkeletalMeshComponentReport() end
function USurvivalMemoryReport:GenerateRenderTargetReport() end
function USurvivalMemoryReport:GenerateRenderProxyReport() end
function USurvivalMemoryReport:GeneratePhysXAllocReport() end
function USurvivalMemoryReport:GeneratePhysicsCollisionReport() end
function USurvivalMemoryReport:GenerateParticlesReport() end
function USurvivalMemoryReport:GenerateNonStreamingTextureReport() end
function USurvivalMemoryReport:GenerateNavigationCollisionReport() end
---@param FullReport int32
function USurvivalMemoryReport:GenerateMemoryReport(FullReport) end
function USurvivalMemoryReport:GenerateLODActorReport() end
function USurvivalMemoryReport:GenerateLightingMemoryReport() end
function USurvivalMemoryReport:GenerateInstancedStaticMeshReport() end
function USurvivalMemoryReport:GenerateIncompressibleTexturesReport() end
function USurvivalMemoryReport:GenerateHISMAReport() end
function USurvivalMemoryReport:GenerateHISMARelevantMemoryReport() end
function USurvivalMemoryReport:GenerateBuildingReport() end
function USurvivalMemoryReport:GenerateAudioReport() end


---@class USurvivalMemoryReportSettings : UDeveloperSettings
---@field LightingLevels TArray<FString>
USurvivalMemoryReportSettings = {}



---@class USurvivalMemoryStatics : UBlueprintFunctionLibrary
USurvivalMemoryStatics = {}

---@param WorldContext UObject
---@return boolean
function USurvivalMemoryStatics:ShouldShowMemoryEstimateInPauseMenu(WorldContext) end
---@param WorldContext UObject
---@return boolean
function USurvivalMemoryStatics:ShouldShowMemoryCountersInPauseMenu(WorldContext) end
---@param WorldContext UObject
---@param SaveHeader USaveGameHeaderData
---@return boolean
function USurvivalMemoryStatics:IsSaveDataMemoryUsageAboveLimit(WorldContext, SaveHeader) end
---@param WorldContext UObject
---@param SaveHeader USaveGameHeaderData
---@return boolean
function USurvivalMemoryStatics:IsSaveDataMemoryUsageAboveCrossPlatformLimit(WorldContext, SaveHeader) end
---@param Session FBlueprintSessionResult
---@param GamePlatform EGamePlatform
---@return boolean
function USurvivalMemoryStatics:IsOnlineSessionMemoryAbovePlatformLimit(Session, GamePlatform) end
---@param WorldContext UObject
---@return boolean
function USurvivalMemoryStatics:IsMemoryUsageAboveLimit(WorldContext) end
---@param WorldContext UObject
---@param SaveHeader USaveGameHeaderData
---@return float
function USurvivalMemoryStatics:GetSaveDataMemoryUsagePercentageOnCurrentPlatform(WorldContext, SaveHeader) end
---@param WorldContext UObject
---@param SaveHeader USaveGameHeaderData
---@return float
function USurvivalMemoryStatics:GetSaveDataMemoryUsage(WorldContext, SaveHeader) end
---@param Session FBlueprintSessionResult
---@return float
function USurvivalMemoryStatics:GetOnlineSessionMemoryUsage(Session) end
---@param WorldContext UObject
---@param Category EDynamicMemoryCategory
---@param bExclusive boolean
---@return float
function USurvivalMemoryStatics:GetNumInstancesInCategory(WorldContext, Category, bExclusive) end
---@param WorldContext UObject
---@return float
function USurvivalMemoryStatics:GetMemoryLimit(WorldContext) end
---@param WorldContext UObject
---@param Data FDynamicMemoryUsageData
---@return float
function USurvivalMemoryStatics:GetEstimatedDynamicMemoryUsagePercentageFromData(WorldContext, Data) end
---@param WorldContext UObject
---@return float
function USurvivalMemoryStatics:GetEstimatedDynamicMemoryUsagePercentage(WorldContext) end
---@param WorldContext UObject
---@param Data FDynamicMemoryUsageData
---@return float
function USurvivalMemoryStatics:GetEstimatedDynamicMemoryUsageFromData(WorldContext, Data) end
---@param WorldContext UObject
---@return float
function USurvivalMemoryStatics:GetEstimatedDynamicMemoryUsageFromCurrentGame(WorldContext) end
---@param WorldContext UObject
---@param Category EDynamicMemoryCategory
---@param bExclusive boolean
---@return float
function USurvivalMemoryStatics:GetEstimatedDynamicMemoryUsage(WorldContext, Category, bExclusive) end
---@param WorldContext UObject
---@param Category EDynamicMemoryCategory
---@return int32
function USurvivalMemoryStatics:GetEstimatedBytesPerInstance(WorldContext, Category) end
---@param WorldContext UObject
---@param Platform EGamePlatform
---@param LevelName FString
---@return int32
function USurvivalMemoryStatics:GetDynamicMemoryLimitBytes(WorldContext, Platform, LevelName) end


---@class USurvivalModeManagerComponent : UActorComponent
---@field OnGameModeChanged FSurvivalModeManagerComponentOnGameModeChanged
---@field OnNewGamePlusChanged FSurvivalModeManagerComponentOnNewGamePlusChanged
---@field OnGameTypeReplicated FSurvivalModeManagerComponentOnGameTypeReplicated
---@field OnBuildingIntegritySettingChanged FSurvivalModeManagerComponentOnBuildingIntegritySettingChanged
---@field CurrentGameMode EGameMode
---@field GameType EGameType
---@field bIsEditModeAvailable boolean
---@field CustomSettings FCustomGameModeSettings
---@field GameModeSettings USurvivalGameModeSettings
---@field NewGamePlusLevel int32
---@field NewGamePlusGlobalVariable FGlobalVariableReference
---@field NewGamePlusSong TSoftObjectPtr<UMusicTrackData>
---@field TeleportVFX TSoftObjectPtr<UNiagaraSystem>
---@field TeleportCue TSoftObjectPtr<USoundBase>
---@field IntroPlayedGlobalVariable FGlobalVariableReference
---@field PendingNewGamePlusEffects boolean
USurvivalModeManagerComponent = {}

---@param MemoryLimitMode EDynamicMemoryLimitMode
function USurvivalModeManagerComponent:UpdateMemoryLimitMode(MemoryLimitMode) end
---@param GameDifficulty EGameDifficulty
function USurvivalModeManagerComponent:UpdateDifficulty(GameDifficulty) end
---@param SelectedCustomSettings FCustomGameModeSettings
function USurvivalModeManagerComponent:UpdateCustomSettings(SelectedCustomSettings) end
function USurvivalModeManagerComponent:SwapToCustom() end
---@return boolean
function USurvivalModeManagerComponent:ShouldPromptCustomSettingsTutorial() end
---@return boolean
function USurvivalModeManagerComponent:ShouldEnableBuildingIntegrity() end
---@return boolean
function USurvivalModeManagerComponent:ShouldAutoCompleteBuildings() end
---@param NewLevel int32
function USurvivalModeManagerComponent:SetNewGamePlus(NewLevel) end
---@param SelectedGameMode EGameMode
function USurvivalModeManagerComponent:SetGameMode(SelectedGameMode) end
function USurvivalModeManagerComponent:OnRep_NewGamePlus() end
function USurvivalModeManagerComponent:OnRep_GameType() end
function USurvivalModeManagerComponent:OnRep_CustomSettings() end
function USurvivalModeManagerComponent:OnRep_CurrentGameMode() end
---@param Level int32
function USurvivalModeManagerComponent:MulticastDoNewGamePlusIntro(Level) end
---@return boolean
function USurvivalModeManagerComponent:IsPhotoModeAvailable() end
---@return boolean
function USurvivalModeManagerComponent:IsNewGamePlus() end
---@return boolean
function USurvivalModeManagerComponent:IsEditModeAvailable() end
---@return boolean
function USurvivalModeManagerComponent:IsCraftingAllowed() end
---@return boolean
function USurvivalModeManagerComponent:IsBuildModeAvailable() end
---@return boolean
function USurvivalModeManagerComponent:IsBuildingAllowed() end
---@return int32
function USurvivalModeManagerComponent:GetNewGamePlusLevel() end
---@return EGameType
function USurvivalModeManagerComponent:GetGameType() end
---@return USurvivalGameModeSettings
function USurvivalModeManagerComponent:GetGameModeSettings() end
---@return EGameMode
function USurvivalModeManagerComponent:GetGameMode() end
---@return EGameDifficulty
function USurvivalModeManagerComponent:GetGameDifficulty() end
---@return FCustomGameModeSettings
function USurvivalModeManagerComponent:GetCustomGameSettings() end
function USurvivalModeManagerComponent:EnableSettingChangeNotifications() end
---@return boolean
function USurvivalModeManagerComponent:DoRecipesRequireIngredients() end
function USurvivalModeManagerComponent:DoNewGamePlusIntroEffects() end
---@return boolean
function USurvivalModeManagerComponent:AreUpgradesUnlocked() end
---@return boolean
function USurvivalModeManagerComponent:AreQuestsEnabled() end
---@return boolean
function USurvivalModeManagerComponent:AreEncountersEnabled() end
---@return boolean
function USurvivalModeManagerComponent:AreAllRecipesUnlocked() end


---@class USurvivalRowHandleLibrary : UBlueprintFunctionLibrary
USurvivalRowHandleLibrary = {}

---@param DataRow FDataTableRowHandle
---@return boolean
function USurvivalRowHandleLibrary:IsItemRow(DataRow) end
---@param DataRow FDataTableRowHandle
---@return boolean
function USurvivalRowHandleLibrary:IsFoliageRow(DataRow) end
---@param Actor AActor
---@return boolean
function USurvivalRowHandleLibrary:IsFlippedVariant(Actor) end
---@param DataRow FDataTableRowHandle
---@return boolean
function USurvivalRowHandleLibrary:IsDataRowValid(DataRow) end
---@param DataRow FDataTableRowHandle
---@return FGameplayTag
function USurvivalRowHandleLibrary:GetUGCSubcategory(DataRow) end
---@param DataRow FDataTableRowHandle
---@return boolean
function USurvivalRowHandleLibrary:GetPlaceableForUGC(DataRow) end
---@param DataRow FDataTableRowHandle
---@return UObject
function USurvivalRowHandleLibrary:GetModIcon(DataRow) end
---@param DataRow FDataTableRowHandle
---@return TSoftObjectPtr<UObject>
function USurvivalRowHandleLibrary:GetIconSoft(DataRow) end
---@param DataRow FDataTableRowHandle
---@return UObject
function USurvivalRowHandleLibrary:GetIcon(DataRow) end
---@param DataRow FDataTableRowHandle
---@return TSoftObjectPtr<UObject>
function USurvivalRowHandleLibrary:GetHudIcon(DataRow) end
---@param DataRow FDataTableRowHandle
---@return boolean
function USurvivalRowHandleLibrary:GetHasUGCInteractions(DataRow) end
---@param DataRow FDataTableRowHandle
---@param FilterText FString
---@return boolean
function USurvivalRowHandleLibrary:GetFilterMatches(DataRow, FilterText) end
---@param DataRow FDataTableRowHandle
---@return FLocString
function USurvivalRowHandleLibrary:GetDisplayName(DataRow) end
---@param DataRow FDataTableRowHandle
---@return FLocString
function USurvivalRowHandleLibrary:GetDisplayDescription(DataRow) end


---@class UTamedCreatureData : UObject
---@field PetHome TWeakObjectPtr<APetHomeBuilding>
---@field HourTamed float
---@field TimesPetted int32
---@field RawHappinessValue float
---@field Personality FDataTableRowHandle_NetCrc
---@field OnTameStateChanged FTamedCreatureDataOnTameStateChanged
---@field PetMaster TWeakObjectPtr<ASurvivalPlayerCharacter>
---@field PetName FString
---@field PetNameFiltered FString
---@field TameState ETamedState
UTamedCreatureData = {}

---@param State ETamedState
function UTamedCreatureData:SetTameState(State) end
function UTamedCreatureData:OnRep_TameState() end
function UTamedCreatureData:OnRep_PetMaster() end
---@param DamageInfo FDamageInfo
function UTamedCreatureData:HandleMasterKilled(DamageInfo) end
---@return ETamedState
function UTamedCreatureData:GetTameState() end
---@return int32
function UTamedCreatureData:GetDaysAsPet() end


---@class UTeamComponent : UActorComponent
---@field TeamDataTable FDataTableRowHandle
---@field bOverrideReputationOnDeath boolean
---@field ReputationOnDeath int32
UTeamComponent = {}

function UTeamComponent:RestoreTeam() end
---@param DamageInfo FDamageInfo
function UTeamComponent:OnDeath(DamageInfo) end
---@return boolean
function UTeamComponent:HasTeam() end
---@param Other UBaseLODActor
---@return ETeamAttitude::Type
function UTeamComponent:GetRelationshipToLODActor(Other) end
---@param Other AActor
---@return ETeamAttitude::Type
function UTeamComponent:GetRelationship(Other) end
---@return FDataTableRowHandle
function UTeamComponent:GetDefaultTeamRowHandle() end
---@return FDataTableRowHandle
function UTeamComponent:GetCurrentTeamRowHandle() end
---@param NewTeamDataTable FDataTableRowHandle
function UTeamComponent:ChangeTeam(NewTeamDataTable) end


---@class UTeamComponentLiteData : UComponentLiteData
---@field DefaultTeamRowHandle FDataTableRowHandle
UTeamComponentLiteData = {}



---@class UTeamLODComponent : UBaseLODComponent
UTeamLODComponent = {}

---@param Other UObject
---@return ETeamAttitude::Type
function UTeamLODComponent:GetRelationshipToObject(Other) end
---@param Other UBaseLODActor
---@return ETeamAttitude::Type
function UTeamLODComponent:GetRelationshipToLODActor(Other) end
---@param Other AActor
---@return ETeamAttitude::Type
function UTeamLODComponent:GetRelationshipToActor(Other) end
---@return FDataTableRowHandle
function UTeamLODComponent:GetCurrentTeamRowHandle() end


---@class UTechDepositComponent : UAnimationInteractComponent
UTechDepositComponent = {}


---@class UTelemetryComponent : UActorComponent
---@field MinMoveTelemetry float
---@field bEnableTelemetryTick boolean
UTelemetryComponent = {}

---@param Location FVector
---@param MapName FString
function UTelemetryComponent:OnPlayerMove(Location, MapName) end


---@class UTerminalSwitchListener : UActorComponent
---@field OnTerminalStateChange FTerminalSwitchListenerOnTerminalStateChange
UTerminalSwitchListener = {}

---@param Terminal ATerminalSwitch
---@param ConditionalState FTerminalConditional
function UTerminalSwitchListener:OnTerminalStateChanged(Terminal, ConditionalState) end


---@class UTerminalWidget : UGameUserWidget
---@field Waiting UCanvasPanel
---@field Start UCanvasPanel
---@field Locked UCanvasPanel
---@field LockedFlash UCanvasPanel
---@field Unlocked UCanvasPanel
---@field LoopingCursor UWidgetAnimation
---@field LockedFlashAnim UWidgetAnimation
---@field DoorTextLoopAnim UWidgetAnimation
---@field StartupUnlockAnim UWidgetAnimation
---@field LockedAppearAnim UWidgetAnimation
---@field FinishUnlockAnim UWidgetAnimation
---@field OwningTerminal ATerminalSwitch
---@field InteractionBlocked boolean
---@field CurrentWidget UCanvasPanel
---@field CurrentAnimation UWidgetAnimation
---@field CurrentState ETerminalWidgetState
UTerminalWidget = {}

---@param State ETerminalWidgetState
function UTerminalWidget:OnStateEntered(State) end
function UTerminalWidget:OnInteractionBlockingAnimationEnded() end
function UTerminalWidget:ExitCurrentState() end
---@param State ETerminalWidgetState
function UTerminalWidget:EnterState(State) end


---@class UTextureGroupSwapCommandlet : UCommandlet
UTextureGroupSwapCommandlet = {}


---@class UThirstReadoutWidget : UGameUserWidget
---@field LastPlayerThirst float
---@field CurrentDisplayedThirst float
---@field ThirstRatio float
UThirstReadoutWidget = {}

function UThirstReadoutWidget:UpdateThirstAnim() end
---@param OldMode EEditMode
---@param NewMode EEditMode
function UThirstReadoutWidget:HandleEditModeChanged(OldMode, NewMode) end
---@param Sender USurvivalComponent
---@param OldValue float
---@param NewValue float
function UThirstReadoutWidget:CheckWaterChange(Sender, OldValue, NewValue) end


---@class UTorchIndicatorWidget : UGameUserWidget
UTorchIndicatorWidget = {}

---@param TorchPercent float
function UTorchIndicatorWidget:OnTorchPercentChanged(TorchPercent) end
---@param bIsPowerOn boolean
function UTorchIndicatorWidget:OnItemPowerStateChangedImpl(bIsPowerOn) end
---@param bIsPowerOn boolean
function UTorchIndicatorWidget:OnItemPowerStateChanged(bIsPowerOn) end
---@param Item UItem
---@param EquipmentSlot EEquipmentSlot
function UTorchIndicatorWidget:OnEquipmentChanged(Item, EquipmentSlot) end


---@class UTrackedItemSpawnGroup : UObject
---@field Owner AActor
---@field ItemSpawnGroupData UItemSpawnGroupData
---@field SpawnPoints FItemSpawnGroup
---@field OnTrackedSpawnsChanged FTrackedItemSpawnGroupOnTrackedSpawnsChanged
---@field SerializedTrackedSpawnsPointDatas TArray<FItemSpawnPointData>
---@field TrackedSpawns TMap<FItemSpawnPointData, FTrackedSpawnData>
---@field GameMode USurvivalModeManagerComponent
UTrackedItemSpawnGroup = {}

---@param RestDuration float
function UTrackedItemSpawnGroup:OnRest(RestDuration) end
---@param GlobalVariableID FGuid
---@param VariableValue int32
---@param Instigator AActor
function UTrackedItemSpawnGroup:OnGlobalVariableChangedEvent(GlobalVariableID, VariableValue, Instigator) end
---@param Event FItemSpawnGroupEvent
---@return TArray<FItemSpawnPointData>
function UTrackedItemSpawnGroup:GetSpawnPointsToAffect(Event) end
---@return TArray<FItemSpawnPointData>
function UTrackedItemSpawnGroup:GetAllSpawnPoints() end


---@class UTrackingComponent : UActorComponent
---@field HeadTracking FTrackingPart
---@field BodyTracking FTrackingPart
UTrackingComponent = {}



---@class UTransmissionReceiverComponent : UActorComponent
---@field ClosestInRangeTransmittor UTransmitterComponent
---@field ReceiverDistanceNoSignals TMap<FGameplayTag, float>
---@field ReceiverDistanceFullSignal float
---@field OnClosestValidTransmitterChanged FTransmissionReceiverComponentOnClosestValidTransmitterChanged
UTransmissionReceiverComponent = {}

---@return float
function UTransmissionReceiverComponent:GetClosestTransmitterVerticalDifference() end
---@return float
function UTransmissionReceiverComponent:GetClosestTransmitterStrength() end


---@class UTransmitterComponent : UActorComponent
---@field TransmittorTypeTag FGameplayTag
---@field SignalAudioCue USoundBase
---@field SignalAudioRange float
---@field SignalVolumeMax float
---@field SignalVolumeMin float
---@field SignalPitchMax float
---@field SignalPitchMin float
---@field SignalAudioComponent UAudioComponent
---@field bRegisterToTransmissionReceivers boolean
---@field bTransmissionEnabled boolean
---@field bSaveTransmissionState boolean
UTransmitterComponent = {}

---@param bEnable boolean
function UTransmitterComponent:SetTransmissionEnabled(bEnable) end
---@return boolean
function UTransmitterComponent:IsTransmissionEnabled() end
---@return FGameplayTag
function UTransmitterComponent:GetTransmittorType() end


---@class UTriggerBehaviorBase : UObject
UTriggerBehaviorBase = {}

---@param Instigator TScriptInterface<ITriggerObject>
---@param Target TScriptInterface<ITriggerObject>
---@param Connection TScriptInterface<ITriggerConnectionInterface>
function UTriggerBehaviorBase:RunBehavior(Instigator, Target, Connection) end
---@param CustomPropertyInterface TScriptInterface<ICustomPropertyInterface>
---@param ChangedProperty FName
---@param PropertyValue float
function UTriggerBehaviorBase:OnCustomPropertyChanged(CustomPropertyInterface, ChangedProperty, PropertyValue) end
---@param Instigator TScriptInterface<ITriggerObject>
---@param Target TScriptInterface<ITriggerObject>
---@param Connection TScriptInterface<ITriggerConnectionInterface>
---@return boolean
function UTriggerBehaviorBase:MeetsRequirements(Instigator, Target, Connection) end
---@return boolean
function UTriggerBehaviorBase:IsUniquePerEvent() end
---@param Instigator TScriptInterface<ITriggerObject>
---@param Target TScriptInterface<ITriggerObject>
---@param Connection TScriptInterface<ITriggerConnectionInterface>
---@return boolean
function UTriggerBehaviorBase:CanBeDefaultBehavior(Instigator, Target, Connection) end


---@class UTriggerBehavior_Activate : UTriggerBehavior_Activateables
UTriggerBehavior_Activate = {}


---@class UTriggerBehavior_Activateables : UTriggerBehaviorBase
UTriggerBehavior_Activateables = {}


---@class UTriggerBehavior_ApplyTimeChange : UTriggerBehaviorBase
UTriggerBehavior_ApplyTimeChange = {}


---@class UTriggerBehavior_AutoFireActivate : UTriggerBehavior_Turret
UTriggerBehavior_AutoFireActivate = {}


---@class UTriggerBehavior_AutoFireDeactivate : UTriggerBehavior_Turret
UTriggerBehavior_AutoFireDeactivate = {}


---@class UTriggerBehavior_ClearCustomizations : UTriggerBehavior_Customizables
UTriggerBehavior_ClearCustomizations = {}


---@class UTriggerBehavior_Close : UTriggerBehavior_Openables
UTriggerBehavior_Close = {}


---@class UTriggerBehavior_Common : UTriggerBehaviorBase
UTriggerBehavior_Common = {}


---@class UTriggerBehavior_CounterComparisons : UTriggerBehavior_Counters
UTriggerBehavior_CounterComparisons = {}


---@class UTriggerBehavior_Counters : UTriggerBehaviorBase
UTriggerBehavior_Counters = {}


---@class UTriggerBehavior_Customizables : UTriggerBehaviorBase
UTriggerBehavior_Customizables = {}


---@class UTriggerBehavior_Customize : UTriggerBehavior_Customizables
UTriggerBehavior_Customize = {}


---@class UTriggerBehavior_Deactivate : UTriggerBehavior_Activateables
UTriggerBehavior_Deactivate = {}


---@class UTriggerBehavior_Decrement : UTriggerBehavior_Counters
UTriggerBehavior_Decrement = {}


---@class UTriggerBehavior_DecrementCompare : UTriggerBehavior_CounterComparisons
UTriggerBehavior_DecrementCompare = {}


---@class UTriggerBehavior_Encounters : UTriggerBehaviorBase
UTriggerBehavior_Encounters = {}


---@class UTriggerBehavior_EndEncounter : UTriggerBehavior_Encounters
UTriggerBehavior_EndEncounter = {}


---@class UTriggerBehavior_EquipItems : UTriggerBehavior_Items
UTriggerBehavior_EquipItems = {}


---@class UTriggerBehavior_ExecutionModifier : UTriggerBehavior_Common
UTriggerBehavior_ExecutionModifier = {}


---@class UTriggerBehavior_FireProjectile : UTriggerBehavior_Turret
UTriggerBehavior_FireProjectile = {}


---@class UTriggerBehavior_FireTrap : UTriggerBehavior_Trap
UTriggerBehavior_FireTrap = {}


---@class UTriggerBehavior_ForwardTriggerEvent : UTriggerBehavior_Triggers
UTriggerBehavior_ForwardTriggerEvent = {}


---@class UTriggerBehavior_FrankenlineChangeColor : UTriggerBehaviorBase
UTriggerBehavior_FrankenlineChangeColor = {}


---@class UTriggerBehavior_FrankenlineErase : UTriggerBehaviorBase
UTriggerBehavior_FrankenlineErase = {}


---@class UTriggerBehavior_GrantItems : UTriggerBehavior_Items
UTriggerBehavior_GrantItems = {}


---@class UTriggerBehavior_GrantItemsFromInput : UTriggerBehavior_Items
UTriggerBehavior_GrantItemsFromInput = {}


---@class UTriggerBehavior_Hide : UTriggerBehavior_ShowableBase
UTriggerBehavior_Hide = {}


---@class UTriggerBehavior_Increment : UTriggerBehavior_Counters
UTriggerBehavior_Increment = {}


---@class UTriggerBehavior_IncrementCompare : UTriggerBehavior_CounterComparisons
UTriggerBehavior_IncrementCompare = {}


---@class UTriggerBehavior_Items : UTriggerBehaviorBase
UTriggerBehavior_Items = {}


---@class UTriggerBehavior_LightOff : UTriggerBehavior_Lights
UTriggerBehavior_LightOff = {}


---@class UTriggerBehavior_LightOn : UTriggerBehavior_Lights
UTriggerBehavior_LightOn = {}


---@class UTriggerBehavior_LightToggle : UTriggerBehavior_Lights
UTriggerBehavior_LightToggle = {}


---@class UTriggerBehavior_Lights : UTriggerBehaviorBase
UTriggerBehavior_Lights = {}


---@class UTriggerBehavior_Lock : UTriggerBehavior_Lockables
UTriggerBehavior_Lock = {}


---@class UTriggerBehavior_Lockables : UTriggerBehaviorBase
UTriggerBehavior_Lockables = {}


---@class UTriggerBehavior_NotifyStateChanged : UTriggerBehaviorBase
UTriggerBehavior_NotifyStateChanged = {}


---@class UTriggerBehavior_Open : UTriggerBehavior_Openables
UTriggerBehavior_Open = {}


---@class UTriggerBehavior_Openables : UTriggerBehaviorBase
UTriggerBehavior_Openables = {}


---@class UTriggerBehavior_Producers : UTriggerBehaviorBase
UTriggerBehavior_Producers = {}


---@class UTriggerBehavior_ProvideRecipeItems : UTriggerBehavior_Producers
UTriggerBehavior_ProvideRecipeItems = {}


---@class UTriggerBehavior_Random : UTriggerBehaviorBase
UTriggerBehavior_Random = {}


---@class UTriggerBehavior_RandomLink : UTriggerBehaviorBase
UTriggerBehavior_RandomLink = {}


---@class UTriggerBehavior_Reset : UTriggerBehavior_Counters
UTriggerBehavior_Reset = {}


---@class UTriggerBehavior_ResetCompare : UTriggerBehavior_CounterComparisons
UTriggerBehavior_ResetCompare = {}


---@class UTriggerBehavior_SetCheckpoint : UTriggerBehaviorBase
UTriggerBehavior_SetCheckpoint = {}


---@class UTriggerBehavior_Show : UTriggerBehavior_ShowableBase
UTriggerBehavior_Show = {}


---@class UTriggerBehavior_ShowableBase : UTriggerBehaviorBase
UTriggerBehavior_ShowableBase = {}


---@class UTriggerBehavior_StartEncounter : UTriggerBehavior_Encounters
UTriggerBehavior_StartEncounter = {}


---@class UTriggerBehavior_StartProduction : UTriggerBehavior_Producers
UTriggerBehavior_StartProduction = {}


---@class UTriggerBehavior_TimerStart : UTriggerBehavior_Timers
UTriggerBehavior_TimerStart = {}


---@class UTriggerBehavior_TimerStop : UTriggerBehavior_Timers
UTriggerBehavior_TimerStop = {}


---@class UTriggerBehavior_TimerToggle : UTriggerBehavior_Timers
UTriggerBehavior_TimerToggle = {}


---@class UTriggerBehavior_Timers : UTriggerBehaviorBase
UTriggerBehavior_Timers = {}


---@class UTriggerBehavior_ToggleActivated : UTriggerBehavior_Activateables
UTriggerBehavior_ToggleActivated = {}


---@class UTriggerBehavior_ToggleAutoFireActive : UTriggerBehavior_Turret
UTriggerBehavior_ToggleAutoFireActive = {}


---@class UTriggerBehavior_ToggleEncounter : UTriggerBehavior_Encounters
UTriggerBehavior_ToggleEncounter = {}


---@class UTriggerBehavior_ToggleLock : UTriggerBehavior_Lockables
UTriggerBehavior_ToggleLock = {}


---@class UTriggerBehavior_ToggleOpen : UTriggerBehavior_Openables
UTriggerBehavior_ToggleOpen = {}


---@class UTriggerBehavior_ToggleShow : UTriggerBehavior_ShowableBase
UTriggerBehavior_ToggleShow = {}


---@class UTriggerBehavior_TransferCompletedItems : UTriggerBehavior_Producers
UTriggerBehavior_TransferCompletedItems = {}


---@class UTriggerBehavior_Trap : UTriggerBehaviorBase
UTriggerBehavior_Trap = {}


---@class UTriggerBehavior_Triggers : UTriggerBehaviorBase
UTriggerBehavior_Triggers = {}


---@class UTriggerBehavior_Turret : UTriggerBehaviorBase
UTriggerBehavior_Turret = {}


---@class UTriggerBehavior_Unlock : UTriggerBehavior_Lockables
UTriggerBehavior_Unlock = {}


---@class UTriggerBehaviorsGroup : UGameUserWidget
---@field EventData FDataTableRowHandle
---@field BehaviorData FTriggerBehaviorUIData
UTriggerBehaviorsGroup = {}

function UTriggerBehaviorsGroup:OnBehaviorDataChanged() end


---@class UTriggerBehaviorsWidget : UGameUserWidget
---@field BehaviorGroupContainer UVerticalBox
---@field BehaviorGroupClass TSubclassOf<UTriggerBehaviorsGroup>
---@field BehaviorGroupWidgets TArray<UTriggerBehaviorsGroup>
UTriggerBehaviorsWidget = {}

---@param Interactable TScriptInterface<IInteractableInterface>
function UTriggerBehaviorsWidget:OnInteractableChanged(Interactable) end


---@class UTriggerConnectorComponent : UActorComponent
---@field ConnectionVisuals TSubclassOf<AActor>
---@field ConnectionStartType ETriggerObjectType
---@field IsConnectingTrigger boolean
---@field OnTriggerConnectionModeChanged FTriggerConnectorComponentOnTriggerConnectionModeChanged
---@field OnTriggerGroupIndexChanged FTriggerConnectorComponentOnTriggerGroupIndexChanged
---@field ConnectionStartInterface TScriptInterface<ITriggerObject>
---@field PossibleConnectionEndInterface TScriptInterface<ITriggerObject>
---@field ConnectionStartActor AActor
---@field PossibleConnectionEndActor AActor
---@field ConnectionInterface TScriptInterface<ITriggerConnectionInterface>
---@field ConnectionVisualsActor AActor
---@field StartActorFoliageKey FFoliageKey
---@field StartActorBuildingKey FBuildingGridBuildingId
---@field DefaultTriggerGroup uint8
UTriggerConnectorComponent = {}

---@param StartObject TScriptInterface<ITriggerObject>
---@param InStartConnectionType ETriggerObjectType
---@param FoliageInstanceKey FFoliageKey
---@param BuildingInstanceKey FBuildingGridBuildingId
function UTriggerConnectorComponent:ServerTryEnterTriggerConnectionMode(StartObject, InStartConnectionType, FoliageInstanceKey, BuildingInstanceKey) end
---@param TriggerGroup uint8
function UTriggerConnectorComponent:ServerSetDefaultTriggerGroup(TriggerGroup) end
---@param GameMode AGameModeBase
---@param NewPlayer APlayerController
function UTriggerConnectorComponent:ServerOnPostLogin(GameMode, NewPlayer) end
function UTriggerConnectorComponent:ServerExitTriggerConnectionMode() end
---@param InConnection AActor
function UTriggerConnectorComponent:ServerDisconnectWire(InConnection) end
---@param bContinuePlacement boolean
function UTriggerConnectorComponent:ServerConnectWire(bContinuePlacement) end
function UTriggerConnectorComponent:OnRep_PossibleConnectionEndActor() end
function UTriggerConnectorComponent:OnRep_ConnectionVisualsActor() end
function UTriggerConnectorComponent:OnRep_ConnectionStartActor() end
---@param CurrentMode EEditMode
---@param NewMode EEditMode
function UTriggerConnectorComponent:OnPreEditModeChange(CurrentMode, NewMode) end
---@param PickedFromID int32
---@param NewTrigger TScriptInterface<ITriggerObject>
function UTriggerConnectorComponent:OnCopiedPlacementCompleted(PickedFromID, NewTrigger) end
---@param DestroyedActor AActor
function UTriggerConnectorComponent:OnConnectionStartActorDestroyed(DestroyedActor) end
---@param ConnectedTrigger AActor
function UTriggerConnectorComponent:MulticastHandleTriggerConnected(ConnectedTrigger) end
function UTriggerConnectorComponent:InputChangeDefaultTriggerGroup() end
---@return boolean
function UTriggerConnectorComponent:GetIsPlacingWire() end
---@return FString
function UTriggerConnectorComponent:GetCurrentConnectionErrorString() end
---@return ETriggerConnectionError
function UTriggerConnectorComponent:GetCurrentConnectionError() end
function UTriggerConnectorComponent:ConnectWire() end
function UTriggerConnectorComponent:ClientOnExitTriggerConnectionMode() end
function UTriggerConnectorComponent:ClientOnEnterTriggerConnectionMode() end
function UTriggerConnectorComponent:ClientExitTriggerConnectionMode() end


---@class UTriggerGameplayStatics : UBlueprintFunctionLibrary
UTriggerGameplayStatics = {}

---@param TriggerObject UObject
---@return boolean
function UTriggerGameplayStatics:EvaluateLogicGatePersistentTriggerState(TriggerObject) end
---@param TriggerObject UObject
---@return boolean
function UTriggerGameplayStatics:EvaluateCounterPassesCondition(TriggerObject) end


---@class UTriggerManagerComponent : UActorComponent
---@field OnPlayerPlacingConnectionStateChanged FTriggerManagerComponentOnPlayerPlacingConnectionStateChanged
---@field TeleportCooldown float
---@field TriggerGroupVisibilityMask uint8
---@field AlwaysVisibleMaterialBase UMaterialInterface
---@field PlacementMaterialBase UMaterialInterface
---@field AlwaysVisibleMaterials TArray<UMaterialInterface>
---@field PlacementMaterials TArray<UMaterialInterface>
---@field TeleportedActorList TSet<FTeleportedActorData>
---@field EditModeTeleporters TSet<AActor>
---@field BehaviorsTable UDataTable
---@field EventsTable UDataTable
---@field bIsInEditMode boolean
---@field CurrentMaxTriggerID int32
---@field CurrentMaxConnectionID int32
---@field IDToTriggerMap TMap<int32, TScriptInterface<ITriggerObject>>
---@field IDToConnectionMap TMap<int32, TScriptInterface<ITriggerConnectionInterface>>
---@field TriggerData TSet<FTriggerObjectData>
---@field BehaviorSet TSet<FTriggerProcessingEntry>
---@field SentEventSet TSet<FTriggerProcessingEntry>
---@field TriggerPlacementAlwaysRelevanceMap TMap<AActor, FTriggerConnectorOwnerList>
---@field TriggerPlacementDeinstancedMap TMap<FTriggerConnectorDeinstancedKey, FTriggerConnectorOwnerList>
---@field TriggerClassHashMap TMap<uint32, FString>
---@field DeferredRemovalItems TArray<FDeferredRemovalItem>
UTriggerManagerComponent = {}

---@param Actor AActor
function UTriggerManagerComponent:UnregisterEditModeTeleporter(Actor) end
---@param GroupIndex uint8
---@param bVisible boolean
function UTriggerManagerComponent:SetTriggerGroupVisibility(GroupIndex, bVisible) end
---@param Actor AActor
function UTriggerManagerComponent:RegisterTeleportedActor(Actor) end
---@param Actor AActor
function UTriggerManagerComponent:RegisterEditModeTeleporter(Actor) end
---@param TriggerID int32
function UTriggerManagerComponent:MulticastUnregisterTrigger(TriggerID) end
---@param ConnectionId int32
function UTriggerManagerComponent:MulticastUnregisterConnection(ConnectionId) end
---@param TriggerIDA int32
---@param TriggerIDB int32
---@param ConnectionId int32
function UTriggerManagerComponent:MulticastRemoveConnection(TriggerIDA, TriggerIDB, ConnectionId) end
---@param RemoveList TArray<FDeferredRemovalItem>
function UTriggerManagerComponent:MulticastDeferredRemoveConnection(RemoveList) end
---@param TriggerIDA int32
---@param TriggerIDB int32
---@param ConnectionId int32
function UTriggerManagerComponent:MulticastAddOutgoingConnection(TriggerIDA, TriggerIDB, ConnectionId) end
---@param TriggerIDA int32
---@param TriggerIDB int32
---@param ConnectionId int32
function UTriggerManagerComponent:MulticastAddIncomingConnection(TriggerIDA, TriggerIDB, ConnectionId) end
---@param GroupIndex uint8
---@return boolean
function UTriggerManagerComponent:IsTriggerGroupVisible(GroupIndex) end
---@param GroupIndex uint8
---@return UMaterialInterface
function UTriggerManagerComponent:GetTriggerConnectorPlacementMaterial(GroupIndex) end
---@param GroupIndex uint8
---@return UMaterialInterface
function UTriggerManagerComponent:GetTriggerConnectorAlwaysVisibleMaterial(GroupIndex) end
---@return uint8
function UTriggerManagerComponent:GetNumTriggerGroups() end
---@return TSet<AActor>
function UTriggerManagerComponent:GetEditModeTeleporters() end
---@param Actor AActor
---@return boolean
function UTriggerManagerComponent:CanActorTeleport(Actor) end


---@class UUGCEditModeTeleportMarker : UBaseMapEntryWidget
UUGCEditModeTeleportMarker = {}

---@return AActor
function UUGCEditModeTeleportMarker:GetReferenceActor() end


---@class UUINotificationBase : UGameUserWidget
UUINotificationBase = {}


---@class UUnusedCollisionReportCommandlet : UCommandlet
UUnusedCollisionReportCommandlet = {}


---@class UUpgradeCollectibleLODActor : UBaseLODActor
UUpgradeCollectibleLODActor = {}


---@class UUserInterfaceStatics : UBlueprintFunctionLibrary
UUserInterfaceStatics = {}

---@param WorldContextObject UObject
---@param InText FText
---@param bForceCensor boolean
---@return FText
function UUserInterfaceStatics:TryCensorText(WorldContextObject, InText, bForceCensor) end
---@param WorldContextObject UObject
---@param inString FString
---@param bForceCensor boolean
---@return FString
function UUserInterfaceStatics:TryCensorString(WorldContextObject, inString, bForceCensor) end
---@param ItemList TArray<UItem>
function UUserInterfaceStatics:SortItemList(ItemList) end
function UUserInterfaceStatics:ShowVirtualOSKeyboard() end
---@param Parent UWidget
---@param bIterateForwards boolean
---@return boolean
function UUserInterfaceStatics:SetFirstFocusableChild(Parent, bIterateForwards) end
---@param ScrollBox UScrollBox
---@param Widget UWidget
---@param AnimateScroll boolean
---@param Padding float
function UUserInterfaceStatics:ScrollInViewForFocus(ScrollBox, Widget, AnimateScroll, Padding) end
---@param RecipeRowHandle FDataTableRowHandle
---@param HaveItems TArray<UItem>
function UUserInterfaceStatics:RemoveItemsForCraftingRecipe(RecipeRowHandle, HaveItems) end
---@param Text FText
---@return FText
function UUserInterfaceStatics:MakeTextDirectional(Text) end
---@param Item UItem
---@return FHotBarQuickSlotItemTypeKey
function UUserInterfaceStatics:MakeHotBarQuickSlotItemTypeKeyFromItem(Item) end
---@param Message FString
function UUserInterfaceStatics:LogUIMessage(Message) end
---@param LocString FLocString
---@return boolean
function UUserInterfaceStatics:IsValidLocalizedString(LocString) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UUserInterfaceStatics:IsKeyItem(ItemRowHandle) end
---@param ItemRowHandle FDataTableRowHandle
---@return boolean
function UUserInterfaceStatics:IsHauledItem(ItemRowHandle) end
---@param WorldContextObject UObject
---@param Requirements TArray<FRecipeRequirements>
---@param HaveItems TArray<UItem>
---@return boolean
function UUserInterfaceStatics:HasRequirements(WorldContextObject, Requirements, HaveItems) end
---@param DeltaTime float
---@param ActualValue float
---@param InOutCurrentAnimationDelay float
---@param InOutCurrentDisplayedValue float
---@param InOutLastObservedValue float
---@param Image UImage
---@param InOutValueTweening boolean
---@param AlwaysResetAnimationDelay boolean
---@param InvertFillValue boolean
---@param DelayOnDrop boolean
---@param ForceAlwaysTween boolean
function UUserInterfaceStatics:HandleImageDelayFillTick(DeltaTime, ActualValue, InOutCurrentAnimationDelay, InOutCurrentDisplayedValue, InOutLastObservedValue, Image, InOutValueTweening, AlwaysResetAnimationDelay, InvertFillValue, DelayOnDrop, ForceAlwaysTween) end
---@param WorldContextObject UObject
---@return UWidgetPlayerProxy
function UUserInterfaceStatics:GetWidgetManagerOwnerProxy(WorldContextObject) end
---@param WorldContextObject UObject
---@return UWidgetManager
function UUserInterfaceStatics:GetWidgetManager(WorldContextObject) end
---@param Widget UWidget
---@return UScrollBox
function UUserInterfaceStatics:GetParentScrollBox(Widget) end
---@param WorldContextObject UObject
---@param RecipeRowHandle FDataTableRowHandle
---@param HaveItems TArray<UItem>
---@return int32
function UUserInterfaceStatics:GetMaxCraftable(WorldContextObject, RecipeRowHandle, HaveItems) end
---@param LocString FLocString
---@return FText
function UUserInterfaceStatics:GetLocalizedText(LocString) end
---@param LocString FLocString
---@return FString
function UUserInterfaceStatics:GetLocalizedString(LocString) end
---@param ItemKey FHotBarQuickSlotItemTypeKey
---@param HaveItems TArray<UItem>
---@param IncludeBrokenItems boolean
---@return int32
function UUserInterfaceStatics:GetItemCountForHotBarKey(ItemKey, HaveItems, IncludeBrokenItems) end
---@param WorldContextObject UObject
---@param ItemRowHandle FDataTableRowHandle
---@param HaveItems TArray<UItem>
---@param IncludeBrokenItems boolean
---@return int32
function UUserInterfaceStatics:GetItemCount(WorldContextObject, ItemRowHandle, HaveItems, IncludeBrokenItems) end
---@param WorldContextObject UObject
---@param Alpha float
---@return FLinearColor
function UUserInterfaceStatics:GetHeatMapColor(WorldContextObject, Alpha) end
---@param WorldContextObject UObject
---@param EnumName FName
---@return FLinearColor
function UUserInterfaceStatics:GetGlobalColorLinear(WorldContextObject, EnumName) end
---@param WorldContextObject UObject
---@return AGameUI
function UUserInterfaceStatics:GetGameUI(WorldContextObject) end
---@param FilterText FString
---@param Keywords TArray<FText>
---@return boolean
function UUserInterfaceStatics:GetFilterMatches(FilterText, Keywords) end
---@return boolean
function UUserInterfaceStatics:GetCultureFlowIsRTL() end
---@param AttackSpeedTag FGameplayTag
---@return FString
function UUserInterfaceStatics:GetAttackSpeedText(AttackSpeedTag) end
---@param Widget UWidget
function UUserInterfaceStatics:ForceSetMouseFocus(Widget) end
---@param WorldContextObject UObject
---@param InLocation FVector
---@param EdgePercent float
---@param OutScreenPosition FVector2D
---@param OutRotationAngleDegrees float
---@param bIsOnScreen boolean
---@param bFacingBackward boolean
function UUserInterfaceStatics:FindScreenEdgeLocationForWorldLocation(WorldContextObject, InLocation, EdgePercent, OutScreenPosition, OutRotationAngleDegrees, bIsOnScreen, bFacingBackward) end
---@param Result FBlueprintSessionResult
---@param SharedSaveUserID FString
---@return boolean
function UUserInterfaceStatics:DoesSessionResultOwnerMatchSharedSaveUserId(Result, SharedSaveUserID) end
---@param WorldContextObject UObject
---@return boolean
function UUserInterfaceStatics:DoesLocalUserHaveUserGeneratedContentPrivilege(WorldContextObject) end
---@param Key FKey
---@param ActionMappingName FName
---@return boolean
function UUserInterfaceStatics:DoesKeyMatchActionMapping(Key, ActionMappingName) end
---@param Chord FInputChord
---@param ActionMappingName FName
---@return boolean
function UUserInterfaceStatics:DoesChordMatchActionMapping(Chord, ActionMappingName) end
---@param ItemList TArray<UItem>
---@return boolean
function UUserInterfaceStatics:CanSortItemList(ItemList) end
---@param WorldContextObject UObject
---@param RecipeData FRecipeData
---@param HaveItems TArray<UItem>
---@return boolean
function UUserInterfaceStatics:CanCraftRecipeData(WorldContextObject, RecipeData, HaveItems) end
---@param WorldContextObject UObject
---@param RecipeRowHandle FDataTableRowHandle
---@param HaveItems TArray<UItem>
---@return boolean
function UUserInterfaceStatics:CanCraftRecipe(WorldContextObject, RecipeRowHandle, HaveItems) end


---@class UVisualEffect : UDataAsset
---@field ParticleSystem UParticleSystem
---@field VFXBlueprint UClass
---@field bAttachedToActor boolean
---@field SocketMeshType EVisualEffectMeshType
---@field SocketName FName
---@field MeshTagName FName
---@field ShadowCastingEnabled boolean
---@field bInheritScale boolean
---@field bInheritRotation boolean
UVisualEffect = {}



---@class UVisualStateComponent : UActorComponent
---@field OnHealthStateChange FVisualStateComponentOnHealthStateChange
---@field OnCustomVisualStateChange FVisualStateComponentOnCustomVisualStateChange
---@field PrimaryMeshComponentName FName
---@field bStartActive boolean
---@field bDamageStateEffects boolean
---@field MaterialToggleHealthRatio float
---@field DamageStateCurve FRuntimeFloatCurve
---@field DamageMaxLODLevel int8
---@field HitLocations TArray<FVector_NetQuantize>
---@field HealthState EHealthVisualState
---@field HealthStateMeshes TArray<FHealthStateMesh>
---@field AdditionalHealthStateMeshes TMap<FGameplayTag, FHealthStateMeshList>
---@field HealthComponent UHealthComponent
---@field MeshComponent UStaticMeshComponent
UVisualStateComponent = {}

---@param CustomVisualState FGameplayTag
function UVisualStateComponent:SetCustomVisualState(CustomVisualState) end
---@param NewActiveTag FGameplayTag
function UVisualStateComponent:SetActiveMeshTag(NewActiveTag) end
function UVisualStateComponent:ResetActiveMeshTag() end
function UVisualStateComponent:OnRep_HitLocations() end
---@param OldHealthState EHealthVisualState
function UVisualStateComponent:OnRep_HealthState(OldHealthState) end
---@param Damage float
---@param DamageInfo FDamageInfo
---@param InstigatedBy AController
---@param DamageCauser UBaseLODActor
---@param IsKillingBlow boolean
function UVisualStateComponent:OnHit(Damage, DamageInfo, InstigatedBy, DamageCauser, IsKillingBlow) end
---@param SourceHealthComponent UHealthComponent
---@param CurrentHealth float
---@param OldHealth float
function UVisualStateComponent:OnHealthChange(SourceHealthComponent, CurrentHealth, OldHealth) end
---@param Tag FGameplayTag
---@return boolean
function UVisualStateComponent:HasMeshTag(Tag) end
---@param HealthState EHealthVisualState
---@param MeshTag FGameplayTag
---@return UStaticMesh
function UVisualStateComponent:GetMesh(HealthState, MeshTag) end
---@param CustomVisualState FGameplayTag
function UVisualStateComponent:ClearCustomVisualState(CustomVisualState) end


---@class UVisualStateManagerComponent : UActorComponent
UVisualStateManagerComponent = {}


---@class UVitalStat : UBaseVitalStat
UVitalStat = {}


---@class UVitalStatConstant : UVitalStat
---@field Rate float
---@field bChangeTameRate boolean
---@field TameRate float
UVitalStatConstant = {}



---@class UVitalStatDamageDriven : UVitalStat
---@field DamageResponseScale float
UVitalStatDamageDriven = {}



---@class UVitalStatFlyingTiredness : UVitalStatConstant
---@field WhileGroundedRate float
UVitalStatFlyingTiredness = {}



---@class UVitalStatHourPegged : UBaseVitalStat
---@field ForceMaxUntilHour float
---@field HourValueCurve UCurveFloat
UVitalStatHourPegged = {}



---@class UVitalStatPetHappiness : UVitalStatConstant
UVitalStatPetHappiness = {}


---@class UVitalStatSleepiness : UVitalStatTotalHoursDriven
---@field WhileSleepingRate float
---@field DecayRateWhileSleepingCurve UCurveFloat
UVitalStatSleepiness = {}



---@class UVitalStatSwimmingTiredness : UVitalStatConstant
---@field WhileRestingRate float
UVitalStatSwimmingTiredness = {}



---@class UVitalStatTotalHoursDriven : UVitalStat
---@field ForceSleepUntilHour float
---@field DecayRateByHourCurve UCurveFloat
UVitalStatTotalHoursDriven = {}



---@class UVitalVisualsComponent : UActorComponent
---@field OnVitalValueChanged FVitalVisualsComponentOnVitalValueChanged
---@field VitalTag FGameplayTag
---@field VitalValue float
UVitalVisualsComponent = {}

function UVitalVisualsComponent:OnRep_VitalValue() end
---@param Tag FGameplayTag
---@return boolean
function UVitalVisualsComponent:HasVitalTag(Tag) end
---@return float
function UVitalVisualsComponent:GetVitalValue() end


---@class UVoiceChatRowWidget : UGameUserWidget
---@field SpeakerPlayerState ASurvivalPlayerState
---@field MainBorder UBorder
---@field FadeGranularity float
---@field FadeSpeed float
UVoiceChatRowWidget = {}



---@class UWalkableBoxComponent : UBoxComponent
UWalkableBoxComponent = {}


---@class UWaterManagerComponent : UActorComponent
---@field BuoyantPropList TArray<ABuoyantProp>
UWaterManagerComponent = {}



---@class UWaveCreatureComponent : UActorComponent
---@field DeinstanceRadius float
---@field DistanceMovedToDeinstance float
---@field TimeBetweenDeinstances float
---@field LastDeinstanceTime float
---@field LastDeinstanceLocation FVector
---@field TargetContactTick FActorCustomTickFunction
---@field MaxTimeWithoutContact float
---@field TimeWithoutContact float
---@field CreatureStuckTick FActorCustomTickFunction
---@field MinDistanceToTravelForNotStuck float
---@field LastLocationForStuckTick FVector
---@field DistanceToBaseTick FActorCustomTickFunction
---@field MinTravelDistanceForProgress float
---@field LastDistToBase float
---@field ProjectedDistanceTick FActorCustomTickFunction
---@field MinProjectedProgressDistance float
---@field LastProjectedDistance float
---@field WaterOverlapTick FActorCustomTickFunction
---@field bIsUnderwater boolean
---@field WaveRetreatTick FActorCustomTickFunction
---@field RetreatTimeLimit float
---@field RetreatRandRange float
---@field RetreatStartTime float
---@field CheckNewDestinationTick FActorCustomTickFunction
---@field NewDestinationCheckThreshold float
---@field TimeInBaseRadius float
---@field SpawnTarget AWaveSpawnTarget
UWaveCreatureComponent = {}

---@param UnderWater boolean
function UWaveCreatureComponent:SetIsUnderWater(UnderWater) end
---@param BaseIndex int32
---@param Region AWaveSpawnRegionVolume
function UWaveCreatureComponent:OnWaveRegionRemovedFromBase(BaseIndex, Region) end
---@param AttackState EWaveAttackState
function UWaveCreatureComponent:OnWaveAttackStateChanged(AttackState) end


---@class UWaveManagerComponent : UActorComponent
---@field OnWaveSpawned FWaveManagerComponentOnWaveSpawned
---@field OnWaveCompleted FWaveManagerComponentOnWaveCompleted
---@field OnWaveSpawnFailed FWaveManagerComponentOnWaveSpawnFailed
---@field OnWaveAttackStateChanged FWaveManagerComponentOnWaveAttackStateChanged
---@field OnWaveCompositionChanged FWaveManagerComponentOnWaveCompositionChanged
---@field RetrySpawnsTick FActorCustomTickFunction
---@field SpawnData TArray<FWaveSpawnFaction>
---@field MaxTimeInRetryQueue float
---@field HeatBrackets TArray<FHeatBracket>
---@field AdditionalMultiplayerHeat TArray<int32>
---@field DefaultWaveSpawnReputationThreshold int32
---@field WaveSpawnReputationThresholds TMap<FGameplayTag, int32>
---@field MinimumWaveAnchorToAnchorRatio float
---@field OrganicWaveCooldownPeriodBase int32
---@field OrganicWaveCooldownPeriodRandom int32
---@field ManualWaveRefreshesOrganicCooldownThreshold int32
---@field CooldownDelay int32
---@field CooldownDelayThreshold int32
---@field FlyingCreatureSpawnMinimumSpawnDelay float
---@field MaxCreaturesPerTranche int32
---@field SecondsBetweenTranches float
---@field MaxActiveCreatureSpawnDelay float
---@field MaxActiveCreatureWeight float
---@field ActiveCreatureWeights TMap<EWaveCreatureWeightClass, float>
---@field FlyingCreatureCountWeight float
---@field AdditionalMaxActiveCreaturesPerExtraPlayer float
---@field BaseBufferDistance float
---@field WaveTargetStartCount int32
---@field WaveSpawnCheckInterval float
---@field SpawnChancePerBaseRepRequirement float
---@field MinBasePointsForOrganicWave float
---@field FlyingCreatureSpawnOffsetMinMax FVector2D
---@field SpawnEQSRequest UEQSRequest
---@field WaveStartEQSRequest UEQSRequest
---@field WaveBaseEQSRequest UEQSRequest
---@field WaveMusicTensionTrack UMusicTrackData
---@field WaveMusicAttackTrack UMusicTrackData
---@field DestroyedBuildingCountPercentLimit float
---@field WaveBaseDestructionRatio float
---@field DestroyedBuildingCountPercentLimitCurve FRuntimeFloatCurve
---@field WaveBaseDestructionRatioCurve FRuntimeFloatCurve
---@field DamageCapReductionPercentForInactivity float
---@field TimeBetweenInactivityChecks float
---@field PlayersAwayFromBaseDestructionMultiplier float
---@field ManualWaveFullClearPointsThreshold float
---@field DestroyedBuildingCountIgnoreLimitForManualWave int32
---@field PlayerDeathWaveDamage float
---@field UnderAttackChatterDelay float
---@field ActiveFactions TArray<FGameplayTag>
---@field WorldEventPendingWaveFactions TArray<FGameplayTag>
---@field WorldEventFactionData TMap<FGameplayTag, FWorldEventWaveData>
---@field ActiveWave USpawnedWave
---@field AttackState EWaveAttackState
---@field ActiveWaveInitialSpawnCount int32
---@field ActiveWaveRemainingSpawnCount int32
---@field bWaveActive boolean
---@field bOrganicWaveInitiated boolean
---@field bManualWaveInitiated boolean
---@field FailedToSpawnFactions TArray<FGameplayTag>
---@field WaveFactionKills TMap<FGameplayTag, int32>
---@field WaveDamageDone float
---@field WaveInstigator AActor
---@field CooldownToNextWave int32
---@field HighestCompletedHeatLevel int8
---@field WaveComposition TArray<FWaveCompositionData>
---@field BlockingVolumes TArray<AWaveBlockerVolume>
---@field bClearingForEditModeChange boolean
UWaveManagerComponent = {}

---@return boolean
function UWaveManagerComponent:WaveInitiated() end
---@param Faction FGameplayTag
function UWaveManagerComponent:QueueWorldEventPendingWaveFaction(Faction) end
function UWaveManagerComponent:PlayWaveStartChatter() end
---@param DamageInfo FDamageInfo
function UWaveManagerComponent:OnSpawnKilled(DamageInfo) end
---@param CurrentMode EEditMode
---@param NewMode EEditMode
function UWaveManagerComponent:OnPreEditModeChanged(CurrentMode, NewMode) end
---@param NewHour int32
---@param NewDay int32
function UWaveManagerComponent:OnHourChanged(NewHour, NewDay) end
---@param DefensePoint UDefensePointComponent
function UWaveManagerComponent:OnDefensePointCompleted(DefensePoint) end
function UWaveManagerComponent:OnCustomGameSettingsChanged() end
---@return boolean
function UWaveManagerComponent:IsWaveActive() end
---@return boolean
function UWaveManagerComponent:IsManualWaveActive() end
---@return boolean
function UWaveManagerComponent:IsFactionWaveActive() end
---@param FactionTag FGameplayTag
---@return FWaveSpawnFaction
function UWaveManagerComponent:GetWaveSpawnFaction(FactionTag) end
---@return float
function UWaveManagerComponent:GetWaveProgress() end
---@return TArray<FWaveCompositionData>
function UWaveManagerComponent:GetWaveComposition() end
---@return int32
function UWaveManagerComponent:GetNumWaveCreatures() end
---@return AActor
function UWaveManagerComponent:GetInstigator() end
---@return int32
function UWaveManagerComponent:GetInitialWaveCreatureCount() end
---@param Heat int32
---@param WaveSpawnData TArray<FWaveSpawn>
---@param Finalize boolean
function UWaveManagerComponent:GenerateWaveSpawns(Heat, WaveSpawnData, Finalize) end
---@param FactionTag FGameplayTag
---@param Weight int32
---@param Finalize boolean
function UWaveManagerComponent:GenerateFactionWaveSpawnsWithWeights(FactionTag, Weight, Finalize) end
---@param FactionTag FGameplayTag
---@param Heat int32
---@param Finalize boolean
function UWaveManagerComponent:GenerateFactionWaveSpawns(FactionTag, Heat, Finalize) end
---@param FactionTag FGameplayTag
---@return boolean
function UWaveManagerComponent:FactionHasFlyingCreatures(FactionTag) end
---@return boolean
function UWaveManagerComponent:EvaluateWaveSuccessOnRetreat() end
---@param BaseIndex int32
---@return boolean
function UWaveManagerComponent:BaseMeetsWaveAnchorRatio(BaseIndex) end


---@class UWeaponAnimInstance : UAnimInstance
---@field IsShadowAnim boolean
---@field IsFirstPerson boolean
---@field IsUnderwater boolean
---@field IsMoving boolean
---@field IsInAir boolean
---@field IsSwimming boolean
---@field IsCrouching boolean
---@field IsSprinting boolean
---@field IsAttacking boolean
---@field IsBlocking boolean
---@field IsThrowing boolean
---@field IsInCombat boolean
---@field IsTurning boolean
---@field IsEquipping boolean
---@field TurnDelta float
---@field AimPitch float
---@field bHasAmmo boolean
UWeaponAnimInstance = {}



---@class UWebLoginWidget : UGameUserWidget
---@field SubsystemIdentifer FName
---@field BrowserWidget UWebBrowser
UWebLoginWidget = {}

---@param Text FText
function UWebLoginWidget:OnLoginUrlChanged(Text) end
function UWebLoginWidget:OnLoginShow() end
function UWebLoginWidget:OnLoginHide() end
function UWebLoginWidget:CancelWebLogin() end


---@class UWendellBotLODActor : UCharacterLODActor
UWendellBotLODActor = {}


---@class UWendellLookTriggerComponent : UBaseLookTriggerComponent
---@field BanterConversation FConversationReference
---@field BanterStartNode int32
UWendellLookTriggerComponent = {}



---@class UWidgetInteractComponent : UActorComponent
---@field OnSingleUseInteractingActorChanged FWidgetInteractComponentOnSingleUseInteractingActorChanged
---@field WidgetClass TSoftClassPtr<UInteractionWidget>
---@field bAllowMultipleUsers boolean
---@field bAllowInteractMidCombat boolean
---@field DefaultInteractionType EInteractionType
---@field DefaultInteractionText FLocString
---@field bInUse boolean
UWidgetInteractComponent = {}

---@param NewHealthState EHealthState
function UWidgetInteractComponent:OnInteractingActorHealthStateChanged(NewHealthState) end
---@param Actor AActor
function UWidgetInteractComponent:OnInteractingActorDestroyed(Actor) end
---@return boolean
function UWidgetInteractComponent:IsBusy() end


---@class UWidgetManager : UObject
---@field OnWidgetStackChanged FWidgetManagerOnWidgetStackChanged
---@field OnChatWindowAllowedChanged FWidgetManagerOnChatWindowAllowedChanged
---@field LastUsedInGameMenuScreenType EInGameMenuScreenType
---@field WindowStack TArray<UWindowWidget>
---@field WindowCache TArray<UWindowWidget>
---@field OwningPlayerProxy UWidgetPlayerProxy
---@field OwningPlayerController ASurvivalPlayerController
---@field OwningPlayerCharacter ASurvivalPlayerCharacter
---@field OwningBuilder ABuilderPawn
---@field FrameLimitingWindowStack TSet<UWindowWidget>
UWidgetManager = {}

---@param InteractableActor AActor
function UWidgetManager:TryCloseInteractableWidget(InteractableActor) end
function UWidgetManager:TogglePauseMenu() end
---@param Item1 UItem
---@param Index1 int32
---@param Item2 UItem
---@param Index2 int32
function UWidgetManager:SwapItemSlots(Item1, Index1, Item2, Index2) end
function UWidgetManager:SortProxyInventory() end
function UWidgetManager:ShowWaitingForHostToLoadSaveUI() end
function UWidgetManager:ShowPauseMenu() end
---@param bState boolean
function UWidgetManager:SetPauseMenuActive(bState) end
function UWidgetManager:RemoveWaitingForOtherPlayersToJoinWindow() end
---@param RecipeRowHandle FDataTableRowHandle
function UWidgetManager:RemoveProxyItemsForRecipe(RecipeRowHandle) end
---@param Item UItem
---@param Count int32
function UWidgetManager:RemoveProxyItem(Item, Count) end
---@param Item UItem
function UWidgetManager:ProxyUnequipItem(Item) end
---@param Item UItem
function UWidgetManager:ProxyEquipItem(Item) end
function UWidgetManager:OpenUGCSettings() end
---@param IsUsingGamepad boolean
function UWidgetManager:OnUsingGamepadChanged(IsUsingGamepad) end
function UWidgetManager:OnPlayerProximityInvetoriesChanged() end
---@param Sender UInventoryComponent
function UWidgetManager:OnPlayerInventoryChanged(Sender) end
---@param Sender UHaulingComponent
function UWidgetManager:OnPlayerHaulingChanged(Sender) end
function UWidgetManager:OnPlayerEquipmentChanged() end
---@param Interactable TScriptInterface<IInteractableInterface>
function UWidgetManager:OnInteractableChanged(Interactable) end
function UWidgetManager:OnGameStateReset() end
---@return boolean
function UWidgetManager:IsOpenQuickMenuAllowed() end
function UWidgetManager:HideWaitingForHostToLoadSaveUI() end
function UWidgetManager:HidePauseMenu() end
function UWidgetManager:HandleTopWindowRefocus() end
---@return UWindowWidget
function UWidgetManager:GetTopWindow() end
---@return UWidgetPlayerProxy
function UWidgetManager:GetOwningPlayerProxy() end
---@return int32
function UWidgetManager:GetNumWindowsOpen() end
---@param Name FName
function UWidgetManager:GetLastUsedInGameMenuScreenName(Name) end
---@return boolean
function UWidgetManager:GetHideHUD() end
---@param WidgetClass TSoftClassPtr<UWindowWidget>
---@return UWindowWidget
function UWidgetManager:GetActiveWindowOfType(WidgetClass) end
---@return boolean
function UWidgetManager:DoesWidgetStackHaveFullScreenWindow() end
---@param SingleItem boolean
function UWidgetManager:DefragProxyInventory(SingleItem) end
---@param WidgetClass TSoftClassPtr<UWindowWidget>
---@return UWindowWidget
function UWidgetManager:CreateWindowWidget(WidgetClass) end
---@return UWindowWidget
function UWidgetManager:CreateWaitingForOtherPlayersToJoinWindow() end
function UWidgetManager:CreateMemoryLimitEstablishedWindow() end
---@param Interactable AActor
---@param WidgetClass TSoftClassPtr<UInteractionWidget>
---@return UInteractionWidget
function UWidgetManager:CreateInteractionWidget(Interactable, WidgetClass) end
---@return UWindowWidget
function UWidgetManager:CreateCouldNotGetXboxFriendsWindow() end
---@return UWindowWidget
function UWidgetManager:CreateControllerDisconnectedWindow() end
---@param WidgetClass TSoftClassPtr<UWindowWidget>
function UWidgetManager:CloseWindowOfType(WidgetClass) end
---@param Window UWindowWidget
function UWidgetManager:CloseWindow(Window) end
function UWidgetManager:CloseAllWindowWidgets() end
function UWidgetManager:CloseActiveWindowWidget() end


---@class UWidgetPlayerProxy : UObject
---@field InventoryItems TArray<UItem>
---@field EquippedMainHandItem UItem
---@field EquippedOffHandItem UItem
---@field EquippedHeadItem UItem
---@field EquippedChestItem UItem
---@field EquippedArmsItem UItem
---@field EquippedLegsItem UItem
---@field EquippedGliderItem UItem
---@field HauledItems TArray<UItem>
---@field BuilderHauledItems TArray<UItem>
---@field EquippedItems TArray<UItem>
---@field NearbyItems TArray<UItem>
UWidgetPlayerProxy = {}

---@return TArray<UItem>
function UWidgetPlayerProxy:GetInventoryAndEquippedItems() end
---@return TArray<UItem>
function UWidgetPlayerProxy:GetInventoryAndEquippedAndHauledItems() end
---@return TArray<UItem>
function UWidgetPlayerProxy:GetAllItemsAndNearbyItems() end


---@class UWidgetPool : UObject
---@field OnWidgetCreated FWidgetPoolOnWidgetCreated
---@field AvailableWidgets TArray<UUserWidget>
---@field OwningPlayer APlayerController
UWidgetPool = {}

---@param InClass TSubclassOf<UUserWidget>
---@param InOwningPlayer APlayerController
function UWidgetPool:SetClass(InClass, InOwningPlayer) end
---@param InWidget UUserWidget
function UWidgetPool:ReleaseWidget(InWidget) end
---@return UUserWidget
function UWidgetPool:AllocateWidget() end


---@class UWidgetPoolLibrary : UBlueprintFunctionLibrary
UWidgetPoolLibrary = {}

---@param Outer UObject
---@param InClass TSubclassOf<UUserWidget>
---@param InOwningPlayer APlayerController
---@return UWidgetPool
function UWidgetPoolLibrary:CreateWidgetPool(Outer, InClass, InOwningPlayer) end


---@class UWindowWidget : UGameUserWidget
---@field OnWindowClosed FWindowWidgetOnWindowClosed
---@field bLimitsFramerate boolean
---@field bHidesHUD boolean
---@field bShowsCursor boolean
---@field bRequiresCharacter boolean
---@field PauseBehavior EWindowPauseBehavior
---@field bIsPopUpWindow boolean
---@field bIsFullscreenWindow boolean
---@field bGarbageCollectOnClose boolean
---@field bCanHideWorld boolean
---@field PreloadWindows TArray<TSoftClassPtr<UWindowWidget>>
---@field bCacheOnClose boolean
---@field bForceThirdPerson boolean
---@field bShowPlayerIsBusy boolean
---@field bRefreshOnOwnerInventoryChange boolean
---@field bResetOnOwnerInventoryChange boolean
---@field bSyncNearbyItems boolean
---@field InputMode EWindowInputMode
---@field PreloadedWindows TArray<TSubclassOf<UWindowWidget>>
UWindowWidget = {}

function UWindowWidget:SetDefaultUserFocus() end
function UWindowWidget:ResetWidget() end
function UWindowWidget:RefreshWidget() end
function UWindowWidget:OpenWindow() end
function UWindowWidget:K2_HandleWindowRefocus() end
function UWindowWidget:HandleWindowClosed() end
---@return EWindowInputMode
function UWindowWidget:GetInputMode() end
---@return UWidget
function UWindowWidget:GetDefaultUserFocus() end
function UWindowWidget:CloseWindow() end
---@return boolean
function UWindowWidget:ChatWindowAllowed() end


---@class UWirePlacementComponent : UActorComponent
---@field ConnectionStartActor AActor
---@field PossibleConnectionEndActor AActor
---@field WireVisualsInstance USplineMeshComponent
---@field ConnectionVisualsActor AActor
---@field IsPlacingWire boolean
---@field ConnectionVisuals TSubclassOf<AActor>
UWirePlacementComponent = {}

---@param Target AActor
function UWirePlacementComponent:ServerTryEnterWirePlacementMode(Target) end
function UWirePlacementComponent:ServerExitWirePlacementMode() end
---@param InConnection AActor
function UWirePlacementComponent:ServerDisconnectWire(InConnection) end
function UWirePlacementComponent:ServerConnectWire() end
---@param Start FVector
---@param End FVector
function UWirePlacementComponent:MulticastUpdateWireLocation(Start, End) end
---@return boolean
function UWirePlacementComponent:GetIsPlacingWire() end
function UWirePlacementComponent:ClientOnEnterWirePlacementMode() end
function UWirePlacementComponent:ClientExitWirePlacementMode() end


---@class UWorldLabelWidgetRenderer : UWidgetComponent
---@field CullSqrDistance float
UWorldLabelWidgetRenderer = {}

function UWorldLabelWidgetRenderer:OnNeedsTextRefresh() end
function UWorldLabelWidgetRenderer:HandleLanguageChanged() end


---@class UWorldOffsetComponent : USceneComponent
---@field Offset FVector
UWorldOffsetComponent = {}



---@class UWorldTraceManagerComponent : UActorComponent
---@field RelevanceList TArray<ASurvivalCharacter>
UWorldTraceManagerComponent = {}



---@class UZiplineAnchor : USceneComponent
---@field OnZiplineAttached FZiplineAnchorOnZiplineAttached
---@field OnAnchorDestroyed FZiplineAnchorOnAnchorDestroyed
---@field SelectModePawn TSubclassOf<APawn>
---@field AbsMinAllowedAngleDot float
---@field MaxRange float
---@field WorldLocation FVector_NetQuantize
UZiplineAnchor = {}

---@return float
function UZiplineAnchor:GetMaxRange() end
---@return boolean
function UZiplineAnchor:AnyZiplineAttached() end


---@class UZoneManagerComponent : UActorComponent
---@field OnUpdateZoneDelegate FZoneManagerComponentOnUpdateZoneDelegate
---@field PlayerOverlapVolumes TArray<FOverlappedVolumes>
---@field BuilderOverlapVolumes TArray<FOverlappedVolumes>
UZoneManagerComponent = {}

function UZoneManagerComponent:OnRep_PlayerOverlapVolumes() end
---@param NewHour int32
---@param NewDay int32
function UZoneManagerComponent:OnHourChanged(NewHour, NewDay) end
---@param bIsDayTime boolean
function UZoneManagerComponent:OnDayNightChange(bIsDayTime) end
---@return FDataTableRowHandle
function UZoneManagerComponent:GetLocalZoneRowHandle() end


